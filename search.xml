<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>react性能优化</title>
      <link href="2021/11/12/react-xing-neng-you-hua/"/>
      <url>2021/11/12/react-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h4 id="react性能优化"><a href="#react性能优化" class="headerlink" title="react性能优化"></a>react性能优化</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// useMemo 和 useCallback</span><span class="token keyword">import</span> React <span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">,</span>useMemo <span class="token punctuation">,</span> useCallback<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> Children <span class="token keyword">from</span> <span class="token string">'./Children'</span><span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token string">'ccc'</span><span class="token keyword">const</span> Test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* * setValue每次点击增加，都会重新触发此函数导致重新计算 ，* 导致不必要的性能开销，使用useMemo缓存计算的结果，* 在函数计算所依赖的值发生变化时，重新计算*/</span>    <span class="token comment" spellcheck="true">// const getCount = () => {</span>   <span class="token comment" spellcheck="true">// console.log('是否重新执行')</span>   <span class="token comment" spellcheck="true">// return type === 'ccc' ? count * 100 : count * 200</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// 此时， 若count不发生变化即不会重新触发此函数，节省了性能</span><span class="token keyword">const</span> getCount <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'是否重新执行'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> type <span class="token operator">===</span> <span class="token string">'ccc'</span> <span class="token operator">?</span> count <span class="token operator">*</span> <span class="token number">100</span> <span class="token punctuation">:</span> count <span class="token operator">*</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> getMethod <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token function">count的就算结果：getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>好的呀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Children</span> <span class="token attr-name">getMethod</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>getMethod<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// pureComponent memo</span><span class="token comment" spellcheck="true">/* *  使用 pureComponent 或使用 React.memo 可以避免父组件的任何状态发生变化，就重渲子组件的问题。*  但如果传入的值发生了改变，子组件（即使使用了 pureComponent，React.memo）依然也会重渲。*  useCallback 要与 React.memo 配合使用，才能避免父组件状态更新 => 导致传入子组件的函数被重新创建，*  子组件重新渲染的问题 。*/</span><span class="token keyword">import</span> React <span class="token punctuation">,</span> <span class="token punctuation">{</span> pureComponent<span class="token punctuation">,</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token comment" spellcheck="true">// class Children extends PureComponent {</span><span class="token comment" spellcheck="true">//    constructor(props) {</span><span class="token comment" spellcheck="true">//        super(props);</span><span class="token comment" spellcheck="true">//        this.state = {  }</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">//    render() {</span><span class="token comment" spellcheck="true">//        console.log('render')</span><span class="token comment" spellcheck="true">//        return (</span><span class="token comment" spellcheck="true">//           &lt;div>&lt;/div></span><span class="token comment" spellcheck="true">//        )</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//}</span> <span class="token keyword">const</span> Children <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render222'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">memo</span><span class="token punctuation">(</span>Children<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简易计算器</title>
      <link href="2021/11/12/jian-yi-ji-suan-qi/"/>
      <url>2021/11/12/jian-yi-ji-suan-qi/</url>
      
        <content type="html"><![CDATA[<h4 id="简易计算器"><a href="#简易计算器" class="headerlink" title="简易计算器"></a>简易计算器</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useCallback<span class="token punctuation">,</span> useReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Input<span class="token punctuation">,</span> Card <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cx <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">const</span> numList <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'one'</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'two'</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'three'</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> beHavior <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'add'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'+'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'delete'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'ride'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'*'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'except'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'/'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'result'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'='</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'reset'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'del'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> Algorithm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> getResult <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'='</span><span class="token punctuation">:</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> inpValue <span class="token operator">&amp;&amp;</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>inpValue<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> beHavior<span class="token punctuation">)</span> <span class="token punctuation">{</span>          arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>title<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> resultArr        <span class="token keyword">let</span> getCalculationResult <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            resultArr <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>            getCalculationResult <span class="token operator">=</span> <span class="token function">getResult</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> resultArr<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// break</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">setInpValue</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> value <span class="token operator">=</span> getCalculationResult        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'del'</span><span class="token punctuation">:</span>        <span class="token function">setInpValue</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> initData <span class="token operator">=</span> <span class="token punctuation">{</span>    content<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>inpValue<span class="token punctuation">,</span> setInpValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispath<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initData<span class="token punctuation">)</span>  <span class="token keyword">const</span> getNums <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setInpValue</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> newVal <span class="token operator">=</span> val <span class="token operator">+</span> value      <span class="token keyword">return</span> newVal    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Algorithm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Card</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Default</span> <span class="token attr-name">size</span> <span class="token attr-name">card"</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token number">300</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span>numList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> item          <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>              children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>ele<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'ele-span'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getNums</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>ele<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">></span></span>          <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>inpValue<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token punctuation">{</span>          beHavior<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> title <span class="token punctuation">}</span> <span class="token operator">=</span> item            <span class="token keyword">return</span> <span class="token punctuation">(</span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'ele-span'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> beHavior<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">dispath</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> title <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token function">getNums</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>              <span class="token punctuation">}</span></span><span class="token attr-name">}</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Card</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Algorithm</code></pre><pre class=" language-less"><code class="language-less"><span class="token variable">@purple<span class="token punctuation">:</span></span><span class="token hexcode">#7735b4</span><span class="token punctuation">;</span><span class="token selector">.ele-span</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid rosybrown<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.beHavior</span><span class="token punctuation">{</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token variable">@purple</span><span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 简易计算器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async和await的返回值</title>
      <link href="2021/11/04/async-he-await-de-fan-hui-zhi/"/>
      <url>2021/11/04/async-he-await-de-fan-hui-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="await的返回值"><a href="#await的返回值" class="headerlink" title="await的返回值"></a>await的返回值</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// async和await是在es7中的内容，不过现在主流浏览器都支持</span><span class="token comment" spellcheck="true">// async 加在函数前面，自动返回的是一个 Promise</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> cc <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Promise {&lt;fulfilled>: undefined}</span> </code></pre><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">nums</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">3</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// await 是一个操作符， await 后面接 expression ???待续...</span>  <span class="token comment" spellcheck="true">// 在函数里面，可以使用 await 调用前面的async定义的函数 ??? 待续...</span>  <span class="token comment" spellcheck="true">// 全局环境，直接await 就可以， “局部”函数 里面，函数前面要加 async关键字  。</span>  <span class="token comment" spellcheck="true">// 全局是指，全局不需要写async吗？？待定.....</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">nums</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 局部函数前面要加async</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">nums</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'local'</span><span class="token punctuation">,</span> <span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// local △Promise</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// async和await是用来处理异步操作的，把异步变为同步的一种方法</span><span class="token comment" spellcheck="true">// async声明一个function来表示这个异步函数，await用于等待函数中某个异步操作执行完成。</span><span class="token comment" spellcheck="true">// async返回的是一个promise对象，返回值可在promise中的then方法中的第一个回调函数中使用。</span><span class="token comment" spellcheck="true">// await只能用于async的内部，await用于在一个异步操作之前，表示要等待这个异步操作的返回值。</span><span class="token comment" spellcheck="true">// 如果await得到不是一个promise对象，那么就不会等待这个异步操作。</span><span class="token comment" spellcheck="true">// 如果是一个promise对象，await就会等待promise对象的resolve，得到传入resolve的参数，作为返回值。(参数：传入reslove状态 的值)</span></code></pre><p>委婉待续…</p>]]></content>
      
      
      
        <tags>
            
            <tag> await的返回值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactJsx</title>
      <link href="2021/11/04/reactjsx/"/>
      <url>2021/11/04/reactjsx/</url>
      
        <content type="html"><![CDATA[<h4 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h4><h5 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// cra 入口 index.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建并渲染React元素</span><span class="token keyword">const</span> title <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'你好呀 React'</span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* jsx写法 &amp; * 推荐使用jsx语法 &amp; * 写jsx就跟写html一样，更直观、友好 &amp; * jsx更能体现react声明式的特点(描述ui长什么样子) * */</span> <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>这是p标签<span class="token operator">&lt;</span>span<span class="token operator">></span>p里边的span<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="jsx注意事项"><a href="#jsx注意事项" class="headerlink" title="jsx注意事项"></a>jsx注意事项</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// jsx使用注意事项</span><span class="token comment" spellcheck="true">/** * React元素的属性名使用驼峰命名法 &amp; * 特殊属性名：class => className 、 for => htmlFor 、tabindex => tabIndex &amp; * 没有子节点的react元素可以用 /> 结束  单 &lt;span/> 也是可以的，但不要和html弄混了 &amp; * 推荐使用小括号()包裹jsx, 从而避免js中的自动插入分号陷进。 结构也更加清晰 * */</span><span class="token comment" spellcheck="true">/**  *  其他..... *  基于javascript个xml的扩展语法    他可以作为值使用    他并不是字符串    他也不是html 他可以配合js表达式一起使用， 他不可以和js的 语句一起使用(for,if 等…)    所有的标签名必须小写，必须闭合，哪怕是单标签    class写成className    style 接收的是一个对象{}，并不是字符串    最外层只能有一个容器，    差值表达式{}    代码注释 尽量使用快捷键 Ctrl + /    dangerouslySetInnerHTML={{__html:item}} 解析html标签，在input框中输入html标签可用    点击label标签激活文本框，不能直接使用for 使用htmlFor    参考资料： https://blog.csdn.net/weixin_46146313/article/details/107025994 */</span><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// 使用小括号里面也可以换行了</span>  <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"abc"</span><span class="token operator">></span>这是p标签<span class="token operator">&lt;</span>span<span class="token operator">></span>    p里边的span  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>span <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="jsx中使用javascript"><a href="#jsx中使用javascript" class="headerlink" title="jsx中使用javascript"></a>jsx中使用javascript</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// jsx中使用javascript表达式</span><span class="token comment" spellcheck="true">// jsx中使用javascript表达式的注意事项  </span><span class="token comment" spellcheck="true">/*  * * 单花括号中可以使用任意的JavaScript表达式 &amp; * JSX本身也是一个js表达式 &amp; * JSX中不能使用对象，但是在style属性中可以使用 &amp; * 不能在单花括号中直接使用 if/for 等语句 * */</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'牛恒'</span><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">'23'</span><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"abc"</span><span class="token operator">></span>这是p标签  <span class="token operator">&lt;</span>span<span class="token operator">></span>    p里边的span  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>span <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    名字叫：<span class="token punctuation">{</span>name<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    年龄是：<span class="token punctuation">{</span>age<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="jsx条件渲染"><a href="#jsx条件渲染" class="headerlink" title="jsx条件渲染"></a>jsx条件渲染</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> isLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true">// jsx条件渲染  场景 loading效果</span><span class="token comment" spellcheck="true">// if else</span><span class="token comment" spellcheck="true">// const renderIf = () => {</span><span class="token comment" spellcheck="true">//   if (isLoading) {</span><span class="token comment" spellcheck="true">//     return (</span><span class="token comment" spellcheck="true">//       &lt;div>loading...&lt;/div></span><span class="token comment" spellcheck="true">//     )</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">//   return (</span><span class="token comment" spellcheck="true">//     &lt;div>数据加载完成显示&lt;/div></span><span class="token comment" spellcheck="true">//   )</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// 三木运算符</span><span class="token comment" spellcheck="true">// const renderIf = () => {</span><span class="token comment" spellcheck="true">//   return (</span><span class="token comment" spellcheck="true">//     isLoading</span><span class="token comment" spellcheck="true">//       ? &lt;div>loading...&lt;/div></span><span class="token comment" spellcheck="true">//       : &lt;div>数据加载完成显示&lt;/div></span><span class="token comment" spellcheck="true">//   )</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// 条件与</span><span class="token keyword">const</span> renderIf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    isLoading    <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"if"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>条件渲染<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token function">renderIf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="jsx列表渲染"><a href="#jsx列表渲染" class="headerlink" title="jsx列表渲染"></a>jsx列表渲染</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> songs <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'南山南'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'King'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'mc'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 列表渲染</span><span class="token comment" spellcheck="true">/** * 如果要渲染一组数据，应该使用数组的map方法 &amp; * 注意： 渲染列表时应该添加key属性，key属性的值要保证唯一 &amp; * 原则： map遍历谁，就给谁添加key属性 &amp; * 注意:  尽量避免使用索引号作为key *  */</span><span class="token keyword">const</span> renderMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token punctuation">{</span>songs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"if"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>列表渲染<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token function">renderMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="jsx样式处理"><a href="#jsx样式处理" class="headerlink" title="jsx样式处理"></a>jsx样式处理</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * * jsx样式处理 &amp; * 第一种  style = {{color: red , background :skyblue}}  style 中的是一个对象 &amp; * 第二种  使用className 起类名  引入外部样式 *  */</span></code></pre><h5 id="jsx总结"><a href="#jsx总结" class="headerlink" title="jsx总结"></a>jsx总结</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * * jsx 总结 * 1.jsx是React 的核心内容 &amp; * 2.jsx表示在js代码中写html结构，是React声明式的体现 &amp; * 3.使用jsx配合嵌入的表达式 、条件渲染、 列表渲染，可以描述任意ui结构 &amp; * 4.推荐使用className的方式给jsx添加样式 &amp; * 5.React完全利用js语言自身的能力来编写ui，而不是造轮子增强html功能（例如v-if、 vi-show）。 * */</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> jsx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react基本使用</title>
      <link href="2021/11/02/react-ji-ben-shi-yong/"/>
      <url>2021/11/02/react-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="react基本使用"><a href="#react基本使用" class="headerlink" title="react基本使用"></a>react基本使用</h4><pre class=" language-html"><code class="language-html">// 新建文件夹 使用npm init// cnpm i react react-dom<span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>      // 引入react react-dom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./node_modules/react/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./node_modules/react-dom/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">/**   * 创建react元素   * 参数1 元素名称   * 参数2 元素属性   * 参数3 元素的子节点  */</span>  <span class="token keyword">const</span> title <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'你好 react'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/**   * 渲染dom元素   * 参数1 要渲染的react元素   * 参数2 挂载点  */</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// open in browser 到浏览器即可看到 你好 react</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./node_modules/react/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./node_modules/react-dom/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">/**   * 创建react元素   * 参数1 元素名称   * 参数2 元素属性   * 第三个及以后的参数：元素的子节点， 可写多个  */</span>  <span class="token keyword">const</span> title <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'p标签'</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token string">'p1'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'我是span'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'div'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/**   * 渲染dom元素   * 参数1 要渲染的react元素   * 参数2 挂载点  */</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 这里无法直接使用jsx，脚手架可以直接使用</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react基本使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react无状态组件和纯组件</title>
      <link href="2021/11/02/react-wu-zhuang-tai-zu-jian-he-chun-zu-jian/"/>
      <url>2021/11/02/react-wu-zhuang-tai-zu-jian-he-chun-zu-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="react无状态组件和纯组件"><a href="#react无状态组件和纯组件" class="headerlink" title="react无状态组件和纯组件"></a>react无状态组件和纯组件</h4><h5 id="无状态组件和有状态组件"><a href="#无状态组件和有状态组件" class="headerlink" title="无状态组件和有状态组件"></a>无状态组件和有状态组件</h5><pre class=" language-tex"><code class="language-tex">函数组件又叫  ***无状态组件， 类组件又叫有状态组件 状态 (state) 即数据函数组件没有自己的状态，只负责数据展示 (静)类组件又自己的状态，负责更新UI, 让页面 “动” 起来other: 数据发生了变化，就是状态发生了变化，UI也要相应的更新，就要使用有状态组件来完成。--------------------------------------------------------------------------------1 无状态组件无状态组件可以通过减少继承Component而来的生命周期函数而达到性能优化的效果。从本质上来说，无状态组件就是一个单纯的render函数，所以无状态组件的缺点也是显而易见的。因为它没有shouldComponentUpdate生命周期函数，所以每次state更新，它都会重新绘制render函数。原则上，只要一个组件只具有render函数时，都可以封装成无状态组件参考资料： https://blog.csdn.net/r122555/article/details/82783944</code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 视图中的无状态组件</span><span class="token keyword">const</span> Layout <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>headerWidth<span class="token punctuation">,</span> setHeaderWidth<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>    match<span class="token punctuation">,</span>    allData<span class="token punctuation">,</span>    location  <span class="token punctuation">}</span> <span class="token operator">=</span> props       <span class="token comment" spellcheck="true">//  ....</span>  <span class="token keyword">const</span> renderSec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token punctuation">(</span>secondChildren <span class="token operator">&amp;&amp;</span> pathname <span class="token operator">!==</span> <span class="token string">'/layout'</span><span class="token punctuation">)</span>        <span class="token operator">?</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div style<span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> textAlign<span class="token punctuation">:</span> <span class="token string">'center'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Spin</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>large<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token operator">></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'rigth-content'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'content-border'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RouterView</span> <span class="token attr-name">routes</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>secondChildren<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>        <span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'love'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>I love Mountain wind <span class="token punctuation">,</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>          Summer rain <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>          And your smile <span class="token punctuation">.</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ....</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'layout'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'layouTop'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'lay-top-left'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> headerWidth <span class="token operator">?</span> <span class="token number">80</span> <span class="token punctuation">:</span> <span class="token number">226</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>xiaoU<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'lay-top-right'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'breade-left'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'user-info'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'layouBottom'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span><span class="token function">renderNav</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token function">renderSec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="纯组件-PureComponernt"><a href="#纯组件-PureComponernt" class="headerlink" title="纯组件 PureComponernt"></a>纯组件 PureComponernt</h5><pre class=" language-jsx"><code class="language-jsx">自动的帮我们编写shouldComponentUpdate方法<span class="token punctuation">,</span> 避免我们为每个组件都编写一次的麻烦</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react无状态组件和纯组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数组件使用useRef</title>
      <link href="2021/11/01/han-shu-zu-jian-shi-yong-useref/"/>
      <url>2021/11/01/han-shu-zu-jian-shi-yong-useref/</url>
      
        <content type="html"><![CDATA[<ol><li><h4 id="函数组件使用useRef"><a href="#函数组件使用useRef" class="headerlink" title="函数组件使用useRef"></a>函数组件使用useRef</h4><pre class=" language-js"><code class="language-js">useRef一般用于子组件为<span class="token keyword">class</span>的组件，因为函数组件没有实例，因此加给函数组件是无效的，这时我们就需要借助其他一些方法。</code></pre><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 子组件</span><span class="token comment" spellcheck="true">// 引入 forwardRef, useImperativeHandle</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> forwardRef<span class="token punctuation">,</span> useImperativeHandle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> PopUp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">// react规定，必须使用useImperativeHandle方法，来保存并抛出想要传递给父组件的方法或者数据，</span>  <span class="token comment" spellcheck="true">// 第一个参数是ref,第二个参数是函数，返回想要抛出的对象集合</span>  <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    modalData<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token operator">...</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//必须通过forwardRef方法抛出函数组件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>Popup<span class="token punctuation">)</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  useRef<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> Menu <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token operator">...</span>    <span class="token keyword">const</span> Modalref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> openModal <span class="token operator">=</span> <span class="token punctuation">(</span>record<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'record, type'</span><span class="token punctuation">,</span> record<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若传递了数据，就是点击修改，其他情况为新增</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'edit'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 父组件事件函数中调起子组件的方法，将数据传递给子组件</span>          Modalref<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">modalData</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> type<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'add'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          Modalref<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">modalData</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">setShow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token operator">...</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Popup</span>            <span class="token attr-name">show</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>show<span class="token punctuation">}</span></span>            <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Modalref<span class="token punctuation">}</span></span>            <span class="token attr-name">treeTitle</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>treeList<span class="token punctuation">}</span></span>            <span class="token attr-name">closeModal</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>closeModal<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 函数组件使用useRef </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为数组所有对象添加一个新属性</title>
      <link href="2021/11/01/wei-shu-zu-suo-you-dui-xiang-tian-jia-yi-ge-xin-shu-xing/"/>
      <url>2021/11/01/wei-shu-zu-suo-you-dui-xiang-tian-jia-yi-ge-xin-shu-xing/</url>
      
        <content type="html"><![CDATA[<ol><li><h4 id="为数组所有对象添加一个新属性"><a href="#为数组所有对象添加一个新属性" class="headerlink" title="为数组所有对象添加一个新属性"></a>为数组所有对象添加一个新属性</h4></li></ol><pre class=" language-js"><code class="language-js">     <span class="token keyword">let</span> addKey <span class="token operator">=</span> copyList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>       obj<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span>id       <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>item<span class="token punctuation">,</span> <span class="token operator">...</span>obj <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ol start="2"><li><h4 id="合并两个数组索引所对应的对象"><a href="#合并两个数组索引所对应的对象" class="headerlink" title="合并两个数组索引所对应的对象"></a>合并两个数组索引所对应的对象</h4><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> youSay<span class="token punctuation">:</span> <span class="token string">'你说'</span><span class="token punctuation">,</span> <span class="token string">'doGO'</span><span class="token punctuation">:</span> <span class="token string">'go'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> youSay<span class="token punctuation">:</span> <span class="token string">'你说'</span><span class="token punctuation">,</span> <span class="token string">'doGO'</span><span class="token punctuation">:</span> <span class="token string">'go'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> youSay<span class="token punctuation">:</span> <span class="token string">'你说'</span><span class="token punctuation">,</span> <span class="token string">'doGO'</span><span class="token punctuation">:</span> <span class="token string">'go'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> what<span class="token punctuation">:</span> <span class="token string">'是的呀'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> how<span class="token punctuation">:</span> <span class="token string">'什么呢'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> why<span class="token punctuation">:</span> <span class="token string">'好的呀'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span>      <span class="token keyword">let</span> letMerge <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>item<span class="token punctuation">,</span> <span class="token operator">...</span>str<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'letMerge'</span><span class="token punctuation">,</span> letMerge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// log value</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>youSay<span class="token punctuation">:</span> <span class="token string">'你说'</span><span class="token punctuation">,</span> doGO<span class="token punctuation">:</span> <span class="token string">'go'</span><span class="token punctuation">,</span> what<span class="token punctuation">:</span> <span class="token string">'是的呀'</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>youSay<span class="token punctuation">:</span> <span class="token string">'你说'</span><span class="token punctuation">,</span> doGO<span class="token punctuation">:</span> <span class="token string">'go'</span><span class="token punctuation">,</span> how<span class="token punctuation">:</span> <span class="token string">'什么呢'</span><span class="token punctuation">}</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>youSay<span class="token punctuation">:</span> <span class="token string">'你说'</span><span class="token punctuation">,</span> doGO<span class="token punctuation">:</span> <span class="token string">'go'</span><span class="token punctuation">,</span> why<span class="token punctuation">:</span> <span class="token string">'好的呀'</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 为数组所有对象添加一个新属性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高阶组件之高亮关键词</title>
      <link href="2021/11/01/gao-jie-zu-jian-zhi-gao-liang-guan-jian-ci/"/>
      <url>2021/11/01/gao-jie-zu-jian-zhi-gao-liang-guan-jian-ci/</url>
      
        <content type="html"><![CDATA[<ol><li>高阶组件之高亮关键词</li></ol><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// KeywordHoc 高阶函数 (组件)</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> inp <span class="token operator">=</span> <span class="token string">"红包 返现 首充 权益"</span><span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">"参与活动，即有可能获得红包。首充还有机会获得更多权益哦!来一个红包吗？更有机会返现哦！"</span><span class="token comment" spellcheck="true">// 关键词高阶组件</span><span class="token keyword">const</span> KeywordHoc <span class="token operator">=</span> <span class="token punctuation">(</span>ComponentView<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> DisplayName <span class="token operator">=</span> <span class="token punctuation">(</span>ComponentName<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> ComponentName<span class="token punctuation">.</span>displayName <span class="token operator">||</span> ComponentName<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">'component'</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> KeyRender<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sliceKey <span class="token operator">=</span> inp<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> sliceKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 正则方法为什么能与字符串方法配合使用？</span>      <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>sliceKey<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'regex'</span><span class="token punctuation">,</span> regex<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      content <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`&lt;span class="light"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sliceKey<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        KeyRender<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hoc</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">DisplayName</span><span class="token punctuation">(</span>ComponentView<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token keyword">let</span> innerContent <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">dangerouslySetInnerHTML</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> __html<span class="token punctuation">:</span> content <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">// 组件首字母必须大写</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentView</span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>innerContent<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> KeyRender<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> KeywordHoc</code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// KeywodView 作为参数的组件</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">interface</span> <span class="token class-name">KeywodViewProps</span> <span class="token punctuation">{</span>  content<span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">const</span> KeywodView<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeywodViewProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  content<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>KeywodView<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>content<span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 效果 红包 返现 首充 权益   全部红色高亮</span><span class="token keyword">export</span> <span class="token keyword">default</span> KeywodView</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父级组件 引入高阶组件和参数组件并组合调用</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> KeywordHoc <span class="token keyword">from</span> <span class="token string">'package/component/KeywordHoc'</span><span class="token keyword">import</span> KeywodView <span class="token keyword">from</span> <span class="token string">'package/component/KeywodView'</span><span class="token keyword">const</span> Keyword <span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 调用高阶组件，似乎必须在高阶函数内部再定义一个组件，外层return 这个组件，并在这个组件内部，return被包装的组件？？</span>  <span class="token keyword">const</span> KeyTags <span class="token operator">=</span> <span class="token function">KeywordHoc</span><span class="token punctuation">(</span>KeywodView<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>keyword<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>KeyTags <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Keyword</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 高阶组件之高亮关键词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>forIN和forOf的区别</title>
      <link href="2021/10/31/forin-he-forof-de-qu-bie/"/>
      <url>2021/10/31/forin-he-forof-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h4 id="for-in和for-of的区别"><a href="#for-in和for-of的区别" class="headerlink" title="for in和for of的区别"></a>for in和for of的区别</h4><h5 id="循环对象"><a href="#循环对象" class="headerlink" title="循环对象"></a>循环对象</h5><pre class=" language-typescript"><code class="language-typescript"> <span class="token keyword">let</span> objKey <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'牛恒'</span><span class="token punctuation">,</span> age <span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">,</span> sex<span class="token punctuation">:</span><span class="token string">'男'</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// for in 专门用来循环对象 ，key是对象的键， obj[key]是对象的值</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">in</span> objKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'objKey ----- value'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// objKey ----- value name</span>    <span class="token comment" spellcheck="true">// index.tsx:30 objKey ----- value age</span>    <span class="token comment" spellcheck="true">// index.tsx:30 objKey ----- value sex</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ***for of 循环对象会报错</span>  <span class="token comment" spellcheck="true">// 只能循环数组或者字符串类型</span>  <span class="token comment" spellcheck="true">// react-dom.development.js:11340 Uncaught TypeError: objKey is not iterable</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value of objKey<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// error ； 类型“{ name: string; age: number; sex: string; }”不是数组类型或字符串类型。</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>   <span class="token punctuation">}</span>  </code></pre><h5 id="循环数组"><a href="#循环数组" class="headerlink" title="循环数组"></a>循环数组</h5><pre class=" language-typescript"><code class="language-typescript">    <span class="token keyword">let</span> sliceKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'红包'</span><span class="token punctuation">,</span> <span class="token string">'返现'</span><span class="token punctuation">,</span> <span class="token string">'首充'</span><span class="token punctuation">,</span> <span class="token string">'权益'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">/** for in 和 for of 都可循环数组    *  其中 for in 循环的是数组的键， 即下标    *  同对象键值对取值 obj[key]    */</span>     <span class="token comment" spellcheck="true">// for in 功能强大，可循环对象和数组，(即使取值也可obj[key]) ,完全可替代for of </span>    <span class="token comment" spellcheck="true">// for of 循环的是数组的值， 即键值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> sliceKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arrKey'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// index.tsx: 39 arrKey 0</span>      <span class="token comment" spellcheck="true">// index.tsx: 39 arrKey 1</span>      <span class="token comment" spellcheck="true">// index.tsx: 39 arrKey 2</span>      <span class="token comment" spellcheck="true">// index.tsx: 39 arrKey 3</span>     <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value of sliceKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ValueKey'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// index.tsx:47 ValueKey 红包</span>    <span class="token comment" spellcheck="true">// index.tsx:47 ValueKey 返现</span>    <span class="token comment" spellcheck="true">// index.tsx:47 ValueKey 首充</span>    <span class="token comment" spellcheck="true">// index.tsx:47 ValueKey 权益</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> for in和for of的区别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单算法</title>
      <link href="2021/10/28/jian-dan-suan-fa/"/>
      <url>2021/10/28/jian-dan-suan-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="简单算法"><a href="#简单算法" class="headerlink" title="简单算法"></a>简单算法</h4><h5 id="传入字符串，返回不重复字符串的最长长度"><a href="#传入字符串，返回不重复字符串的最长长度" class="headerlink" title="传入字符串，返回不重复字符串的最长长度"></a>传入字符串，返回不重复字符串的最长长度</h5><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">mostStringLen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newStr <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>      newStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>newStr <span class="token operator">+</span><span class="token operator">=</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> newStr<span class="token punctuation">.</span>length    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">'当前没有长度'</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不重复最长长度'</span><span class="token punctuation">,</span> <span class="token function">mostStringLen</span><span class="token punctuation">(</span><span class="token string">'abaaa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><h5 id="传入下标，返回斐波那契数列下标对应的一项"><a href="#传入下标，返回斐波那契数列下标对应的一项" class="headerlink" title="传入下标，返回斐波那契数列下标对应的一项"></a>传入下标，返回斐波那契数列下标对应的一项</h5><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">feibonace</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> index <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      z <span class="token operator">=</span> x <span class="token operator">+</span> y      x <span class="token operator">=</span> y      y <span class="token operator">=</span> z    <span class="token punctuation">}</span>    <span class="token keyword">return</span> z  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 下标是 9 , 长度就是10 ， 我们就要至少加 8次， 也就是下标再减一次 ，或下标的 &lt;= 2次</span>  <span class="token comment" spellcheck="true">// 0  1  2  3  4  5  6   7   8   9   10  11</span>  <span class="token comment" spellcheck="true">// 0  1  1  2  3  5  8  13  21  34  55  89</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'feibonace'</span><span class="token punctuation">,</span> <span class="token function">feibonace</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 34</span></code></pre><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'换位'</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 换位 (8) [1, 5, 7, 12, 33, 88, 89, 123]</span></code></pre><h5 id="传入数组和目标值，返回和为目标值的两项的下标"><a href="#传入数组和目标值，返回和为目标值的两项的下标" class="headerlink" title="传入数组和目标值，返回和为目标值的两项的下标"></a>传入数组和目标值，返回和为目标值的两项的下标</h5><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token number">13</span>  <span class="token comment" spellcheck="true">// 找出数组中和为目标值的整数</span>  <span class="token keyword">function</span> <span class="token function">findArrIndex</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>target <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>obj<span class="token punctuation">[</span>target <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>      <span class="token punctuation">}</span>      obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'findArrIndex(arr,13)'</span><span class="token punctuation">,</span> <span class="token function">findArrIndex</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h5><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 一段字符正着读和反着读都一样，就叫回文数</span>  <span class="token keyword">let</span> strNum <span class="token operator">=</span> <span class="token string">'abccba'</span> <span class="token comment" spellcheck="true">// 传入123321都可以</span>    <span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>strNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    num2 <span class="token operator">=</span> strNum<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strNum <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      num2 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>    <span class="token punctuation">}</span>          istrue <span class="token operator">=</span> strNum <span class="token operator">===</span> num2 <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token keyword">return</span> istrue  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">reverse</span><span class="token punctuation">(</span>strNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h5 id="数组去重reduce方法"><a href="#数组去重reduce方法" class="headerlink" title="数组去重reduce方法"></a>数组去重reduce方法</h5><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 数组去重</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    prev<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> prev<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>    <span class="token keyword">return</span> prev  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// reduce方法不会影响原数组</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// result (5) ['a', 'b', 'c', 'v', 'r']</span></code></pre><h5 id="字符串去重"><a href="#字符串去重" class="headerlink" title="字符串去重"></a>字符串去重</h5><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'ffweuhfiowefjopxkopscmaicnweiyfgygdidbasdjaonvwiebvuwigasndjasncjasbceuihuaed'</span>  <span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>str1 <span class="token operator">+</span><span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str1--->'</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// str1---> fweuhiojpxkscmanygdbv</span></code></pre><h5 id="reduce累加"><a href="#reduce累加" class="headerlink" title="reduce累加"></a>reduce累加</h5><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> numArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> addNum <span class="token operator">=</span> numArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span><span class="token operator">=</span> cur  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'addNum'</span><span class="token punctuation">,</span> addNum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 60</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 简单算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd优化加载组件</title>
      <link href="2021/10/25/antd-you-hua-jia-zai-zu-jian/"/>
      <url>2021/10/25/antd-you-hua-jia-zai-zu-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="antd优化加载组件"><a href="#antd优化加载组件" class="headerlink" title="antd优化加载组件"></a>antd优化加载组件</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/** 问题 react使用路由、二级路由切换时页面会闪烁  *  而使用这个组件，就可以解决这个问题*/</span>   <span class="token keyword">const</span> renderSec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      secondChildren        <span class="token operator">?</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div style<span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> textAlign<span class="token punctuation">:</span> <span class="token string">'center'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Spin</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>large<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token operator">></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RouterView</span> <span class="token attr-name">routes</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>secondChildren<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>        <span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Empty</span> <span class="token attr-name">image</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Empty<span class="token punctuation">.</span>PRESENTED_IMAGE_SIMPLE<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> antd优化加载组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reactTypescript配置代理服务器</title>
      <link href="2021/10/24/reacttypescript-pei-zhi-dai-li-fu-wu-qi/"/>
      <url>2021/10/24/reacttypescript-pei-zhi-dai-li-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h4 id="react-Typescript-配置代理服务器"><a href="#react-Typescript-配置代理服务器" class="headerlink" title="react + Typescript 配置代理服务器"></a>react + Typescript 配置代理服务器</h4><h5 id="package-json-后面添加"><a href="#package-json-后面添加" class="headerlink" title="package.json 后面添加"></a>package.json 后面添加</h5><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    ..    ...  <span class="token property">"proxy"</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">}</span></code></pre><p>另一说 src下新增 setupProxy.js</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 但似乎 package.json 配置后就已经可行 了</span><span class="token comment" spellcheck="true">// 但另一说此二者需要配合使用 ?? </span><span class="token comment" spellcheck="true">// 但又似乎加入此文件，项目就会出问题？？ </span><span class="token comment" spellcheck="true">// 目前放于最外层</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// @ts-ignore</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">'http://localhost:3000'</span><span class="token punctuation">,</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        secure<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h5><p><a href="https://create-react-app.dev/docs/proxying-api-requests-in-development/#configuring-the-proxy-manually">https://create-react-app.dev/docs/proxying-api-requests-in-development/#configuring-the-proxy-manually</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> reactTypescript配置代理服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript取下级值</title>
      <link href="2021/10/24/typescript-qu-xia-ji-zhi/"/>
      <url>2021/10/24/typescript-qu-xia-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="typescript取下级值"><a href="#typescript取下级值" class="headerlink" title="typescript取下级值"></a>typescript取下级值</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// type1 返回函数返回值的下级</span><span class="token comment" spellcheck="true">// 定义接口类型</span><span class="token keyword">interface</span> <span class="token class-name">resType</span> <span class="token punctuation">{</span>   data<span class="token operator">?</span><span class="token punctuation">:</span> Object<span class="token punctuation">}</span>  <span class="token keyword">export</span> <span class="token keyword">const</span> baseApi <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> method <span class="token operator">=</span> <span class="token string">'get'</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>      url<span class="token punctuation">:</span> path<span class="token punctuation">,</span>      method<span class="token punctuation">,</span>      timeout<span class="token punctuation">:</span> <span class="token number">120000</span><span class="token punctuation">,</span>      params<span class="token punctuation">,</span>      headers    <span class="token punctuation">}</span>    <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">(</span>option as optionsType<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      options<span class="token punctuation">.</span>params <span class="token operator">=</span> params    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'put'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      options<span class="token punctuation">.</span>data <span class="token operator">=</span> params    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span>headers<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span>headers<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span>    <span class="token punctuation">}</span>    <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span>options<span class="token punctuation">)</span><span class="token punctuation">.</span>headers <span class="token operator">=</span> headers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>          <span class="token function">axios</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">:</span> resType<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若不定义接口类型（注释data），此处 会报 ：类型“resType”上不存在属性“data”。</span>        <span class="token comment" spellcheck="true">// 导致程序运行不下去</span>        <span class="token function">reslove</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> promise<span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// type 2 取得变量的值</span><span class="token keyword">interface</span> <span class="token class-name">resLogin</span> <span class="token punctuation">{</span>  code<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  data<span class="token operator">?</span><span class="token punctuation">:</span> object<span class="token punctuation">}</span>   <span class="token keyword">const</span> Login<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>username<span class="token punctuation">,</span> setUsername<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>password<span class="token punctuation">,</span> setPassword<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> history <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> onFinish <span class="token operator">=</span> async <span class="token punctuation">(</span>values<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Success:'</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> values    <span class="token keyword">let</span> result <span class="token operator">=</span> await <span class="token function">userLogin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> as resLogin        <span class="token comment" spellcheck="true">// 若不定义 resLogin 接口 ，此处会报错</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/layout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     </code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// type 3 定义将要赋值的对象</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">interface</span> <span class="token class-name">resType</span> <span class="token punctuation">{</span>  data<span class="token operator">?</span><span class="token punctuation">:</span> Object<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">optionsType</span> <span class="token punctuation">{</span>  url<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  method<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span>  timeout<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  params<span class="token punctuation">:</span> object<span class="token punctuation">,</span>  data<span class="token operator">?</span><span class="token punctuation">:</span> object<span class="token punctuation">,</span>  headers<span class="token operator">?</span><span class="token punctuation">:</span> object<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> baseApi <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> method <span class="token operator">=</span> <span class="token string">'get'</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>      url<span class="token punctuation">:</span> path<span class="token punctuation">,</span>      method<span class="token punctuation">,</span>      timeout<span class="token punctuation">:</span> <span class="token number">120000</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 类型断言</span>    <span class="token keyword">let</span> options <span class="token operator">=</span> option as optionsType    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      options<span class="token punctuation">.</span>params <span class="token operator">=</span> params    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'put'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      options<span class="token punctuation">.</span>data <span class="token operator">=</span> params    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 函数参数传入， 尚且不知如何定义类型 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span>headers<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span>headers<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span>    <span class="token punctuation">}</span>    options<span class="token punctuation">.</span>headers <span class="token operator">=</span> headers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">axios</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">:</span> resType<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">reslove</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> promise<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 补充： promise 存放的将来发生的事情， 在调用此封装函数时 ， </span><span class="token comment" spellcheck="true">// 可使用 async  await 获得promise 成功 (reslove) 失败 (reject) 状态的值 。</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> typescript取下级值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react函数组件路由跳转</title>
      <link href="2021/10/24/react-han-shu-zu-jian-lu-you-tiao-zhuan/"/>
      <url>2021/10/24/react-han-shu-zu-jian-lu-you-tiao-zhuan/</url>
      
        <content type="html"><![CDATA[<h4 id="react函数组件路由跳转"><a href="#react函数组件路由跳转" class="headerlink" title="react函数组件路由跳转"></a>react函数组件路由跳转</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> cx <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">interface</span> <span class="token class-name">resLogin</span> <span class="token punctuation">{</span>  code<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">,</span>  data<span class="token operator">?</span><span class="token punctuation">:</span> object<span class="token punctuation">}</span><span class="token keyword">const</span> Login<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> history <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> onFinish <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>values<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> values    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">userLogin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> resLogin        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/layout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'loginCard'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token punctuation">{</span> <span class="token operator">...</span>  <span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Login</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react函数组件路由跳转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转化时间日期格式</title>
      <link href="2021/10/22/zhuan-hua-shi-jian-ri-qi-ge-shi/"/>
      <url>2021/10/22/zhuan-hua-shi-jian-ri-qi-ge-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="转化时间日期格式"><a href="#转化时间日期格式" class="headerlink" title="转化时间日期格式"></a>转化时间日期格式</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 转化时间日期格式 * 传入 new Date() * 返回值：2021-09-10 10:00:00 * */</span><span class="token keyword">export</span> <span class="token keyword">const</span> dateFamate <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> Y <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> M <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    M <span class="token operator">=</span> M <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> M <span class="token punctuation">:</span> M<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 不够两位补充0</span>    <span class="token keyword">let</span> D <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    D <span class="token operator">=</span> D <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> D <span class="token punctuation">:</span> D<span class="token punctuation">;</span>    <span class="token keyword">let</span> H <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    H <span class="token operator">=</span> H <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> H <span class="token punctuation">:</span> H<span class="token punctuation">;</span>    <span class="token keyword">let</span> Mi <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mi <span class="token operator">=</span> Mi <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> Mi <span class="token punctuation">:</span> Mi<span class="token punctuation">;</span>    <span class="token keyword">let</span> S <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    S <span class="token operator">=</span> S <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> S <span class="token punctuation">:</span> S<span class="token punctuation">;</span>    <span class="token keyword">return</span> Y <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> M <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> D <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> H <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> Mi <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> S<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 转化时间日期格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue路由传参</title>
      <link href="2021/10/22/vue-lu-you-chuan-can/"/>
      <url>2021/10/22/vue-lu-you-chuan-can/</url>
      
        <content type="html"><![CDATA[<h4 id="Vue路由传参"><a href="#Vue路由传参" class="headerlink" title="Vue路由传参"></a>Vue路由传参</h4><ol><li><p>查询字符串</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`path:/menu/edit/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 路由配置</span> <span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/menu/edit/:id'</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> Edit <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子组件使用获取使用的参数值</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id</code></pre></li><li><p>query</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/menu/edit'</span><span class="token punctuation">,</span>    query<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> id    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/menu/edit'</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> Edit <span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id</code></pre><ol start="3"><li>params</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'/menu/edit'</span><span class="token punctuation">,</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> id    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 注 ： params传参，必须加name。</span> <span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/menu/edit'</span><span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">'/menu/edit'</span>  component<span class="token punctuation">:</span> Edit <span class="token punctuation">}</span></code></pre><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><pre class=" language-js"><code class="language-js">查询字符串 与 query传参页面数据不会消失， 而params传参数据会消失。这是因为， 查询字符串 与 query传参 在传参时将参数携带过去了，而params的参数保存在缓存，因此页面刷新数据会消失。</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue路由传参 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js的event中间件</title>
      <link href="2021/10/17/node-js-de-event-zhong-jian-jian/"/>
      <url>2021/10/17/node-js-de-event-zhong-jian-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="1-node-js的event中间件"><a href="#1-node-js的event中间件" class="headerlink" title="1.node.js的event中间件"></a>1.node.js的event中间件</h4><h5 id="event-js"><a href="#event-js" class="headerlink" title="event.js"></a>event.js</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> eventEmitter <span class="token operator">=</span> events<span class="token punctuation">.</span>EventEmitter<span class="token punctuation">;</span><span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">eventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用event 的on方法绑定事件，内置两个参数，第一个参数是事件名，第二个参数 是回调函数，是事件的执行体</span>event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'I_LOVE_YOU'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'终于等到你'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 触发事件使用emit 内置参数若干</span><span class="token comment" spellcheck="true">// 第一个参数是事件的名字，第二个参数开始依次是事件的参数</span>event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'I_LOVE_YOU'</span><span class="token punctuation">,</span><span class="token string">'Mary'</span><span class="token punctuation">)</span>event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'I_LOVE_YOU'</span><span class="token punctuation">,</span><span class="token string">'Anny'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> node.js的event中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生node登录注册</title>
      <link href="2021/10/17/yuan-sheng-node-deng-lu-zhu-ce/"/>
      <url>2021/10/17/yuan-sheng-node-deng-lu-zhu-ce/</url>
      
        <content type="html"><![CDATA[<h4 id="1-node登录注册"><a href="#1-node登录注册" class="headerlink" title="1.node登录注册"></a>1.node登录注册</h4><h5 id="from-js"><a href="#from-js" class="headerlink" title="from.js"></a>from.js</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> query <span class="token punctuation">}</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">' pathname, query'</span><span class="token punctuation">,</span> pathname<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">'/register'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'Content-type'</span><span class="token punctuation">:</span> <span class="token string">'text/html;charset=utf-8'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> newUserData <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newUserData'</span><span class="token punctuation">,</span> newUserData<span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/form.json'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你不要出来'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> newDataList <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">let</span> hasRegister <span class="token operator">=</span> newDataList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span> ele<span class="token punctuation">.</span>username <span class="token operator">===</span> newUserData<span class="token punctuation">.</span>username<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasRegister<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("用户名已存在,请登录");location.href="http://127.0.0.1:3000/dl"&lt;/script>'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          newUserData<span class="token punctuation">.</span>id <span class="token operator">=</span> newDataList<span class="token punctuation">[</span>newDataList<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token number">1</span>          newDataList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newUserData<span class="token punctuation">)</span>          fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./data/form.json'</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>newDataList<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> encoding<span class="token punctuation">:</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> flag<span class="token punctuation">:</span> <span class="token string">'w'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            err              <span class="token operator">?</span> response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("注册失败");location.href="http://127.0.0.1:3000/zc"&lt;/script>'</span><span class="token punctuation">)</span>              <span class="token punctuation">:</span> response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("注册成功,请登录");location.href="http://127.0.0.1:3000/dl"&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'Content-type'</span><span class="token punctuation">:</span> <span class="token string">'text/html;charset=utf-8'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> usetData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      usetData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>usetData<span class="token punctuation">)</span>      <span class="token keyword">const</span> qsData <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/form.json'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> jsonData <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> jsonData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span> ele<span class="token punctuation">.</span>username <span class="token operator">===</span> qsData<span class="token punctuation">.</span>username<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>password <span class="token operator">===</span> qsData<span class="token punctuation">.</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("登录成功");location.href="http://127.0.0.1:3000/index"&lt;/script>'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("密码错误");location.href="http://127.0.0.1:3000/dl"&lt;/script>'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("用户名不存在,请先去注册！");location.href="http://127.0.0.1:3000/zc"&lt;/script>'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">'/zc'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./from/register.html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">'/dl'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./from/login.html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">'/index'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./from/index.html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'3000'</span><span class="token punctuation">,</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'serve is running'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="404-html"><a href="#404-html" class="headerlink" title="404.html"></a>404.html</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">*</span><span class="token punctuation">{</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">h1</span><span class="token punctuation">{</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#cccccc</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>哎呀亲  页面找不到了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">* </span><span class="token punctuation">{</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">div </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">p </span><span class="token punctuation">{</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">12</span>px <span class="token number">15</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>卡尔 · 弗兰兹<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    据说卡尔·弗兰兹是旧世界最伟大的政治家。同时他还是一位军事天才和英勇的将领。这位皇帝常独自带兵，挥舞着那把传说中西格玛留下的盖尔玛拉兹战锤，就如同旧世界的勇士之神一般重击着帝国的每个敌人。    卡尔·弗兰兹是上一任帝国皇帝路易伯德之子。在他父亲死后他顺理成章的成为了帝国皇帝候选人之一。然而在帝国皇位并不是世袭继承的，而是要通过帝国选帝议会的选举决定。    虽然确切的细节和准确的原因都已无人知晓，但是看上去卡尔·弗兰兹被认为太过于年轻且缺乏经验。他自己也并不相信自己能胜过另一位候选人，米登兰伯爵鲍里斯·托德布林格。最初的结果是鲍里斯8票，卡尔·弗兰兹仅获4票，剩下3名选帝侯弃权。然而卡尔·弗兰兹家族的老友，奥斯特兰伯爵马克西米连·冯·科宁格斯瓦德，成功的说服了其中2位转向投票给卡尔·弗兰兹。西格玛议会的3张选票也全部投给了卡尔·弗兰兹。最终卡尔·弗兰兹赢得了选举。    作为皇帝，卡尔同时也是帝国军队的领袖，指挥过一系列的战斗（其中最著名的是对阵巴托尼亚人的诺度因之战，对阵血堡吸血鬼的血堡之战和最近的混沌风暴）。在战斗中卡尔经常携带西格玛之锤和银色圣徽。他经常骑在自己忠实的狮鹫死爪上面。有时候卡尔·弗兰兹还会以瑞克领亲王的身份挥舞瑞克领符文剑进入战场。    卡尔·弗兰兹已婚并有2子女：他的大儿子路易伯德，显然是以卡尔·弗兰兹自己的父亲名字命名，而小女儿的名字未知。卡尔·弗兰兹还有个姐妹，也已婚配。    卡尔·弗兰兹有一系列的正式头衔，比如帝国的保护者，黑暗的对抗者，皇帝本尊和诸皇帝之子，瑞克领选帝侯和阿尔道夫亲王。    ==================================================================================================    诺度因之战是人类帝国和巴托尼亚之间的一场冲突。战斗爆发的确切时间已经无可考证，只能推算大概是在2502年之后的某个时间，因为这是帝国皇帝卡尔·弗兰兹带领帝国军队打的战斗。在战斗中卡尔·弗兰兹带领瑞克近卫骑士团以一次完美的冲锋彻底击垮了巴托尼亚骑士们。    ==================================================================================================    帝国继承法并不是世袭继承，新皇帝是选举产生而并非是直接从父亲手里继承。    在皇帝死后帝国议会聚集开会，选帝侯——整个帝国最有影响力，最强大，最重要的人——将在那时选出新皇帝。    选帝侯事实上也可以废黜一名虚君（虽然造成的后果多半是三皇之战这种结果）。    最初帝国有12位选帝侯，由各行省的统治者世袭继承。今日则有15位选举人，其中仅有10位是选帝侯。2个行省和他们的受尊敬的统治家族一起都已完蛋了。    尤里克教会主教渐渐的也成为了一名选举人，而最成功的例子是西格玛教会，除了西格玛教会的总主教本人外，还有另外2位西格玛大主教也成为了选举人，因此西格玛教会一共有3票。    这一发展加深了2个教会之间因为不同的政治追求而产生的天然对立，这一对立也成为了如今大部分皇帝选举中的重要因素。    在通常情况下西格玛教会的3票总是会投给住在阿尔道夫的瑞克领伯爵，因为阿尔道夫也是西格玛教会的中心。    而尤里克主教则总是会投票给米登兰伯爵，因为米登兰伯爵都是虔诚的尤里克信徒，同时也住在作为尤里克教会老家的米登海姆。    在帝国历1010年皇帝胖子卢德维格将一张选举票奖励给了穆特长者，他代表的是穆特半身人自治领的半身人们。    目前的10位选帝侯：阿瓦兰选帝伯爵，霍克兰选帝伯爵，米登兰选帝伯爵，诺德兰选帝伯爵，奥斯特兰选帝伯爵，奥斯特马克选帝伯爵，瑞克领选帝伯爵，斯特兰选帝伯爵，塔拉贝克领选帝伯爵，维森兰选帝伯爵。    5位新晋选帝侯：尤里克主教，西格玛总主教，2位西格玛大主教，穆特长者。    失去地位的选帝侯：    索尔兰选帝伯爵：在选帝伯爵家被兽人军阀入侵杀光后行省被维森兰吞并。    德拉克瓦尔德选帝伯爵：这个行省被米登兰和诺德兰瓜分。    玛丽恩堡选帝伯爵：这个行省现在变成了独立的威斯特兰亲王国。  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">* </span><span class="token punctuation">{</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#cccccc</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">30</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">30</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> div </span><span class="token punctuation">{</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> div input </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">22</span>px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">11</span>px<span class="token punctuation">;</span>            <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> div <span class="token id">#sub</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">380</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">78</span>, <span class="token number">123</span>, <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://127.0.0.1:3000/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名 ： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密 <span class="token entity" title="&nbsp;">&amp;nbsp;</span> 码 ： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="register-html"><a href="#register-html" class="headerlink" title="register.html"></a>register.html</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">* </span><span class="token punctuation">{</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#cccccc</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">30</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">30</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> div </span><span class="token punctuation">{</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> div input </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">22</span>px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">11</span>px<span class="token punctuation">;</span>            <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> div <span class="token id">#sub</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">380</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://127.0.0.1:3000/register<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名 ： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密 <span class="token entity" title="&nbsp;">&amp;nbsp;</span> 码 ： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><pre class=" language-tex"><code class="language-tex">1. nodemon 启动2. 在浏览器输入localhost:3000/zc</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> node登录注册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用node的http创建服务器读取网站</title>
      <link href="2021/10/17/shi-yong-node-de-http-chuang-jian-fu-wu-qi-du-qu-wang-zhan/"/>
      <url>2021/10/17/shi-yong-node-de-http-chuang-jian-fu-wu-qi-du-qu-wang-zhan/</url>
      
        <content type="html"><![CDATA[<ol><li><h4 id="使用node的http创建服务器读取网站"><a href="#使用node的http创建服务器读取网站" class="headerlink" title="使用node的http创建服务器读取网站"></a>使用node的http创建服务器读取网站</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token keyword">const</span> getMime <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'.html'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token string">'text/html'</span>   <span class="token comment" spellcheck="true">// html</span>    <span class="token keyword">case</span> <span class="token string">'.css'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token string">'text/css'</span>   <span class="token comment" spellcheck="true">// 样式文件</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token string">'text/plain'</span> <span class="token comment" spellcheck="true">// 图片文本</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 读取整个网站</span><span class="token comment" spellcheck="true">// 使用 热更新 nodemon， 必须 npm init 初始化http文件夹，生成package.json ，将main指向当前正在运行的文件</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> requestUrl <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname  <span class="token keyword">if</span> <span class="token punctuation">(</span>requestUrl <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    requestUrl <span class="token operator">=</span> <span class="token string">'/index.html'</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 图片css等会发起多次请求</span>  <span class="token comment" spellcheck="true">// 取出文件后缀名字 ！important</span>  <span class="token keyword">let</span> extname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>requestUrl<span class="token punctuation">)</span>  <span class="token keyword">let</span> mime <span class="token operator">=</span> <span class="token function">getMime</span><span class="token punctuation">(</span>extname<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// path.resolve(__dirname) 获取当前文件夹前的绝对路径</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../xiaou'</span><span class="token punctuation">)</span> <span class="token operator">+</span> requestUrl<span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'Content-type'</span><span class="token punctuation">:</span> mime <span class="token punctuation">}</span><span class="token punctuation">)</span>      response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'3000'</span><span class="token punctuation">,</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is running...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 使用node的http创建服务器读取网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd默认渲染节点为body的解决方法</title>
      <link href="2021/10/17/antd-mo-ren-xuan-ran-jie-dian-wei-body-de-jie-jue-fang-fa/"/>
      <url>2021/10/17/antd-mo-ren-xuan-ran-jie-dian-wei-body-de-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<ol><li><h4 id="antd默认渲染节点为body的解决方法"><a href="#antd默认渲染节点为body的解决方法" class="headerlink" title="antd默认渲染节点为body的解决方法"></a>antd默认渲染节点为body的解决方法</h4><pre class=" language-js"><code class="language-js">通常使用antd组件是没有什么问题的，但你在用datav时，可能会出现样式错乱的问题，这是因为antd有些组件 的默认渲染节点位于body，因此，需要使用getPopupContainer属性，改变默认渲染父节点，并配合相对、绝对定位，使子节点位于父节点附近。父标签可以是div也可以是其他标签 。</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> antd默认渲染节点为body的解决方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node中的path和url模块</title>
      <link href="2021/10/09/node-zhong-de-path-he-url-mo-kuai/"/>
      <url>2021/10/09/node-zhong-de-path-he-url-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h4 id="node中的path和url模块"><a href="#node中的path和url模块" class="headerlink" title="node中的path和url模块"></a>node中的path和url模块</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// path.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'https://www.baidu.com:443/xiagao/index.html?name=Eric&amp;age=18'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// url模块多使用parse方法，一般与path模块的extname 配合使用</span><span class="token comment" spellcheck="true">// basename 取出路径中最后一部分</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// index.html?name=Eric&amp;age=18</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结束符 ；</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// extname 取出访问路径的后缀名</span><span class="token comment" spellcheck="true">// extname并不智能，需要借助url</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'后缀名'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// .html?name=Eric&amp;age=18 ，只需要.html</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Url {  protocol: 'https:',  slashes: true,  auth: null,  host: 'www.baidu.com:443',  port: '443',  hostname: 'www.baidu.com',  hash: null,  search: '?name=Eric&amp;age=18',  query: 'name=Eric&amp;age=18',  pathname: '/xiagao/index.html',  path: '/xiagao/index.html?name=Eric&amp;age=18',  href: 'https://www.baidu.com:443/xiagao/index.html?name=Eric&amp;age=18'} */</span><span class="token comment" spellcheck="true">// 借助url</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// .html</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断是否是绝对路径</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'绝对'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// 只要以盘符开头的，它都是绝对路径，不管他存不存在</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">'C:/user/admin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// parse 格式化路径</span><span class="token comment" spellcheck="true">// 这就好比根下的各级文件</span><span class="token comment" spellcheck="true">/** * {  root: '', 根  dir: 'https://www.baidu.com:443/xiagao', 文件夹  base: 'index.html?name=Eric&amp;age=18',   下的  ext: '.html?name=Eric&amp;age=18',  ..  name: 'index'} */</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 连接相对路径join</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'a/b'</span><span class="token punctuation">,</span> <span class="token string">'c/d'</span><span class="token punctuation">,</span> <span class="token string">'d/f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a\b\c\d\d\f</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'a/b'</span><span class="token punctuation">,</span> <span class="token string">'./c/d'</span><span class="token punctuation">,</span> <span class="token string">'./d/f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a\b\c\d\d\f</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'a/b'</span><span class="token punctuation">,</span> <span class="token string">'../c/d'</span><span class="token punctuation">,</span> <span class="token string">'../e/f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a\c\e\f ??? 为什么</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'a/b'</span><span class="token punctuation">,</span> <span class="token string">'../c/d'</span><span class="token punctuation">,</span> <span class="token string">'../e/f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// D:\DrillNode\path\a\c\e\f 绝对路径</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// resolve 连接后直接就是绝对路径</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a/b'</span><span class="token punctuation">,</span> <span class="token string">'../c/d'</span><span class="token punctuation">,</span> <span class="token string">'../e/f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// D:\DrillNode\path\a\c\e\f</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> node中的path和url模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启用nodemon热更新</title>
      <link href="2021/10/09/qi-yong-nodemon-re-geng-xin/"/>
      <url>2021/10/09/qi-yong-nodemon-re-geng-xin/</url>
      
        <content type="html"><![CDATA[<h4 id="启用nodemon热更新"><a href="#启用nodemon热更新" class="headerlink" title="启用nodemon热更新"></a>启用nodemon热更新</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// npm init 初始化当前文件夹</span><span class="token comment" spellcheck="true">// npm install nodemon -g 全局安装nodemon </span><span class="token comment" spellcheck="true">// 修改文件夹下的   main 的指向， 使用哪个文件就指向哪个文件</span></code></pre><pre class=" language-json"><code class="language-json">// http/package.json<span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"server"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"from.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 启用nodemon热更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node写入文件的几种方式</title>
      <link href="2021/10/09/node-xie-ru-wen-jian-de-ji-chong-fang-shi/"/>
      <url>2021/10/09/node-xie-ru-wen-jian-de-ji-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="node写入文件的几种方式"><a href="#node写入文件的几种方式" class="headerlink" title="node写入文件的几种方式"></a>node写入文件的几种方式</h4><pre class=" language-tex"><code class="language-tex">R  ：  只读方式打开  W  ：  写入方式打开  覆盖写A  ：  写入方式打开  追加写</code></pre><h5 id="同步写入"><a href="#同步写入" class="headerlink" title="同步写入"></a>同步写入</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// sync.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 同步写入</span><span class="token comment" spellcheck="true">// 打开文件</span><span class="token keyword">const</span> fd <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">openSync</span><span class="token punctuation">(</span><span class="token string">'./json/sync.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 准备写入的数据</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'我爱你 塞北的雪\n'</span><span class="token comment" spellcheck="true">// 写入</span>fs<span class="token punctuation">.</span><span class="token function">writeSync</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 关闭资源</span>fs<span class="token punctuation">.</span><span class="token function">closeSync</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// node ... 便被写入sync.txt</span></code></pre><p>sync.txt （追加写）</p><pre class=" language-txt"><code class="language-txt">我爱你 塞北的雪我爱你 塞北的雪</code></pre><h5 id="异步写入"><a href="#异步写入" class="headerlink" title="异步写入"></a>异步写入</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// async.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 写入的资源</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'曾经沧海难为水，除却巫山不是云。复次花丛懒回顾，边缘修道半缘君。'</span>fs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'./json/async.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> fd<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写入文件</span>    fs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> str<span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      error <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入失败'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      error <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'关闭失败'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'关闭成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>async.txt （覆盖写）</p><pre class=" language-txt"><code class="language-txt">曾经沧海难为水，除却巫山不是云。复次花丛懒回顾，边缘修道半缘君。</code></pre><h5 id="简单写入"><a href="#简单写入" class="headerlink" title="简单写入"></a>简单写入</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// easy.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// * 读取json 和存入 json都一定要序列化和反序列化</span><span class="token keyword">const</span> bookObj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"book_name"</span><span class="token punctuation">:</span> <span class="token string">"我当阴阳先生的那几年"</span><span class="token punctuation">,</span>  <span class="token string">"book_price"</span><span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span>  <span class="token string">"book_page"</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">,</span>  <span class="token string">"book_author"</span><span class="token punctuation">:</span> <span class="token string">"崔走召"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 简单写入</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./json/1.json'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> newData <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    bookObj<span class="token punctuation">.</span>book_id <span class="token operator">=</span> newData<span class="token punctuation">[</span>newData<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>book_id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newData<span class="token punctuation">,</span> bookObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    newData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>bookObj<span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./json/1.json'</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>newData<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> encoding<span class="token punctuation">:</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> flag<span class="token punctuation">:</span> <span class="token string">'w'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      e <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'添加失败'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'添加成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>1.json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token property">"book_id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"book_name"</span><span class="token operator">:</span> <span class="token string">"我当道士那些年"</span><span class="token punctuation">,</span>    <span class="token property">"book_price"</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>    <span class="token property">"book_page"</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>    <span class="token property">"book_author"</span><span class="token operator">:</span> <span class="token string">"仐三"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token property">"book_name"</span><span class="token operator">:</span> <span class="token string">"我当阴阳先生的那几年"</span><span class="token punctuation">,</span>    <span class="token property">"book_price"</span><span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>    <span class="token property">"book_page"</span><span class="token operator">:</span> <span class="token number">700</span><span class="token punctuation">,</span>    <span class="token property">"book_author"</span><span class="token operator">:</span> <span class="token string">"崔走召"</span><span class="token punctuation">,</span>    <span class="token property">"book_id"</span><span class="token operator">:</span> <span class="token number">2</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h5 id="流式写入"><a href="#流式写入" class="headerlink" title="流式写入"></a>流式写入</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// strame.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 流式写入适合写入大批量的数据</span><span class="token comment" spellcheck="true">// 创建一个可写的流，流式操作一般都是使用a方式进行写入</span><span class="token keyword">let</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'./json/stream.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> flags<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token punctuation">:</span> <span class="token string">'utf-8'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'流已经打开'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'你好 世界\n'</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'流关闭了...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 结束操作</span>ws<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>strame.txt</p><pre class=" language-txt"><code class="language-txt">你好 世界你好 世界你好 世界你好 世界你好 世界</code></pre><h5 id="other"><a href="#other" class="headerlink" title="other"></a>other</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// dataOpera.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">,</span> fs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// readFileSync 写入的似乎是 buffer数据类型， 需要使用toString 方法转换</span><span class="token keyword">let</span> result <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./json/snow.text'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> node写入文件的几种方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode使用git命令行</title>
      <link href="2021/10/09/vscode-shi-yong-git-ming-ling-xing/"/>
      <url>2021/10/09/vscode-shi-yong-git-ming-ling-xing/</url>
      
        <content type="html"><![CDATA[<h4 id="vscode使用git命令行"><a href="#vscode使用git命令行" class="headerlink" title="vscode使用git命令行"></a>vscode使用git命令行</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 打开settings.json </span><span class="token comment" spellcheck="true">// 加入</span><span class="token string">"terminal.integrated.shell.windows"</span><span class="token punctuation">:</span> <span class="token string">"C:\\Program Files\\Git\\bin\\bash.exe"</span><span class="token punctuation">,</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vscode使用git命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object.assign深浅拷贝</title>
      <link href="2021/10/09/object-assign-shen-qian-kao-bei/"/>
      <url>2021/10/09/object-assign-shen-qian-kao-bei/</url>
      
        <content type="html"><![CDATA[<h4 id="Object-assign深浅拷贝"><a href="#Object-assign深浅拷贝" class="headerlink" title="Object.assign深浅拷贝"></a>Object.assign深浅拷贝</h4><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span>assign拷贝的 <span class="token operator">**</span><span class="token operator">*</span>属性值为简单类型时为深拷贝、拷贝的 <span class="token operator">**</span><span class="token operator">*</span>属性值为对象时，为浅拷贝。  <span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Eric'</span> <span class="token punctuation">}</span>  <span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>  <span class="token keyword">let</span> obj3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj3'</span><span class="token punctuation">,</span> obj3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// obj3 {name: 'Eric', list: Array(2)}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  obj3<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Lucy'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'push后'</span><span class="token punctuation">,</span> obj3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// list: (3) ['Rose', 'Jack', 'Lucy']</span>                              <span class="token comment" spellcheck="true">// name: "666"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'push后obj2变没变'</span><span class="token punctuation">,</span> obj2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// list: (3) ['Rose', 'Jack', 'Lucy'] 发现obj2也变了</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  obj3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'666'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'看第一个name改变后的obj3'</span><span class="token punctuation">,</span> obj3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name: "666"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'看第一个name改变后的obj1'</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name: "Eric" 简单数据类型没变！</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> obj4 <span class="token operator">=</span> <span class="token punctuation">{</span> one<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'牛恒'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">let</span> obj5 <span class="token operator">=</span> <span class="token punctuation">{</span> two<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'nnn'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">let</span> obj6 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj4<span class="token punctuation">,</span> obj5<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj6'</span><span class="token punctuation">,</span> obj6<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {one: {…}, two: {…}}</span>  obj6<span class="token punctuation">.</span>one<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'牛逼'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> obj6<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// one: {name: '牛逼'}</span>                              <span class="token comment" spellcheck="true">// two: {name: 'nnn'}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'看是否对obj4有影像'</span><span class="token punctuation">,</span> obj4<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// one: {name: '牛逼'}  发现obj6 改变， obj4也改变了</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Object.assign深浅拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac查看ip</title>
      <link href="2021/10/05/mac-cha-kan-ip/"/>
      <url>2021/10/05/mac-cha-kan-ip/</url>
      
        <content type="html"><![CDATA[<h4 id="在开发中，我们可能需要配置本地的ip、端口-而mac在每次关机后，会重新分配ip。"><a href="#在开发中，我们可能需要配置本地的ip、端口-而mac在每次关机后，会重新分配ip。" class="headerlink" title="在开发中，我们可能需要配置本地的ip、端口, 而mac在每次关机后，会重新分配ip。"></a>在开发中，我们可能需要配置本地的ip、端口, 而mac在每次关机后，会重新分配ip。</h4><p>这时我们就需要重新查看当前的ip了。</p><pre class=" language-js"><code class="language-js">ifconfig <span class="token operator">|</span> grep <span class="token string">"inet "</span> <span class="token operator">|</span> grep <span class="token operator">-</span>v <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span></code></pre><h4 id="mac更改时间日期"><a href="#mac更改时间日期" class="headerlink" title="mac更改时间日期"></a>mac更改时间日期</h4><pre class=" language-js"><code class="language-js">sudo date <span class="token number">0827102121</span>月日时分年最后的<span class="token number">21</span>是年</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> mac查看ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cra引入文件非全称</title>
      <link href="2021/09/29/cra-yin-ru-wen-jian-fei-quan-cheng/"/>
      <url>2021/09/29/cra-yin-ru-wen-jian-fei-quan-cheng/</url>
      
        <content type="html"><![CDATA[<ol><li><p>配置webpack.config.js</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 找到extensions</span> extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.mjs'</span><span class="token punctuation">,</span> <span class="token string">'.jsx'</span><span class="token punctuation">,</span> <span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.tsx'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 在前面加 .</span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> cra引入文件非全称 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cra中使用相对路径</title>
      <link href="2021/09/28/cra-zhong-shi-yong-xiang-dui-lu-jing/"/>
      <url>2021/09/28/cra-zhong-shi-yong-xiang-dui-lu-jing/</url>
      
        <content type="html"><![CDATA[<h4 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h4><p>tsconfig.json中加入如下配置</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"src"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="2-而后便可以相对于src路径引入"><a href="#2-而后便可以相对于src路径引入" class="headerlink" title="2.而后便可以相对于src路径引入"></a>2.而后便可以相对于src路径引入</h4><p>不再需要 ../../../繁琐模式</p><pre class=" language-tsx"><code class="language-tsx">import { modulList, commonKeyList, secondTable, list } from 'package/constant'</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> cra使用相对路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hoc高阶组件</title>
      <link href="2021/09/28/hoc-gao-jie-zu-jian/"/>
      <url>2021/09/28/hoc-gao-jie-zu-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><pre class=" language-tsx"><code class="language-tsx">高阶组件实际上是一个高阶函数，它接收一个组件作为参数，返回被包装的组件(这个传入的参数)，并携带一些参数。高阶组件内部往往会做一些逻辑处理，然后把这些处理后的逻辑数据传递出去。由此实现了组件逻辑的复用。传入的参数组件来写不同的外部组件样式，实现了组件样式的多样化，逻辑的复用。</code></pre><h4 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// WithCommonHoc 高阶组件</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> getDisplayName <span class="token operator">=</span> <span class="token punctuation">(</span>differentComponent<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> differentComponent<span class="token punctuation">.</span>displayName <span class="token operator">||</span> differentComponent<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">'component'</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">MouseProps</span> <span class="token punctuation">{</span>  status<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">const</span> WithCommonHoc <span class="token operator">=</span> <span class="token punctuation">(</span>WarppedComponend<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WarppedComponensssssssssssd'</span><span class="token punctuation">,</span> WarppedComponend<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'status'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> Mouse<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MouseProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'niuheng'</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>posX<span class="token punctuation">,</span> setPosX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">260</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>posY<span class="token punctuation">,</span> setPosY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// console.log('state',state)</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> handelMouseDown<span class="token punctuation">)</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>button <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> handelMouseMove<span class="token punctuation">)</span>          window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> handelMouseMove<span class="token punctuation">)</span>          window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> handelMouseMove<span class="token punctuation">)</span>        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> handelMouseDown<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> handelMouseMove <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setPosX</span><span class="token punctuation">(</span><span class="token punctuation">(</span>posX<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> posX <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token function">setPosY</span><span class="token punctuation">(</span><span class="token punctuation">(</span>posY<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> posY <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> handelMouseDown <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>button <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> handelMouseMove<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调用高阶组件时.创建出的组件名字一样，使用隐藏名字来区分</span>    <span class="token comment" spellcheck="true">// 这样调用后，分次调用的组件不会重名</span>    Mouse<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`WidthMouse</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getDisplayName</span><span class="token punctuation">(</span>WarppedComponend<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token comment" spellcheck="true">// 使用高阶组件，会出现props丢失的情况，因此建议在渲染被包装组建时，将state和props一起传递给被包装组件</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WarppedComponend</span> <span class="token attr-name">x</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>posX<span class="token punctuation">}</span></span> <span class="token attr-name">y</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>posY<span class="token punctuation">}</span></span> <span class="token attr-name">{...props}</span> <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Mouse<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> WithCommonHoc</code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 参数组件1 MouseMove</span><span class="token comment" spellcheck="true">// 参数组件可以定义样式</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">mouseProps</span> <span class="token punctuation">{</span>  x<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">,</span>  y<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">MouseMoveComponent</span> <span class="token punctuation">{</span>  prefer<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">const</span> MouseMove <span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mouseProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token punctuation">{</span>  x<span class="token punctuation">,</span>  y<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token function">当前鼠标位置：</span><span class="token punctuation">(</span>x <span class="token punctuation">:</span> <span class="token punctuation">{</span>x<span class="token punctuation">}</span> <span class="token punctuation">,</span> y <span class="token punctuation">:</span> <span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> MouseMove</code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 参数组件2  Kaer</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> imgList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../constant'</span><span class="token keyword">import</span> cx <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">interface</span> <span class="token class-name">KaerProps</span> <span class="token punctuation">{</span>  x<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">,</span>  y<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">,</span>  status<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">const</span> Kaer<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KaerProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  x<span class="token punctuation">,</span>  y<span class="token punctuation">,</span>  status<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'status'</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'打印定时器'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'先来后到'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>x <span class="token operator">&amp;&amp;</span> y <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'imgstyle'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>imgList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> left<span class="token punctuation">:</span> x<span class="token punctuation">,</span> top<span class="token punctuation">:</span> y <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Kaer</code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// Hoc 调用组件</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> MouseMove <span class="token keyword">from</span> <span class="token string">'../component/MouseMove/index'</span><span class="token keyword">import</span> WithCommonHoc <span class="token keyword">from</span> <span class="token string">'../component/WithCommonHoc/index'</span><span class="token keyword">import</span> Kaer <span class="token keyword">from</span> <span class="token string">"../component/Kaer"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Hoc<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>testStatus<span class="token punctuation">,</span> setTestStatus<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'niuheng'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> MousePosipotion <span class="token operator">=</span> <span class="token function">WithCommonHoc</span><span class="token punctuation">(</span>MouseMove<span class="token punctuation">)</span>  <span class="token keyword">const</span> MouseKaer <span class="token operator">=</span> <span class="token function">WithCommonHoc</span><span class="token punctuation">(</span>Kaer<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WithCommonHoc'</span><span class="token punctuation">,</span> WithCommonHoc<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MousePosipotion</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MouseKaer</span> <span class="token attr-name">status</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>testStatus<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">export</span> <span class="token keyword">default</span> Hoc</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 高阶组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-redux</title>
      <link href="2021/09/28/react-redux/"/>
      <url>2021/09/28/react-redux/</url>
      
        <content type="html"><![CDATA[<h4 id="1-为什么用redux"><a href="#1-为什么用redux" class="headerlink" title="1.为什么用redux"></a>1.为什么用redux</h4><pre class=" language-react"><code class="language-react">React中 ，组件的数据是单向流动的，即数据从一个方向(父组件)流向子组件(通过props)。因此，两个非父子组件的通信就相对麻烦，redux的出现就是state数据问题。数据存放于全局，便于统一的配置、管理和维护。</code></pre><h4 id="2-redux原理"><a href="#2-redux原理" class="headerlink" title="2.redux原理"></a>2.redux原理</h4><pre class=" language-react"><code class="language-react">触发action改变state。state的改变均通过action来改变。（ 为reducer函数传入 state 和 action，并得到新的NewState返回给store, store再把数据传回组 ）件。</code></pre><h4 id="3-redux三大原则"><a href="#3-redux三大原则" class="headerlink" title="3.redux三大原则"></a>3.redux三大原则</h4><pre class=" language-react"><code class="language-react">1. 单一的数据源   redux思想中，一个应用永远只有一个唯一的数据源。  待续..。2. 状态只读   state是只读的，唯一改变state的方法就是触发action。 待续...3. 数据改变只能通过纯函数来执行   在redux中，通过定义reducer来确定状态的修改，而每一个reducer都是纯函数，   这意味着它没有副作用，即接收一定的输入，一定会得到一定的输出。                                          待续...</code></pre><h4 id="4-代码"><a href="#4-代码" class="headerlink" title="4.代码"></a>4.代码</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// index.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token keyword">import</span> reduce <span class="token keyword">from</span> <span class="token string">'./reduce'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'reduce'</span><span class="token punctuation">,</span> reduce<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reduce<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// reducer.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token keyword">const</span> initdata<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> arr<span class="token punctuation">:</span> <span class="token punctuation">{</span>  item<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      item<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      item<span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token keyword">const</span> oneState <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> initdata<span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'init'</span><span class="token punctuation">:</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'初始化了吗'</span><span class="token punctuation">,</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">=</span> action      <span class="token keyword">return</span> data    <span class="token comment" spellcheck="true">// case 'add':</span>    <span class="token comment" spellcheck="true">//   return</span>    <span class="token comment" spellcheck="true">// case 'del':</span>    <span class="token comment" spellcheck="true">// return</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> secondState <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> arr<span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'first'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  oneState<span class="token punctuation">,</span>  secondState<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// actions.ts</span><span class="token keyword">const</span> initMethod <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'init'</span><span class="token punctuation">,</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> aggreGate <span class="token operator">=</span> <span class="token punctuation">{</span>  initMethod<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>  aggreGate<span class="token punctuation">}</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// testone</span><span class="token keyword">interface</span> <span class="token class-name">IndexProps</span> <span class="token punctuation">{</span>  changeState<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">,</span>  initMethod<span class="token operator">?</span><span class="token punctuation">:</span> any  <span class="token comment" spellcheck="true">// 这里应该是函数的</span><span class="token punctuation">}</span><span class="token keyword">const</span> Index<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IndexProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  changeState <span class="token punctuation">,</span>  initMethod<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 初始化redux中的状态数据</span>      initMethod <span class="token operator">&amp;&amp;</span> <span class="token function">initMethod</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 注意redux状态变化后的程序执行顺序</span><span class="token comment" spellcheck="true">// redux 状态改变 首先整个connect高价组件会先执行，然后被他包裹的组价重渲 按顺序逐行解析  父先子后</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'高阶组件的状态'</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      changeState<span class="token punctuation">:</span> state    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token operator">...</span>aggreGate  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Index<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 这个return 的对象的键值会绑定到被修饰组件的props上</span>  <span class="token comment" spellcheck="true">// 第二个参数 的所有方法也会绑定到被修饰组件的props上</span></code></pre><p>未完待续…</p>]]></content>
      
      
      
        <tags>
            
            <tag> react-redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组方法reduce</title>
      <link href="2021/09/24/shu-zu-fang-fa-reduce/"/>
      <url>2021/09/24/shu-zu-fang-fa-reduce/</url>
      
        <content type="html"><![CDATA[<pre class=" language-js"><code class="language-js">   arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token operator">...</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 其中，</span>  <span class="token comment" spellcheck="true">// prev 表示上一次调用回调时的返回值，或者初始值 init;</span>  <span class="token comment" spellcheck="true">// cur 表示当前正在处理的数组元素；</span>  <span class="token comment" spellcheck="true">// index 表示当前正在处理的数组元素的索引，若提供 init 值( [] )，则索引为0，否则索引为1；</span>  <span class="token comment" spellcheck="true">// arr 表示原数组；</span>         <span class="token comment" spellcheck="true">// init 表示初始值。可为[] ，也可以为 0 或其他初始值</span>         <span class="token comment" spellcheck="true">// 计算数组项之和</span>   <span class="token keyword">let</span> bigarr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigarr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 56</span>         <span class="token comment" spellcheck="true">// 求最大值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'max'</span><span class="token punctuation">,</span> bigarr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 9</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 数组去重</span>    <span class="token keyword">let</span> newArr <span class="token operator">=</span> bigarr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'prev'</span><span class="token punctuation">,</span> prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span>    prev<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> prev<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>    <span class="token keyword">return</span> prev  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// prev [] 1</span>  <span class="token comment" spellcheck="true">// style.html:78 prev [1] 3</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (2) [1, 3] 7</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (3) [1, 3, 7] 9</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (4) [1, 3, 7, 9] 8</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (5) [1, 3, 7, 9, 8] 7</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (5) [1, 3, 7, 9, 8] 6</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (6) [1, 3, 7, 9, 8, 6] 2</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (7) [1, 3, 7, 9, 8, 6, 2] 9</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (7) [1, 3, 7, 9, 8, 6, 2] 1</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (7) [1, 3, 7, 9, 8, 6, 2] 3 </span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> newArr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 3, 7, 9, 8, 6, 2]</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数组reduce方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6promise对象</title>
      <link href="2021/09/17/es6promise-dui-xiang/"/>
      <url>2021/09/17/es6promise-dui-xiang/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 将异步程序放入promise实例</span><span class="token comment" spellcheck="true">// promise.js</span><span class="token keyword">const</span> Ajaxs <span class="token operator">=</span> <span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ****</span>    <span class="token keyword">let</span> ajax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> data<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      ajax<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ajax<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ***</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise<span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./promise.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 接收一个promise对象</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">Ajaxs</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'./3.json'</span><span class="token punctuation">,</span> <span class="token string">'666'</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result for 24 line'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// result for 24 line Promise {&lt;pending>}</span>  <span class="token comment" spellcheck="true">// 没有then和then之后的都是promise对象</span>  <span class="token keyword">let</span> type1 <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'res'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正常输出</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// .then 之后</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'type1'</span><span class="token punctuation">,</span> type1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// type1 Promise {&lt;pending>} </span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react引入antd</title>
      <link href="2021/09/17/react-yin-ru-antd/"/>
      <url>2021/09/17/react-yin-ru-antd/</url>
      
        <content type="html"><![CDATA[<pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 安装</span>npm install antd <span class="token operator">--</span>save<span class="token comment" spellcheck="true">// 入口文件引入样式文件(注意，必须引入，否则样式无效果) </span><span class="token comment" spellcheck="true">// src/index.ts || src/index.js</span><span class="token keyword">import</span> <span class="token string">'antd/dist/antd.css'</span>  <span class="token comment" spellcheck="true">// 必须引入antd样式文件</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react引入antd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建react脚手架</title>
      <link href="2021/09/17/chuang-jian-react-jiao-shou-jia/"/>
      <url>2021/09/17/chuang-jian-react-jiao-shou-jia/</url>
      
        <content type="html"><![CDATA[<pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// cra 创建react 脚手架 (javascript)</span>npx create<span class="token operator">-</span>react<span class="token operator">-</span>app myapp<span class="token comment" spellcheck="true">// cra 创建手脚架 (typescript)</span>npx create<span class="token operator">-</span>react<span class="token operator">-</span>app antd<span class="token operator">-</span>demo<span class="token operator">-</span>ts <span class="token operator">--</span>template typescript</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 创建react脚手架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生轮播图</title>
      <link href="2021/09/13/yuan-sheng-lun-bo-tu/"/>
      <url>2021/09/13/yuan-sheng-lun-bo-tu/</url>
      
        <content type="html"><![CDATA[<h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><pre class=" language-css"><code class="language-css">    <span class="token selector">* </span><span class="token punctuation">{</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.you</span> </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1920</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.you</span> ul </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">11520</span><span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.you</span> ul li </span><span class="token punctuation">{</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">img </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1920</span>px<span class="token punctuation">;</span>            <span class="token property">visibility</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>you<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--> 先画出静态样式，让 ul 中的 li 浮动，给ul外的父盒子给宽度,再把li注释掉，后面动态添加--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ou<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- &lt;li>                &lt;img src="./img/banner-2.jpg" alt="">            &lt;/li>            &lt;li>                &lt;img src="./img/banner-3.jpg" alt="">            &lt;/li>            &lt;li>                &lt;img src="./img/banner-4.jpg" alt="">            &lt;/li>            &lt;li>                &lt;img src="./img/banner-5.jpg" alt="">            &lt;/li>            &lt;li>                &lt;img src="./img/banner-6.jpg" alt="">            &lt;/li> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//**&lt;script src="./utils.js">&lt;/script></span>    <span class="token comment" spellcheck="true">// &lt;script></span>            <span class="token keyword">let</span> youWrap <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'you'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">var</span> oul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'ou'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        U<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'./banner.json'</span><span class="token punctuation">,</span> <span class="token string">'name=李四'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 取出you图</span>            <span class="token keyword">let</span> you <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>you            <span class="token comment" spellcheck="true">// 给ul设宽</span>            <span class="token keyword">let</span> youwidth <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">getStyle</span><span class="token punctuation">(</span>youWrap<span class="token punctuation">,</span> <span class="token string">'width'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// console.log(youwidth)</span>             <span class="token comment" spellcheck="true">// oul的宽度多加一项</span>            <span class="token keyword">let</span> oulWidth <span class="token operator">=</span> youwidth <span class="token operator">*</span> <span class="token punctuation">(</span>you<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            oul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> oulWidth <span class="token operator">+</span> <span class="token string">'px'</span>            <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> you<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                str <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;li>&lt;img src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>you<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" alt="">&lt;/li>`</span></span>            <span class="token punctuation">}</span>            oul<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> str            <span class="token keyword">let</span> oli <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">let</span> firstLi <span class="token operator">=</span> oli<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 将第一项克隆追加到oul最后面</span>            oul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>firstLi<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 获取一个li的宽度</span>            <span class="token keyword">let</span> oliWidth <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">getStyle</span><span class="token punctuation">(</span>oli<span class="token punctuation">,</span> <span class="token string">'width'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">0</span>            <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                n<span class="token operator">++</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> you<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    n <span class="token operator">=</span> <span class="token number">0</span>                <span class="token punctuation">}</span>                U<span class="token punctuation">.</span><span class="token function">buffermove</span><span class="token punctuation">(</span>oul<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'left'</span><span class="token punctuation">:</span> <span class="token operator">-</span>n <span class="token operator">*</span> oliWidth <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="utils-js"><a href="#utils-js" class="headerlink" title="utils.js"></a>utils.js</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> U <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*  getStyle获取非行间样式   * param  obj  元素  (object)   * param  attr 属性  (string)   */</span>  <span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>getComputedStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//如果window存在getComputedStyle 就为真</span>      <span class="token keyword">return</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">[</span>attr<span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//IE</span>      <span class="token keyword">return</span> obj<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>attr<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*    *buffermove(obj,json,callback) 多属性同时运动   * params obj {object} 元素  必须是绝对定位的   * params json {'width':500}}     * params  callback {Function}} 可选    */</span>  <span class="token keyword">function</span> <span class="token function">buffermove</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//(obj,target,attr)  callback 形参</span>    <span class="token comment" spellcheck="true">// 频繁触发定时器时也要进行清除定时器</span>    <span class="token comment" spellcheck="true">// console.log('obj,json', obj, json, ' obj.timer', obj.timer);</span>    <span class="token comment" spellcheck="true">// 注意自定义属性</span>    <span class="token comment" spellcheck="true">// 直接定义的自定义属性 不论元素还是函数，都是undefined</span>    <span class="token comment" spellcheck="true">// 为什么要加入一个自定义属性？</span>    <span class="token comment" spellcheck="true">// 封装之后，如果外部调用此函数，还必须定义一个为null的timer，加入自定义属性后，外部不再需要传入timer</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span>    obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 转为number</span>        <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> speed <span class="token operator">=</span> <span class="token punctuation">(</span>json<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-</span> current<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span>         speed <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span> <span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> json<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        obj<span class="token punctuation">.</span>style<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> current <span class="token operator">+</span> speed <span class="token operator">+</span> <span class="token string">'px'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1、创建ajax 对象</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果data有参数</span>        <span class="token comment" spellcheck="true">// 2、建立连接</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> data<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//post</span>      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 设置请求头</span>      xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果data有参数</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4、注册监听事件</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//服务器响应完毕 并且 数据请求成功</span>        <span class="token comment" spellcheck="true">// 调用回调函数</span>        <span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 对象属性名和属性值相同的情况下可以省略属性名</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    getStyle<span class="token punctuation">,</span>    buffermove<span class="token punctuation">,</span>    ajax  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span></code></pre><h4 id="banner-json"><a href="#banner-json" class="headerlink" title="banner.json"></a>banner.json</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"you"</span><span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token string">"./img/banner-2.jpg"</span><span class="token punctuation">,</span>    <span class="token string">"./img/banner-3.jpg"</span><span class="token punctuation">,</span>    <span class="token string">"./img/banner-4.jpg"</span><span class="token punctuation">,</span>    <span class="token string">"./img/banner-5.jpg"</span><span class="token punctuation">,</span>    <span class="token string">"./img/banner-6.jpg"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 原生轮播图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化</title>
      <link href="2021/09/13/qian-duan-xing-neng-you-hua/"/>
      <url>2021/09/13/qian-duan-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 为避免一个函数的执行频率过高， 使用防抖。</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//进入该分支语句，说明当前正在一个计时过程中，并且又触发了相同事件。所以要取消当前的计时，重新开始计时</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自定义属性，外部不用再定义一个timer传进来 (timer初始为undefined)</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>timer<span class="token punctuation">)</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 其他情况，说明当前并没有在计时，那么就开始一个计时</span>        fn<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 一种类似控制阀门一样定期开放的函数，也就是让函数执行一次后，在某个时间段内暂时失效，过了这段时间后再重新激活（类似于技能冷却时间） </span><span class="token comment" spellcheck="true">// 取自思否</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> valid <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>valid<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//休息时间 暂不接客</span>           <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span>        valid <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            valid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="视频流"><a href="#视频流" class="headerlink" title="视频流"></a>视频流</h4><pre class=" language-tex"><code class="language-tex">有时组件内部会嵌套视频，而在组件将要卸载时，必须断掉这些视频流，不断掉视频流不会自动停止，会对性能产生严重影响！有些场景，需要在组件卸载前，将定时器也清除掉。</code></pre><h4 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h4><pre class=" language-tex"><code class="language-tex">游戏开发一般对性能、内存有严格要求。 拿移动端举例， 有的游戏从始至终只会请求一次接口，任何页面数据变化 ，全部由前端计算并更新页面数据。 也就是说在点某个具体的按钮时，数据发生变化，会传一个流程Id给后端，后端根据这个流程Id 更新数据库数据，而前端展示数据由前端更新。（注意：这里只是传了流程Id给后端，并没有重新请求接口渲染页面！），但在下次重新请求数据时，使用数据库数据！**前端更新数据，子组件将需要更新的数据传回父组件，由父组件完成更新再传递给子组件。</code></pre><h4 id="尽量少调接口"><a href="#尽量少调接口" class="headerlink" title="尽量少调接口"></a>尽量少调接口</h4><pre class=" language-tex"><code class="language-tex">若非必要情况，尽量少调用接口。 接口的调用一定意义上会消耗性能，因此，减少非必要接口的调用，移动端游戏开发正是这种思想。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件命令行操作</title>
      <link href="2021/09/12/wen-jian-ming-ling-xing-cao-zuo/"/>
      <url>2021/09/12/wen-jian-ming-ling-xing-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><pre class=" language-js"><code class="language-js">cd 文件名  <span class="token comment" spellcheck="true">// 切到下级目录</span>cd <span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment" spellcheck="true">// 返回上一级</span>mkdir 文件夹名 <span class="token comment" spellcheck="true">// 创建文件夹</span>rmdir 文件夹名 <span class="token comment" spellcheck="true">// 删除文件夹 ，必须是空文件夹</span>rmdir 文件夹名 <span class="token operator">/</span>s <span class="token comment" spellcheck="true">// 强制删除， 加/q 静默删除</span>dir<span class="token punctuation">.</span><span class="token operator">></span> 文件名 <span class="token comment" spellcheck="true">// 创建文件， 例如dir.> 1.html 、dir.> 8.json 、6.js</span><span class="token keyword">delete</span> 文件名 <span class="token comment" spellcheck="true">// 删除文件</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 文件命令行操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装ajax</title>
      <link href="2021/09/10/feng-zhuang-ajax/"/>
      <url>2021/09/10/feng-zhuang-ajax/</url>
      
        <content type="html"><![CDATA[<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// http.js</span><span class="token keyword">const</span> Ajaxs <span class="token operator">=</span> <span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> ajax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> data<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    ajax<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  ajax<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> ajax<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">success</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./http.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token comment" spellcheck="true">/*   左侧为同步，右侧为异步，同步先执行，log s  为udefined  *   解决此问题只需再多传一个回调，在回调里log,此时就不是同步了  */</span>   <span class="token comment" spellcheck="true">//  let s = Ajaxs('post', './3.json', '继而')</span> <span class="token comment" spellcheck="true">//  console.log('s',s); // s undefined</span>  <span class="token function">Ajaxs</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'./3.json'</span><span class="token punctuation">,</span> <span class="token string">'666'</span><span class="token punctuation">,</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'res---->'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// {</span>      <span class="token comment" spellcheck="true">//  "name":"Eric",</span>      <span class="token comment" spellcheck="true">//  "hobby":"read"</span>      <span class="token comment" spellcheck="true">//  }</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>3.json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Eric"</span><span class="token punctuation">,</span>  <span class="token property">"hobby"</span><span class="token operator">:</span><span class="token string">"read"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 封装ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript</title>
      <link href="2021/09/06/typescript/"/>
      <url>2021/09/06/typescript/</url>
      
        <content type="html"><![CDATA[<h4 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 在安装了一些插件后，建议在 ***src目录下新建  *.d.ts文件声明引入的插件，否则会报错!</span> <span class="token comment" spellcheck="true">// 例如在入口index.ts 引入了 morgan</span> <span class="token keyword">import</span> morgan <span class="token keyword">from</span> <span class="token string">'morgan'</span>    <span class="token comment" spellcheck="true">// 安装了依然报错</span>Could not find a declaration file <span class="token keyword">for</span> <span class="token keyword">module</span> <span class="token string">'morgan'</span><span class="token punctuation">.</span> <span class="token string">'D:/React/antd-demo-ts/node_modules/_morgan@1.10.0@morgan/index.js'</span> implicitly has an <span class="token string">'any'</span> type<span class="token punctuation">.</span>  Try <span class="token template-string"><span class="token string">`npm i --save-dev @types/morgan`</span></span> <span class="token keyword">if</span> it exists or add a <span class="token keyword">new</span> <span class="token class-name">declaration</span> <span class="token punctuation">(</span><span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts<span class="token punctuation">)</span> file containing <span class="token template-string"><span class="token string">`declare module 'morgan';`</span></span>  </code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// src/declaration.d.ts</span><span class="token comment" spellcheck="true">// 添加如下声明 ，报错消失</span><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'morgan'</span><span class="token punctuation">;</span></code></pre><h4 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/* 与javascript相比 ，typescript 增加了类型， 使javascript变得强类型了。typescript 声明的变量 、函数和参数， 甚至外部的props，都可以定义变量的类型。虽然javascript非常灵活，使用起来很自由，但是这种自由会在项目变得很大时称为一种隐患，例如因为你可以随意的将一个number类型的变量变为其他类型，如果出错可能将是很难排查的。与javascript 相比， typescript定义类型的好处是 ： 在大型项目中更易于维护，且在编码阶段就能发现错误。*/</span><span class="token comment" spellcheck="true">// 定义变量</span><span class="token keyword">let</span> num <span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> str <span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'卡尔'</span><span class="token keyword">let</span> bool <span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token comment" spellcheck="true">// 定义字符串数组</span><span class="token keyword">export</span> <span class="token keyword">const</span> test<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'可领取'</span><span class="token punctuation">,</span> <span class="token string">'已领取'</span><span class="token punctuation">,</span> <span class="token string">'未领取'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 定义函数参数和返回值</span><span class="token keyword">const</span> dataMethod <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b <span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span>a <span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> b <span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义外部props</span> <span class="token comment" spellcheck="true">// index.tsx</span><span class="token keyword">interface</span> <span class="token class-name">SignProps</span> <span class="token punctuation">{</span>  status<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  signState<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>object<span class="token operator">></span><span class="token punctuation">,</span>  signUpdateMethod<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> SignPage<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token operator">&lt;</span>SignProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  status<span class="token punctuation">,</span>  signState<span class="token punctuation">,</span>  signUpdateMethod<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 泛型</span>  泛型指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。  未完待续<span class="token operator">...</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2021/09/06/zheng-ze-biao-da-shi/"/>
      <url>2021/09/06/zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><pre class=" language-js"><code class="language-js"> <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'regex'</span><span class="token punctuation">,</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token regex">/(?:)/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'ig'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 正则实例对象， 第一个参数为检索的字符， 第二个参数是修饰符, 注意修饰符必须加''（不加为变量） ； *  i 为不区分大小写， g为全局匹配(匹配多个而不是只匹配第一个)  */</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hello people hello world hello country hello army'</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 你好 people 你好 world 你好 country 你好 aramy</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">// 正则字面量</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/youSay/ig</span><span class="token comment" spellcheck="true">// 正则字面量的修饰符位于最后面，i和g不分先后次序</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'youSay 天这么蓝 yousay 空气这么清新 YouSay 你真的好开心'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">'你说'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 你说 天这么蓝 你说 空气这么清新 你说 你真的好开心</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">/* test  * 检索字符串中是否包含正则规定的内容，包含返回true，不包含返回false */</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'五杀超神'</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span>  <span class="token regex">/五杀/</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">// exec</span>  <span class="token keyword">let</span> str <span class="token operator">=</span>  <span class="token string">'uiuiuiui'</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span>  <span class="token regex">/u/</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回一个数组， 似乎不能全局匹配，只会返回第一个</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">// 字符串和正则匹配 配合使用</span>  <span class="token comment" spellcheck="true">// 替换</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'急急复急急，木兰当户织'</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/急急/g</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">'唧唧'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// match</span>  <span class="token comment" spellcheck="true">// 返回匹配的字符，组成一个新数组</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/急/g</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//  ["急", "急", "急", "急"]</span>  <span class="token comment" spellcheck="true">// split </span>  <span class="token comment" spellcheck="true">// 返回分隔后的数组</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/复/</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["急急", "急急，木兰当户织"]</span>  <span class="token comment" spellcheck="true">// serch</span>  <span class="token comment" spellcheck="true">// 返回正则匹配到的第一个字符的下标</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/复/</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 元字符  * . 表示除换行符外的任意字符 ( \n为换行符 )  * \ 表示转义字符  */</span>    <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/./</span>   <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'\n123'</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>      <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'1215204550@qq.com'</span>   <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\.c/</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>   <span class="token comment" spellcheck="true">// []匹配字符集中的任意字符</span>   <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/[0-9]/</span>   <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abc'</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>      <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/[0-9a-z]/</span>   <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'123zzz'</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>   </code></pre><pre class=" language-js"><code class="language-js">   <span class="token comment" spellcheck="true">// 密码</span>   <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/[0-9][0-9][0-9][0-9][0-9][0-9]/</span>   <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'23456'</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  </code></pre><pre class=" language-js"><code class="language-js">   <span class="token comment" spellcheck="true">// ^ 以什么开头</span>   <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/^[a-z]/</span>   <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'123acc'</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>   <span class="token comment" spellcheck="true">// $ 以什么结尾</span>   <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/m$/</span>   <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'1215204550@qq.com'</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span> </code></pre><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// \d 匹配数字</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\d\d\d/</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'123'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  <span class="token comment" spellcheck="true">// \D 匹配非数字 (字母 + 字符)</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\D\D\D/</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'A._'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// \w 匹配字母、数字，下划线</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\w\w\w\w\w\w/</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'qq_com'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  <span class="token comment" spellcheck="true">// \W 匹配非数字、字母，下划线</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\W\W\W/</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'@ -'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>   <span class="token comment" spellcheck="true">// 匹配空白字符(空格)</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\W\s\W/</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// \b 匹配单词边界</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\b/g</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hello for world'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 你好hello你好 你好for你好 你好world你好</span>    <span class="token comment" spellcheck="true">// \B 匹配非单词边界</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\B/g</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hello for world'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// h你好e你好l你好l你好o f你好o你好r w你好o你好r你好l你好d</span></code></pre><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 正则量词</span>  <span class="token comment" spellcheck="true">// ? 匹配0个或1个</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/4?/</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'123'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  <span class="token comment" spellcheck="true">// * 匹配0个或多个</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/a*/</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'aaaBaaaaaa'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["aaa", index: 0, input: "aaaBaaaaaa", groups: undefined]</span>  <span class="token comment" spellcheck="true">// + 匹配1个或多个</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\d+/</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'4567aaaaaaaaaaaaaa'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// helloaaaaaaaaaaaaaa</span>  <span class="token comment" spellcheck="true">// {6} 六位  {2, 6} 最少两位， 最多六位</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\d{11}/</span>  <span class="token keyword">let</span> phone <span class="token operator">=</span> <span class="token string">'17393845392'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  </code></pre><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 其他</span>  <span class="token comment" spellcheck="true">// | 或</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/^http:\/\/www\.\w+(.com|.cn|.gov|.net)/</span>  <span class="token keyword">let</span> net <span class="token operator">=</span> <span class="token string">'http://www.baidu.net'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>    <span class="token comment" spellcheck="true">// ()分组</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/(\d{3})(\d{4})(\d{4})/</span>  <span class="token keyword">let</span> ipone <span class="token operator">=</span> <span class="token string">'17393845392'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ipone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 173</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 9384</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5392</span>  <span class="token comment" spellcheck="true">// 替换</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ipone<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">'$1****$3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 173****5392</span>    <span class="token comment" spellcheck="true">// 邮箱正则</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\d+(@qq.com|@163.com)/</span>  <span class="token keyword">let</span> mail <span class="token operator">=</span> <span class="token string">'1215204550@163.com'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>mail<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// $1 是分组，有几个分组，就有几个$几</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// @163.com</span>    <span class="token comment" spellcheck="true">// 密码六位</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\d{6}/</span>  <span class="token comment" spellcheck="true">// 手机号</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/^1[3, 5, 7 ,8 , 9]\d{9}/</span>  <span class="token comment" spellcheck="true">/*   * qq密码，必须有字母数字   *  ***这样有一个缺点，就是字母必须在前！***   */</span>     <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/[a-z]{2,6}[0-9]{6,10}/</span>  <span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token string">'wa124567'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件循环机制-宏任务微任务</title>
      <link href="2021/08/01/shi-jian-xun-huan-ji-zhi-hong-ren-wu-wei-ren-wu/"/>
      <url>2021/08/01/shi-jian-xun-huan-ji-zhi-hong-ren-wu-wei-ren-wu/</url>
      
        <content type="html"><![CDATA[<h4 id="代码执行顺序"><a href="#代码执行顺序" class="headerlink" title="代码执行顺序"></a>代码执行顺序</h4><ul><li><input checked="" disabled="" type="checkbox"> <pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 先执行同步的代码<span class="token number">2</span><span class="token punctuation">.</span> 再执行process<span class="token punctuation">.</span>nextTick<span class="token number">3</span><span class="token punctuation">.</span> 执行异步代码   <span class="token number">3.1</span> 异步分为宏任务和微任务， 计时器 、ajax 、读取文件都是宏任务，Promise的then方法是微任务，微任务先执行   <span class="token number">3.2</span> 异步的代码放在任务队列里执行<span class="token number">4</span><span class="token punctuation">.</span> <span class="token operator">**</span><span class="token operator">*</span> setImmediate 会在本次事件循环结束之后  、下次事件循环开始之前执行 ！    <span class="token number">4.1</span> 事件循环，一次事件循环找到多少个任务此次就执行多少个任务，没有就不执行。每次事件循环都可能找到任务或找不到任务，不管找到找不到，本次事件循环都会结束，结束之后重新开始新一次的事件循环，重新开始查找任务，找到执行，找不到不执行！setImmediate就是第一次事件循环结束后，下一次事件循环之前执行的。    事件循环会不断的检测任务队列有没有任务可执行。process<span class="token punctuation">.</span>nextTick 与 setImmediate 都是在node使用场景多。这两个方法在node的才能运行，在浏览器运行不了。</code></pre></li></ul><pre class=" language-js"><code class="language-js"><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'本轮事件循环结束，下次事件循环未开始之前执行（setImmediate）'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步宏任务后执行，若无其他任务，本轮事件循环结束'</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'下一轮事件循环开始执行(宏任务)'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步执行（运行栈）'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步执行'</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这里也是同步的</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步微任务先执行（then）'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步之后执行（process.nextTick）'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 以上代码执行顺序</span>同步执行（运行栈） <span class="token number">2</span>同步执行 <span class="token number">6</span>同步之后执行（process<span class="token punctuation">.</span>nextTick） <span class="token number">5</span>异步微任务先执行（then） <span class="token number">8</span>异步宏任务后执行，若无其他任务，本轮事件循环结束 <span class="token number">9</span>本轮事件循环结束，下次事件循环未开始之前执行（setImmediate） <span class="token number">1</span><span class="token function">下一轮事件循环开始执行</span><span class="token punctuation">(</span>宏任务<span class="token punctuation">)</span> <span class="token number">3</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 事件循环  宏任务 微任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="2021/07/25/mian-xiang-dui-xiang/"/>
      <url>2021/07/25/mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建一个类</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> <span class="token string">"Eric"</span>  <span class="token comment" spellcheck="true">// 类的属性</span>    age <span class="token operator">=</span> <span class="token number">18</span>    hobby <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 类的方法</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'make a teacher'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 一个类可以创建多个对象</span><span class="token comment" spellcheck="true">// 因此可以说类  是 对象的模具 ， 对象是 类的铸件。</span><span class="token comment" spellcheck="true">// 实例化一个类</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 使用关键字 new 实例化， 实例化出来的是一个对象，该对象有类的属性和方法，方法位于原型上。</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 构造器 constructor (主要的作用是初始化数据)</span><span class="token keyword">class</span> <span class="token class-name">Persons</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age <span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex    <span class="token punctuation">}</span>        <span class="token function">hobbys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">的爱好是...`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 给要实例化的类传入参数， 类中的构造器（constructor）可以接收到参数</span><span class="token operator">**</span><span class="token operator">*</span> <span class="token comment" spellcheck="true">// 至于为什么类的 constructor 能接收到 参数，以后再谈。</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Eric"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 派生类  （用于继承基类的属性 和 方法）</span><span class="token keyword">class</span> <span class="token class-name">Children</span> <span class="token keyword">extends</span> <span class="token class-name">Persons</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当基类的方法不能满足派生类的需求的时候，派生类可以在自己内部 重写基类方法。</span>        <span class="token comment" spellcheck="true">// hobbys</span>        <span class="token comment" spellcheck="true">// console.log('玩游戏')</span>    <span class="token comment" spellcheck="true">//  }</span>    <span class="token punctuation">}</span><span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token string">'xiaoJun'</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 派生类可访问基类的属性和方法， 也可以重写基类的方法</span>child<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">// xiaoJun</span>child<span class="token punctuation">.</span><span class="token function">hobbys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// xiaoJun的爱好是...</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 继承构造器 （当基类的数据不能满足派生类的需求的时候，可继承构造器(相当于super调用了constructor函数),再添加自己需要的）</span><span class="token keyword">class</span> <span class="token class-name">Children</span> <span class="token keyword">extends</span> <span class="token class-name">Persons</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span> eat<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age <span class="token punctuation">,</span> sex<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 继承</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> eat    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 面向对象静态方法</span><span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> user <span class="token operator">=</span> <span class="token string">"Eric"</span>        <span class="token keyword">static</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Worker<span class="token punctuation">.</span>user <span class="token operator">+</span> <span class="token string">'说他的工作是教书'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Worker<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Eric说他的工作是教书</span><span class="token comment" spellcheck="true">// 使用静态方法不需要实例化，因此不用开辟堆栈空间，速度比对象方法快55%。</span><span class="token operator">**</span><span class="token comment" spellcheck="true">// 静态成员不能使用非静态成员，因为使用非静态成员 ，必须实例化！</span><span class="token operator">**</span><span class="token comment" spellcheck="true">// 若要使用，把方法或属性也改成静态的。</span></code></pre><h4 id="暴露和导出的方式"><a href="#暴露和导出的方式" class="headerlink" title="暴露和导出的方式"></a>暴露和导出的方式</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 第一种方式  exports</span><span class="token comment" spellcheck="true">// public1.js </span>exports<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">'admin'</span>exports<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">'123'</span>exports<span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>login <span class="token operator">=</span> <span class="token punctuation">{</span>  username <span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span>  password <span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>fun <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是public1中的fun方法'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// module.js</span><span class="token keyword">const</span> <span class="token keyword">public</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./public1'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">public</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cmd 命令行  node  module<span class="token punctuation">.</span>js 运行 ，可以看到暴露成功</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 第二种方式   module.exports</span><span class="token comment" spellcheck="true">// public2.js </span><span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token string">'123'</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">let</span> login <span class="token operator">=</span> <span class="token punctuation">{</span>  username <span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span>  password <span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">}</span><span class="token keyword">let</span> fun <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是public1中的fun方法'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span>  <span class="token punctuation">{</span>  username<span class="token punctuation">,</span>  password<span class="token punctuation">,</span>  obj<span class="token punctuation">,</span>  login<span class="token punctuation">,</span>  fun<span class="token punctuation">}</span>同module<span class="token punctuation">.</span>js 运行文件，也可以看到运行成功。</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 第三种方式  export 导出，import  失败？？</span><span class="token comment" spellcheck="true">// public3.js</span><span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">'123'</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token punctuation">{</span>  username <span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span>  password <span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">}</span><span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是public1中的fun方法'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>  username<span class="token punctuation">,</span>  password<span class="token punctuation">,</span>  obj<span class="token punctuation">,</span>  login<span class="token punctuation">,</span>  fun<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// module1.js</span><span class="token keyword">import</span> a <span class="token keyword">from</span> <span class="token string">'./public3'</span><span class="token comment" spellcheck="true">// 为什么无法引入</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">**</span><span class="token comment" spellcheck="true">// 在react框架下是可以这样导出并引入的，但这里写demo却失败了，待定...</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 第四种方式</span><span class="token comment" spellcheck="true">// default.js</span><span class="token keyword">const</span> rect <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>  y<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>  fill<span class="token punctuation">:</span><span class="token string">'red'</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> rect<span class="token comment" spellcheck="true">// import.js</span><span class="token keyword">import</span> rect <span class="token keyword">from</span> <span class="token string">'./default'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rect'</span><span class="token punctuation">,</span>rect<span class="token punctuation">)</span><span class="token operator">**</span><span class="token operator">*</span><span class="token comment" spellcheck="true">// 这种方式运行也不行，但在框架中是可行的。因此后面两种无法运行应该是其他原因。</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 面向对象、 文件操作，导出和暴露的方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>严格模式与es5对象的两种扩展</title>
      <link href="2021/07/21/yan-ge-mo-shi-yu-es5-dui-xiang-de-liang-chong-kuo-zhan/"/>
      <url>2021/07/21/yan-ge-mo-shi-yu-es5-dui-xiang-de-liang-chong-kuo-zhan/</url>
      
        <content type="html"><![CDATA[<h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**严格模式与混杂模式对立，  要尽量避免混杂模式混杂模式(即常规模式)'use strict'使用严格模式后：  1. 声明变量  必须使用变量修饰符  如  var  let  const  , 直接  i = 100 , console.log(i) 会报错，非严格模式不会报错；    2. 八进制必须以0o开头， (如console.log(034) 就是八进制数据，以0开头的，就是八进制数据，javascript默认为八进制数据)；    3. eval函数只能进行简单的数值运算。(而不使用严格模式， eval函数是可以识别多种运算符、和 var,let 等)    4. 严格模式不能删除变量， 而非严格模式可以删除 (var age = 18 , delete age 在非严格模式中可以使用)。    5. 严格模式没有this, 普通函数的this 指向window对象，而启用了严格模式后，this变为undefined。    */</span></code></pre><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><pre class=" language-j"><code class="language-j">JSON 是字符串，独立于语言和平台。具有 高度辨识？ 、体积小、速度快的优点。序列化 ： JSON<span class="token conjunction variable">.</span>stringify<span class="token punctuation">(</span><span class="token punctuation">)</span>  ，内置一个参数<span class="token punctuation">(</span>对象<span class="token punctuation">)</span>反序列化： JSON<span class="token conjunction variable">.</span>parse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token verb keyword">,</span> <span class="token conjunction variable">..</span><span class="token conjunction variable">..</span><span class="token conjunction variable">..</span><span class="token verb keyword">,</span>参数是json串</code></pre><h4 id="es5扩展-新建对象-和-给对象添加属性值-（不常用，只在特定场景下使用）"><a href="#es5扩展-新建对象-和-给对象添加属性值-（不常用，只在特定场景下使用）" class="headerlink" title="es5扩展    新建对象    和   给对象添加属性值 （不常用，只在特定场景下使用）"></a>es5扩展    新建对象    和   给对象添加属性值 （不常用，只在特定场景下使用）</h4><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'Eric'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span><span class="token string">'男'</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    es5 创建对象的方式    包含两个参数，第一个是原型对象，第二个是一个描述    描述是一个对象，对象中属性名所对应的属性值是一个对象，包含四个属性。    这样也是继承了原型对象的属性和方法；可以在新建对象的_proto_看到继承的属性和方法。  */</span>    <span class="token keyword">let</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 四个属性值默认均为false</span>    address<span class="token punctuation">:</span><span class="token punctuation">{</span>      value<span class="token punctuation">:</span><span class="token string">'吉林'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 属性名所对应的值</span>      writable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 是否可修改</span>      configurable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 是否可以删除</span>      enumerable<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// 是否可以枚举</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">.</span>age<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// age 位于原型对象</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">.</span>sex<span class="token punctuation">)</span>  <span class="token keyword">delete</span> newObj<span class="token punctuation">.</span>address  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">.</span>address<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 添加属性， 给obj2 新增 fullName 属性</span>  <span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    firstName <span class="token punctuation">:</span> <span class="token string">'关'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'羽'</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// defineProperties 包含两个参数， 第一个参数为原型对象，第二个为描述。</span>  <span class="token comment" spellcheck="true">// 描述中的键 对应一个对象，对象中有两个方法，分别是get 和 set, 在不同的时机触发。</span>  <span class="token keyword">let</span> addObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token punctuation">{</span>    fullName <span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log('修改了')</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 调用fullName 时触发get方法</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'全名'</span><span class="token punctuation">,</span>addObj<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 关羽  （修改前）</span>    <span class="token comment" spellcheck="true">// 修改时调用set ，set方法支持传入一个参数，这个参数就是新赋的值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>addObj<span class="token punctuation">)</span>  addObj<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">'张飞'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'全名2'</span><span class="token punctuation">,</span>addObj<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 张飞 （修改后）</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 严格模式  对象es5两种扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21-july-18report</title>
      <link href="2021/07/18/21-july-18report/"/>
      <url>2021/07/18/21-july-18report/</url>
      
        <content type="html"><![CDATA[<h4 id="Object的三种方法"><a href="#Object的三种方法" class="headerlink" title="Object的三种方法"></a>Object的三种方法</h4><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span>keys 会返回一个数组，数字组中的元素全部为字符串，是对象的键。Object<span class="token punctuation">.</span>values <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>，数组中的元素皆为对象的键所对应的值。Object<span class="token punctuation">.</span>entries 返回一个二维数组，其中的每一个元素为数组，元素数组中包含键名和值两个元素。</code></pre><h4 id="React-Props-类型校验-和默认值指定"><a href="#React-Props-类型校验-和默认值指定" class="headerlink" title="React Props 类型校验 和默认值指定"></a>React Props 类型校验 和默认值指定</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> propTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SvgEditor</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 指定外部传入的数据类型，若不符合指定的数据类型，则给出精确的报错！</span>SvgEditor<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> propTypes<span class="token punctuation">.</span>string<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义默认的props，防止当外部未传入该变量时发生报错。</span>SvgEditor<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>  height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">}</span></code></pre><h4 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 防抖：防止多次触发函数，在一定时间内只能触发一次。</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">//借助闭包</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果正在计时，取消之前的计时(清除定时器)，重新开始计时。</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>         <span class="token punctuation">}</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 其他情况，说明当前并没有在计时，那么就开始一个计时</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 类似于技能冷却   * 在一定时间内已经触发过函数，在该时间段内再次点击或多次点击不能触发函数；   * 除非等事件结束方可再点击   * 但有一个问题，第一次执行函数是有延迟的。  */</span>  btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 点过了就不能再点了</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没点过的情况下，允许点击（触发函数）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        status <span class="token operator">=</span> <span class="token boolean">false</span>   <span class="token comment" spellcheck="true">// 点过后就不能再点了</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'间隔执行'</span><span class="token punctuation">)</span>           status <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment" spellcheck="true">// 在一定时间后，允许点击</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>June20</title>
      <link href="2021/06/20/june20/"/>
      <url>2021/06/20/june20/</url>
      
        <content type="html"><![CDATA[<h4 id="1-css文字隐藏，hover上去显示全部。"><a href="#1-css文字隐藏，hover上去显示全部。" class="headerlink" title="1. css文字隐藏，hover上去显示全部。"></a>1. css文字隐藏，hover上去显示全部。</h4><p>有些时候文字太长，但布局规定的范围可能给不了那么长，因此需要值显示一部分，hover的时候再显示全部。</p><p>其实这个操作已经有了，不需要我们再操作的，通过下面的代码就能实现，不需要写多余的代码。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我爱夏天的风，冬天的雪，夏天的雨，和你的眼眸。<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我爱夏天的风，冬天的雪，夏天的雨，和你的眼眸。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-CSS"><code class="language-CSS">p{    width:40px;    text-overflow: ellipsis;    white-space: nowrap;    overflow: hidden;    background: brown;    font-size: 12px;    color: white;}</code></pre><p>补充： 其实也可以自己写，但这样就会有两个hover显示全部文字了。</p><p>利用属性选自器和伪元素，为伪元素的content设置 attr(title)。</p><pre class=" language-css"><code class="language-css"><span class="token selector">p<span class="token attribute">[title]</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p<span class="token attribute">[title]</span><span class="token pseudo-element">::before</span></span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#F2F2F2</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#E5E5E5</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">2</span>px <span class="token number">4</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">56</span>,<span class="token number">62</span>,<span class="token number">71</span>,<span class="token number">0.10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">2</span>px <span class="token number">6</span>px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">13</span>px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#202332</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">106</span>px<span class="token punctuation">;</span> // 设置位置  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span> // 设置位置  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">90%</span><span class="token punctuation">;</span>  <span class="token property">word-break</span><span class="token punctuation">:</span> break-word<span class="token punctuation">;</span> // 如果一个单词太长，则截断  CSS 属性 word-break 指定了怎样在单词内断行。  <span class="token property">white-space</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>// 可以换行  white-space CSS 属性是用来设置如何处理元素中的空白。<span class="token punctuation">}</span></code></pre><h4 id="2-amp-amp-与-条件-if"><a href="#2-amp-amp-与-条件-if" class="headerlink" title="2.  &amp;&amp; 与 条件 if"></a>2.  &amp;&amp; 与 条件 if</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**从接口拿到的数据，一般要判断指针，避免空指针异常。在渲染时  list &amp;&amp; list.map( v => {} ) 如果list的值为 undefined 、 null 、 '' ,false, 后面的语句不会map。也可以这么写。 */</span><span class="token punctuation">(</span> list  <span class="token operator">?</span> list <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/**上面这种方式会在list的值为空时( undefined 、 null 、 '' ,false),取空数组。空数组map,map中的回调函数不会执行！ map和foreach一样，被遍历数组有几个元素，回调执行几次，反之一个元素都没有，那么回调一次都不执行。在if判断时，   如果list的值为undefined 、 null 、 '' ,false, 则不执行该条件语句*/</span><span class="token keyword">if</span><span class="token punctuation">(</span> list <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**无论是 list &amp;&amp; list.map 或是 ( list  ? list : []).map( v => {}) 都只能判断值不为 undefined 、 null 、 '' ,false 的情况。如果数据是一个空对象，是满足不为四种情况的，因此都会map，而此时空对象map就会报错，因为对象没有map方法。ps : 一般遍历数据，基本上对数据结构很清楚，因此不需要做过多限制，而有时在没数据或其他情况下，对一个数据进行map， 即使有了 list &amp;&amp; list.map 或是 ( list  ? list : []).map( v => {}) 这样的操作也是会报错的，因为数据格式不是一个数组，而我们又没有对遍历数据做遍历前的限制。*/</span><span class="token comment" spellcheck="true">// 当map 不是一个数组时可能会报的错</span>xx<span class="token punctuation">.</span>map is not defined xx<span class="token punctuation">.</span>map is not a <span class="token keyword">function</span><span class="token comment" spellcheck="true">// 限制遍历数据的  限制(一定为一个数组时遍历，其他情况不遍历)</span><span class="token comment" spellcheck="true">// Array.isArray(list) 检测数据是否为数组，若是，返回true（包含空数组）</span>list <span class="token operator">&amp;&amp;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="3-Ant-Design-Table-可设置最大高度"><a href="#3-Ant-Design-Table-可设置最大高度" class="headerlink" title="3. Ant-Design     Table 可设置最大高度"></a>3. Ant-Design     Table 可设置最大高度</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 经这样一操作， table 有了一个最大高maxHeight 和overflowY</span><span class="token comment" spellcheck="true">// x ,y (横向、纵向滚动，也可用于指定滚动区域的宽、高)</span><span class="token keyword">const</span> getHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> heights <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">queruSelect</span><span class="token punctuation">(</span><span class="token string">'.abc'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> heights<span class="token punctuation">.</span>offsetHeight <span class="token operator">?</span> heights<span class="token punctuation">.</span>offsetHeight  <span class="token operator">-</span> <span class="token number">150</span> <span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>Table<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">...</span><span class="token operator">...</span>scroll<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> y <span class="token punctuation">:</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        待续<span class="token operator">...</span></code></pre><h4 id="4-mobx-使用心得"><a href="#4-mobx-使用心得" class="headerlink" title="4. mobx 使用心得"></a>4. mobx 使用心得</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**组件通信通过props传值，子组件 通过this.props || props 接收，这样麻烦而且有一些局限性。而mobx 就是一个store, 类似数据处、存储库的东西，你完全可以把接口拿到的数据在mobx中处理好，然后直接传给jsx。mobx中的 @oberserver 就好比声明了一个变量，初始值是一个定值，这并不重要。@action 动作，其实就是函数，能做一些事情，用它通常用来变更定义的 @oberserver， 实现一些功能 ，因此你经常会看到这样的定义 ：*/</span> @oberserver list <span class="token operator">=</span> <span class="token string">'aaa'</span> @action addNameList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// list是 @oberserver定义的变量</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**以上方法是使用了装饰器的方法通常定义mobx ，需要写一个class , 在class 中 定义一些 @oberserver 和 @action，在暴露文件时，要new一下这个暴露的class ，在store文件建一个index.jsx 引入并再次暴露这些 定义的class 。在jsx 文件需要注入并监听注入的变量。 注入 @inject("Dbc")   @obsrever (若store的值发生了变化则自动更新该jsx文件的值)使用一个store (class) 中的变量和函数，需要引入，*/</span><span class="token keyword">const</span> <span class="token punctuation">{</span>addNameList <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>Dbc<span class="token comment" spellcheck="true">// 对于使用了react hooks的函数组件，需要使用mobx6。</span></code></pre><h4 id="5-如何处理不同类型的信息版"><a href="#5-如何处理不同类型的信息版" class="headerlink" title="5. 如何处理不同类型的信息版"></a>5. 如何处理不同类型的信息版</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**有些时候需要展示字段完全不同的信息版，这时写多种版面是费力且难写的。此时我们就需要将switch 封装成一个函数，return 不同的数据就好了。*/</span><span class="token comment" spellcheck="true">// util.js</span><span class="token keyword">const</span> getInforMation <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> InfoContent         <span class="token keyword">switch</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"1"</span> <span class="token punctuation">:</span>         InfoContent <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> item<span class="token punctuation">.</span>name<span class="token punctuation">,</span>            value<span class="token punctuation">:</span> item<span class="token punctuation">.</span>value        <span class="token punctuation">}</span><span class="token punctuation">]</span>          breake <span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"2"</span> <span class="token punctuation">:</span>         InfoContent <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> item<span class="token punctuation">.</span>name<span class="token punctuation">,</span>            value<span class="token punctuation">:</span> item<span class="token punctuation">.</span>value        <span class="token punctuation">}</span><span class="token punctuation">]</span>          breake <span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> InfoContent<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Demo.jsx</span><span class="token keyword">import</span> <span class="token punctuation">{</span>    getInforMation<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./util.js'</span><span class="token keyword">const</span> renderifferentPanel <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> lists <span class="token operator">=</span> <span class="token function">getInforMation</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> lists<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div         className<span class="token operator">=</span><span class="token string">"lists"</span>        key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span>        <span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> panles <span class="token operator">=</span> <span class="token punctuation">(</span>datas<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">renderifferentPanel</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token operator">...</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">{</span>val<span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 返回视图</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 补充： 需要在不同的类型下展示不同的页面效果。</span><span class="token comment" spellcheck="true">// 思路: 根据数值来判断！</span><span class="token keyword">const</span> panles <span class="token operator">=</span> <span class="token punctuation">(</span>datas<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">renderifferentPanel</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'panles'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'vids'</span><span class="token punctuation">,</span>datas<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'5'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token punctuation">{</span>datas <span class="token operator">&amp;&amp;</span> datas<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">'5'</span> <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>datas<span class="token punctuation">.</span>Ip<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// type 为 5 时显示</span>    <span class="token operator">...</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">{</span>val<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.panles</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">heigth</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.vids</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="6-有时在请求某些视频时，需要先握手"><a href="#6-有时在请求某些视频时，需要先握手" class="headerlink" title="6. 有时在请求某些视频时，需要先握手"></a>6. 有时在请求某些视频时，需要先握手</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**实际上是在请求视频数据的接口后，在请求成功的情况下， 再发起一次axios请求（需要传递特定的参数）。握手成功，返回视频流数据，若无此次握手，只返回普通数据，不返回视频流？*/</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数组对象</title>
      <link href="2021/06/06/shu-zu-dui-xiang/"/>
      <url>2021/06/06/shu-zu-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h4 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h4><pre class=" language-js"><code class="language-js">与普通对象功能类似，也是用来存储一些值的。不同之处在于，普通对象以字符串作为属性名，而数组使用（下标）索引来操作元素。索引：从零开始的整数。一个索引来对应一个值，这叫一个元素。数组存储性能比对象好，因此在开发中经常使用。</code></pre><h5 id="创建数组对象"><a href="#创建数组对象" class="headerlink" title="创建数组对象"></a>创建数组对象</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// []</span>向数组添加元素arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hello'</span>  <span class="token comment" spellcheck="true">// console.log(arr1[0])  hello ---> string</span>如果读取不存在的下标，不会报错，而是会返回undefined，就像的确不存在的对象属性也不会报错，也会报undefined一样。数组长度：数组<span class="token punctuation">.</span>length  <span class="token comment" spellcheck="true">// arr.length</span>若是不连续的数组，length会获取最大的索引<span class="token operator">+</span><span class="token number">1</span>。arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"1"</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"2"</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"3"</span>  尽量不要创建非连续数组。修改数组length 属性，若修改length大于原长度，多出的会显示empty<span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 4 [1, 3, 5, empty]</span>若修改的length小于原长度，值保留对应长度的，多余的会被删除。因此可用length来删除一些元素</code></pre><pre class=" language-js"><code class="language-js">向数组最后位置添加一个元素arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"70"</span>  为什么使用arr<span class="token punctuation">.</span>length可以向最后的位置添加？length是最大的索引（index） <span class="token operator">+</span> <span class="token number">1</span>，所以 arr<span class="token punctuation">.</span>length 意为最大的索引 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>也就是增加一项。（下一位索引）</code></pre><h5 id="数组字面量"><a href="#数组字面量" class="headerlink" title="数组字面量"></a>数组字面量</h5><pre class=" language-js"><code class="language-js">语法 ： <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>与 <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>一样，但字面量创建的更加简单！向数组arr<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token string">"123"</span> 是完全正确的，但这样没有任何意义，数组最大的特点便是下标（索引）。使用数组字面量的方式创建数组，可以在创建时就指定数组中的元素。  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>使用构造函数创建函数<span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [10, 20, 30]</span>不同：arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 创建一个数组，里面只有一个元素（10）</span>arr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 创建一个长度为10 的数组</span></code></pre><pre class=" language-js"><code class="language-js">数组中的元素可以是任意数据类型，亦可以是对象。例如： <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token punctuation">:</span> <span class="token string">"wind"</span><span class="token punctuation">}</span>         <span class="token keyword">let</span> arr5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'length----->'</span><span class="token punctuation">,</span>arr5<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span>     arr5<span class="token punctuation">[</span>arr5<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> obj     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [{...}]</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 1</span>也可以是函数：     <span class="token keyword">let</span> arr7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'11111'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span>         arr7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用</span>亦可以是数组 ：     <span class="token keyword">let</span> arr9 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr9<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//  [4, 8, 10]</span></code></pre><h5 id="数组四方法"><a href="#数组四方法" class="headerlink" title="数组四方法"></a>数组四方法</h5><pre class=" language-js"><code class="language-js">push ：向数组的末尾添加一个或多个元素，并返回数组新长度。返回值为数组新长度。pop ： 删除数组最后一个元素，返回值是被删除元素。Unshift ：向数组开头添加一个或多个元素并返回新的长度，插入元素，后面的元素索引依次调整。shift ：删除数组第一个元素，将被删除元素作为返回值。</code></pre><h5 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h5><pre class=" language-js"><code class="language-js">遍历就是将数组中所有元素取出来。    <span class="token keyword">let</span> arr10 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr10<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'item----->'</span><span class="token punctuation">,</span>arr10<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>数组遍历之forEach<span class="token punctuation">:</span>forEach 以一个函数为参数，它的参数就是回调函数，回调函数我们并没有调，而是浏览器调了。arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>数组有几个元素，函数就会执行几次，每次执行浏览器会将遍历的元素以实参形式传递进来。浏览器向该回调函数传递了三个参数：第一个参数为数组的每一项，第二个参数为每一项的下标，第三个参数为正在遍历的数组。arr10<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1111'</span><span class="token punctuation">,</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>实参列表<span class="token punctuation">.</span>html<span class="token punctuation">:</span><span class="token number">55</span> <span class="token number">1111</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>实参列表<span class="token punctuation">.</span>html<span class="token punctuation">:</span><span class="token number">55</span> <span class="token number">1111</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>实参列表<span class="token punctuation">.</span>html<span class="token punctuation">:</span><span class="token number">55</span> <span class="token number">1111</span> <span class="token number">4</span> <span class="token number">2</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>实参列表<span class="token punctuation">.</span>html<span class="token punctuation">:</span><span class="token number">55</span> <span class="token number">1111</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>实参列表<span class="token punctuation">.</span>html<span class="token punctuation">:</span><span class="token number">55</span> <span class="token number">1111</span> <span class="token number">7</span> <span class="token number">4</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>实参列表<span class="token punctuation">.</span>html<span class="token punctuation">:</span><span class="token number">55</span> <span class="token number">1111</span> <span class="token number">8</span> <span class="token number">5</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span></code></pre><h5 id="数组方法slice-splice"><a href="#数组方法slice-splice" class="headerlink" title="数组方法slice,splice"></a>数组方法slice,splice</h5><pre class=" language-js"><code class="language-js">slice 包含两个参数，第一个参数为开始下标（包括开始索引），第二个参数为结束下标（不包括结束索引）。只写一个参数，会截取以开始到后面所有的。slice不会影响原数组。如果传递一个负值，则从后往前计算。splice会影响原数组，会将指定元素从数组删除，并将被删除元素作为返回值返回。包含三个参数，第一个参数表示开始位置索引，第二个参数表示删除数量，第三个参数可传递一些新元素，会自动插入开始位置前。</code></pre><h5 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h5><pre class=" language-js"><code class="language-js">待续。。。</code></pre><h5 id="数组其他方法"><a href="#数组其他方法" class="headerlink" title="数组其他方法"></a>数组其他方法</h5><pre class=" language-js"><code class="language-js">concat<span class="token function">合并数组，concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>中除可以传数组，也可以传单个元素。arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token string">"牛恒"</span><span class="token punctuation">)</span>join将数组所有元素放入字符串，不会影响原数组，而是将转换的字符串作为结果返回。<span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>括号中可指定一个字符作为元素的连接符。reverse反转数组sort对数组进行排序，会影响原数组。按unicode编码进行排序，小的在前，大的在后，abc在前，efd在后。排序数字：排序数字也是按照unicode编码排序，但可能得到错误的结果arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [11, 3, 4, 5, 7]</span>指定排序规则可在sort中添加一个回调函数，浏览器会分别使用数组中的元素作为实参去调用回调函数。arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/**得到： "a = 5" "b = 4" "a = 4" "b = 3"*/</span>使用哪个元素调用不太确定，但确定的是<span class="token punctuation">,</span>在数组中a一定在b的前面。浏览器会根据函数的返回值来决定元素的顺序。若返回一个大于<span class="token number">0</span>的值，则元素交换位置。若返回一个小于<span class="token number">0</span>的值，则元素位置不变。若返回一个<span class="token number">0</span>，则认为两元素相等，也不交换位置。<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>简写 ：升序 <span class="token keyword">return</span> a <span class="token operator">-</span> b降序 retun b <span class="token operator">-</span> a</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数组对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>May30</title>
      <link href="2021/05/30/may30/"/>
      <url>2021/05/30/may30/</url>
      
        <content type="html"><![CDATA[<ol><li><h4 id="在运行前-先确定有没有保存，如果没有保存，保存，或者干脆设为自动保存。"><a href="#在运行前-先确定有没有保存，如果没有保存，保存，或者干脆设为自动保存。" class="headerlink" title="在运行前 先确定有没有保存，如果没有保存，保存，或者干脆设为自动保存。"></a>在运行前 先确定有没有保存，如果没有保存，保存，或者干脆设为自动保存。</h4></li><li><h4 id="记得连接N网。"><a href="#记得连接N网。" class="headerlink" title="记得连接N网。"></a>记得连接N网。</h4></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 错误总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向、构造函数</title>
      <link href="2021/05/27/this-zhi-xiang-gou-zao-han-shu/"/>
      <url>2021/05/27/this-zhi-xiang-gou-zao-han-shu/</url>
      
        <content type="html"><![CDATA[<h4 id="函数的this指向"><a href="#函数的this指向" class="headerlink" title="函数的this指向"></a>函数的this指向</h4><pre class=" language-js"><code class="language-js">解析器（浏览器）每次调用函数都会向函数传递一个隐含的参数，这个参数就是<span class="token keyword">this</span>。<span class="token keyword">this</span>指向的是一个对象，这对象我们称为函数指向的上下文对象。根据函数的调用方式的不同，<span class="token keyword">this</span>会指向不同的对象。普通函数 ：<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    conole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 指向window</span><span class="token punctuation">}</span>对象的方法： <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Eric'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>sayname <span class="token operator">=</span> fn1调用 <span class="token punctuation">:</span> obj<span class="token punctuation">.</span><span class="token function">sayname</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 指向此对象</span>总结 <span class="token punctuation">:</span> 以函数形式调用，指向window<span class="token punctuation">;</span>以方法形式调用<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>object <span class="token punctuation">(</span><span class="token keyword">this</span>指向该调用方法所属的对象<span class="token punctuation">)</span><span class="token punctuation">;</span>谁调指谁。构造函数的<span class="token keyword">this</span>指向 新建的对象（实例对象）</code></pre><pre class=" language-js"><code class="language-js">工厂模式创建的对象，使用的都是Object构造函数   <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>这就导致无法区分不同种类的对象，类型一样没有区别。（还不是很理解）</code></pre><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><pre class=" language-js"><code class="language-js">构造函数就是一个普通函数，与普通函数创建方式一样，但构造函数一般首字母大写。<span class="token keyword">function</span> Persion <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>构造函数与普通函数的区别就是调用方式不同。普通函数时直接调用，而构造函数 <span class="token operator">**</span><span class="token operator">*</span>需要使用<span class="token keyword">new</span>关键字<span class="token operator">**</span><span class="token operator">*</span> <span class="token punctuation">(</span>加<span class="token keyword">new</span>为构造函数，不加为普通函数<span class="token punctuation">)</span>；<span class="token keyword">var</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// console.log(tyepeof(per))   object</span></code></pre><h5 id="构造函数顺序"><a href="#构造函数顺序" class="headerlink" title="构造函数顺序"></a>构造函数顺序</h5><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">)</span> 立刻创建一个对象于堆内存（实例对象） 就像 <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、 <span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">)</span> 将新建对象设为函数中的<span class="token keyword">this</span><span class="token punctuation">,</span>构造函数中的<span class="token keyword">this</span>指向该对象；<span class="token number">3</span>）逐行运行函数中的代码；<span class="token number">4</span>）将新建对象作为返回值返回。</code></pre><h6 id="构造函数可以传参"><a href="#构造函数可以传参" class="headerlink" title="构造函数可以传参"></a>构造函数可以传参</h6><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> Persion <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">}</span><span class="token keyword">let</span> per1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token string">"Eric"</span><span class="token punctuation">)</span><span class="token keyword">let</span> per2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token string">"Rose"</span><span class="token punctuation">)</span>使用同一构造函数创建的对象称为一类对象，也将一个构造函数叫类。使用<span class="token keyword">instanceof</span> 可以检查一个对象是否是一个类的实例。  <span class="token comment" spellcheck="true">// console.log(per1 instanceof Persion)  true</span>补充： 所有对象都是Object的后代， 任何对象  <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> 都是<span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><h6 id="构造函数的方法"><a href="#构造函数的方法" class="headerlink" title="构造函数的方法"></a>构造函数的方法</h6><pre class=" language-js"><code class="language-js">构造函数的方法可放在全局，而不用在构造函数内部创建，就像一个厕所大家用，而不是一人一个厕所。但是这样有一个问题，就是会污染全局作用域。放在全局也不安全，可能两个变量名冲突，也可能被修改，所以不安全。</code></pre><h6 id="函数的原型"><a href="#函数的原型" class="headerlink" title="函数的原型"></a>函数的原型</h6><pre class=" language-js"><code class="language-js"><span class="token function">每个函数都有prototype</span><span class="token punctuation">(</span>原型对象<span class="token punctuation">)</span>，无论是普通函数还是构造函数都有这个对象，原型是解析器（浏览器）加的。每个函数的原型都不一样。如果函数作为普通函数调用，那么构造函数没有任何作用。构造函数创建对象（实例对象）的__proto__指向构造函数的原型对象。__proto__是新建对象的隐含属性。</code></pre><h6 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h6><pre class=" language-js"><code class="language-js">原型对象像一个公共场地，所有该类实例对象都可以访问到这个对象，因此我们可以将对象中共有的内容同一设置到原型对象中。原型是这一类的原型。原型对象也是对象，它也有原型。</code></pre><h6 id="查找机制"><a href="#查找机制" class="headerlink" title="查找机制"></a>查找机制</h6><pre class=" language-js"><code class="language-js">访问一个实例对象的属性或方法时，会现在自身找，如有则直接使用。没有则回去原型兑现中找，找到则直接使用。原型中没有找到，就去原型的原型中找，直到Object</code></pre><h6 id="hasOwnprototype-方法"><a href="#hasOwnprototype-方法" class="headerlink" title="hasOwnprototype() 方法"></a>hasOwnprototype() 方法</h6><pre class=" language-js"><code class="language-js">使用<span class="token keyword">in</span>查找对象中有无某个属性，若对象中没有，但原型中有，也会返回<span class="token boolean">true</span><span class="token punctuation">,</span>这样用<span class="token keyword">in</span>就不行了。mc<span class="token punctuation">.</span><span class="token function">hasOwnprototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 检查自身是否有某个属性，此方法只有对象自身有该属性才会返回<span class="token boolean">true</span>。mc<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ 原型的原型  <span class="token comment" spellcheck="true">// 一般是两层</span>mc<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__（Object 总： 它没有原型）<span class="token punctuation">.</span>__proto__   <span class="token comment" spellcheck="true">// Object没有原型,因此结果为 null</span>实例的__proto<span class="token punctuation">.</span>____proto__ 第二个就是Object <span class="token punctuation">,</span>它没有原型。</code></pre><h6 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h6><pre class=" language-js"><code class="language-js">打印一个对象，相当于打印了 per<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Object] 现在似乎不是这样了</span>    <span class="token keyword">var</span> abc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    abc<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"jiji"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// {name: "jiji"}</span>per<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">hasOwnprototype</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// true</span>若不希望出现 <span class="token punctuation">[</span>object Object<span class="token punctuation">]</span> ，可以 per<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是大帅哥'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>将 per<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 放于原型更好。补充： 拼串， <span class="token operator">+</span><span class="token string">" : "</span> <span class="token operator">+</span>  或 <span class="token string">"+ this.name  +"</span> 都可。</code></pre><h6 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h6><pre class=" language-js"><code class="language-js">生活时间长了会产生生活垃圾，同理程序运行时间长了也会产生垃圾。这些垃圾过多会让程序运行变慢，因此，我们需要一个垃圾回收机制，来处理程序运行过程中的垃圾<span class="token operator">**</span><span class="token operator">*</span>什么是垃圾<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>obj <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 切断栈空间地址和堆空间内存的联系</span>概念： 当一个对象没有任何变量或属性值能对它引用，此时我们永远无法操作该对象！ 这种对象就是垃圾，因为它仍占用堆内存空间。这种对象过多会占用大量内存空间，导致程序运行变慢，甚至内存溢出（卡死程序）<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>程序死了。现代Js有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们无需也不能进行垃圾回收的操作。<span class="token operator">**</span> 我们要做的就是 将这些不再使用的的对象  设为 <span class="token keyword">null</span>。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> this指向、构造函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>May24</title>
      <link href="2021/05/24/may24/"/>
      <url>2021/05/24/may24/</url>
      
        <content type="html"><![CDATA[<h4 id="1-关于react中使用less"><a href="#1-关于react中使用less" class="headerlink" title="1. 关于react中使用less"></a>1. 关于react中使用less</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**在网上试了很多方法，都没有作用。最后，用了一种办法，在vs-code写less,引入的时候引入css文件，less中定义颜色的方法和嵌套随你写。@red-color : red ;*/</span></code></pre><h4 id="2-关于判断一段值是否为undefined"><a href="#2-关于判断一段值是否为undefined" class="headerlink" title="2. 关于判断一段值是否为undefined"></a>2. 关于判断一段值是否为undefined</h4><pre class=" language-js"><code class="language-js">例如一个字段为  alartItem（object） <span class="token punctuation">,</span>它所包含的字段可能有值，也可能值为undefined，也可能值<span class="token keyword">null</span><span class="token punctuation">,</span>那么我们就需要进行判断，不能使undefined值报出来。    <span class="token keyword">let</span> alarmItem <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token punctuation">:</span> <span class="token string">"我"</span><span class="token punctuation">,</span> tiems<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>    如果 alarmItem<span class="token punctuation">.</span>name 有值，不含undefined、<span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token boolean">false</span>，执行 <span class="token operator">?</span> 后面的打印这段话。反之执行 <span class="token punctuation">:</span>得到 <span class="token keyword">null</span> ，<span class="token keyword">null</span>  下面的<span class="token keyword">if</span> 语句不执行！console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>alarmText<span class="token punctuation">)</span> 打印为<span class="token keyword">null</span>。        <span class="token keyword">let</span> alarmText <span class="token operator">=</span> <span class="token punctuation">(</span>alarmItem <span class="token operator">&amp;&amp;</span> alarmItem<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token template-string"><span class="token string">`阳光明媚的春天,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>alarmItem<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">去了苏州园林、北塔寺。苏州的温婉，徐徐清风沁人心脾。以后若有机会可还要再去</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>alarmItem<span class="token punctuation">.</span>times <span class="token operator">||</span> <span class="token number">0</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 次。`</span></span><span class="token punctuation">:</span> <span class="token keyword">null</span> （没有times字段， 则取<span class="token number">0</span>）    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>alarmText<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>alarmText<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果有值，不含undefined、null, '',false，执行此条件语句,反之不执行！</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'11111'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-echarts配置项轻点"><a href="#3-echarts配置项轻点" class="headerlink" title="3. echarts配置项轻点"></a>3. echarts配置项轻点</h4><pre class=" language-js"><code class="language-js">tooltip是鼠标悬浮的相关配置项grid是echarts距离上下左右 的距离，还包含其他属性，此处浅谈。xAxis 、yAxis分别代表x<span class="token punctuation">,</span>y轴， type表示坐标轴类型  <span class="token string">'value'</span> 数值轴，适用于连续数据。（y轴可能用的多）  <span class="token string">'category'</span> 类目轴，适用于离散的类目数据。为该类型时类目数据可自动从 series<span class="token punctuation">.</span>data 或 dataset<span class="token punctuation">.</span>source 中取，或者可通过 xAxis<span class="token punctuation">.</span>data 设置类目数据。（x轴设置此属性，要给一个data数组以在x轴显示）  <span class="token string">'time'</span> 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。 （此二种暂未用到）  <span class="token string">'log'</span> 对数轴。适用于对数数据。axisLine <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> 坐标轴轴线相关设置，可设置 lineStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>              color<span class="token punctuation">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> 很多线段相关的社会都有lineStyle这个属性，里面的属性设置也大致相同。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反思总结</title>
      <link href="2021/05/21/fan-si-zong-jie/"/>
      <url>2021/05/21/fan-si-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="1-Js变量名如果太相近，容易引用错误且不易发现错误！"><a href="#1-Js变量名如果太相近，容易引用错误且不易发现错误！" class="headerlink" title="1. Js变量名如果太相近，容易引用错误且不易发现错误！"></a>1. Js变量名如果太相近，容易引用错误且不易发现错误！</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">AAA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token keyword">const</span> <span class="token punctuation">[</span>dataList<span class="token punctuation">,</span> setDataList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token comment" spellcheck="true">// 数据请求方法</span><span class="token keyword">const</span> getDataMethods <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> datasList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       datasList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token comment" spellcheck="true">// 渲染</span><span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 为什么会出错？ 不知道起什么变量名，在给变量赋值时简单写了一个变量名（为了图方便），就有了后面的错误。</span>    <span class="token comment" spellcheck="true">// 错误的引用即便 原本的dataList是一个数组，这里的datasList也是is not defined 且拿不到length属性，也没有[0]这一项。</span>    <span class="token comment" spellcheck="true">// 所以这里的三项判断完全没有作用！ 这就是变量名太相近的危害！出了错误也不易被发现。</span>    <span class="token comment" spellcheck="true">// 建议将变量名 以英文全量组合而成，这样可能名字很长，但却不易出错！</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>datasList <span class="token operator">&amp;&amp;</span> datasList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> datasList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>        dataList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>v<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>                 <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>v<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                 <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>v<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                 <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>v<span class="token punctuation">.</span>sex<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><pre class=" language-tex"><code class="language-tex">补充：为什么判断不是一个空数组要用 datasList && datasList.length > 0 && datasList[0] !== undefined第一个  datasList 表示 datasList存在且定义了；第二个  datasList.length > 0 表示数组的长度大于零，只有数组，字符串才有length属性！，布尔值的length为undefined，let arr = true; arr.lenght // undefinedundefined和null数据类型的length都会报错。let arr = undefined ;arr.lenght // 报错let arr = null ; arr.length     // 报错对象不加length，length属性为undefined；let obj = new Object(); obj.name = "牛恒"; obj.age = 30 ; obj.sex = "男"; obj.length // undefined函数的length根据形参（和内部定义的变量？？）决定let fn = function(a,b, c) {let d};  // fn.length  ---> 3,let 声明的变量并没有算到length第三个 判断是否不是一个空数组，不能使用 let arr = [];if(arr !== []){} 的做法，即便arr确实是空数组，它也绝对不等于 []，因为二者都是引用数据类型，空间地址不一样，怎么比都不一样，因此要使用 arr[0] !== undefined的方法； 如果arr不为空数组，那么它的第一项就不是undefined,反之，如果arr是空数组，那么它的第一项是不存在的，是为undefined。</code></pre><h4 id="2-写代码要先心中有一幅画-（想好，想的差不多）"><a href="#2-写代码要先心中有一幅画-（想好，想的差不多）" class="headerlink" title="2. 写代码要先心中有一幅画 （想好，想的差不多）"></a>2. 写代码要先心中有一幅画 （想好，想的差不多）</h4><pre class=" language-tex"><code class="language-tex">前言：如果完全没有思路或者思路根本不清晰就去写代码，那基本是写一点错一点，写一点就要改。这样的代码写出来不仅就非常费劲，而且后面业务一变说不定 之前的逻辑就完全用不了了，简而言之就是 没有想好就去写代码难写且极难维护，久而久之开发人员也容易失去信息和对工作的兴趣，可见危害之大！</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 反思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js总结2对象函数</title>
      <link href="2021/05/20/js-zong-jie-2-dui-xiang-han-shu/"/>
      <url>2021/05/20/js-zong-jie-2-dui-xiang-han-shu/</url>
      
        <content type="html"><![CDATA[<h4 id="1-对象"><a href="#1-对象" class="headerlink" title="1. 对象"></a>1. 对象</h4><pre class=" language-json"><code class="language-json">已经有了五种数据类型，为什么我们还需要对象？基本数据类型值单一，值与值之间没有联系（不是一个整体）对象的作用就是**将多个值放在一起，批量操作；对象属于复合数据类型，可保存多个不同数据类型的属性，就像一个袋子。</code></pre><h5 id="1-2）对象的类型"><a href="#1-2）对象的类型" class="headerlink" title="1-2）对象的类型"></a>1-2）对象的类型</h5><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 内建对象由Es标准中定义的对象，在任何Es实现中都可以使用 例如：​    Math、String、Number、Boolean、Function<span class="token punctuation">,</span>Object问题<span class="token punctuation">:</span>String、Number、Boolean数据类型与String、Number、Boolean内建对象有何区别？</code></pre><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 宿主对象由Js环境提供的对象，目前主要指由浏览器提供的对象。例如： BoM<span class="token punctuation">,</span>Dom<span class="token punctuation">;</span> console<span class="token punctuation">.</span>log就是一个对象，document<span class="token punctuation">.</span>write也是一个对象，这个两者都由浏览器提供。</code></pre><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 自定义对象  （开发人员自己创建的对象）<span class="token comment" spellcheck="true">// 使用new关键字调用的函数，是构造函数constructor; ；构造函数时专门用来创建对象的。</span>创建对象： <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>添加属性： obj<span class="token punctuation">.</span>name<span class="token operator">=</span> <span class="token string">"Eric"</span>  ； 对象改值与添加一样的。注意： 读取对象中没有的属性，不会报错，而是undefined<span class="token operator">!</span>删除对象属性： <span class="token keyword">delete</span>  obj<span class="token punctuation">.</span>name</code></pre><pre class=" language-js"><code class="language-js">  对象属性名，属性值  对象属性名不强制要求遵守标识符规范，什么乱七八糟的命都可以，但还是尽量按标识符的规范去做。使用特殊属性名、语法，不能例如 obj<span class="token number">.123</span>正确写法： Obj<span class="token punctuation">[</span><span class="token string">"123"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">789</span>  <span class="token punctuation">;</span> obj<span class="token punctuation">[</span><span class="token string">"@#^%GK"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>使用<span class="token punctuation">[</span><span class="token punctuation">]</span>操作对象属性，更加灵活，<span class="token punctuation">[</span><span class="token punctuation">]</span>可传变量，例如<span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">,</span>这样可以随时更改， console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">  对象属性值  对象的属性值可以是任意的数据类型，甚至可以是一个对象。例如： <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      obj<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      obj<span class="token punctuation">.</span>test <span class="token operator">=</span> undefined<span class="token punctuation">;</span>      <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      obj<span class="token punctuation">.</span>test <span class="token operator">=</span> obj2  <span class="token comment" spellcheck="true">// 袋中袋</span>      对象中没有的属性不报错，而是undefined<span class="token punctuation">,</span>那么如何检查一个对象中是否有指定属性？console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test"</span> <span class="token keyword">in</span> obj <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 有返回true, 无返回false</span></code></pre><pre class=" language-js"><code class="language-js">   深浅拷贝   浅拷贝针对于引用数据类型（复杂数据类型Object （object<span class="token punctuation">,</span>array<span class="token punctuation">,</span> <span class="token keyword">function</span>））浅拷贝原因<span class="token punctuation">:</span> 只拷贝了堆空间地址，而未开辟新的内存空间，两处堆内存空间地址指向一处 堆内存空间。一处变化，另一个跟着变化。为什么叫引用数据类型？ 对象保存在堆空间当中，栈空间只保存了变量名和 <span class="token function">指向堆内存空间的地址，变量名和堆空间由地址建立联系。</span><span class="token punctuation">(</span>地址即引用<span class="token punctuation">)</span>每当<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>就在堆空间开辟了内存空间。两个堆内存空间，即使里面的值一模一样他们也不相同，因为空间地址不一样。<span class="token operator">**</span>基本数据类型直接在栈空间存储，变量值是对立存在的，修改一个值，对其他值没有任何影响。<span class="token operator">**</span><span class="token operator">*</span> 比较基本数据类型，比较的是值；（基本在栈中存<span class="token operator">-</span><span class="token operator">></span>值）    比较引用数据类型，比较的是空间地址。即便里面的东西一样但内存地址不一样，那还是不一样！（引用在栈中存<span class="token operator">-</span><span class="token operator">></span>空间地址）</code></pre><pre class=" language-js"><code class="language-js">  对象字面量  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">[</span>object object<span class="token punctuation">]</span>；使用<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 与<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 本质上一样；对象字面量的属性，引号可以不加，也建议不加，若使用奇怪的名，必须加！名和值用：分隔，多个属性用逗号隔开；</code></pre><h4 id="2-函数-（也是对象）"><a href="#2-函数-（也是对象）" class="headerlink" title="2. 函数 （也是对象）"></a>2. 函数 （也是对象）</h4><p><strong>除基本数据类型，剩下的都是对象</strong></p><pre class=" language-js"><code class="language-js">普通的对象只能装东西，而函数却还能封装一些功能，在需要时执行这些功能（代码）；封装的函数一定程度上简化了代码量；封装： 存起来，用的时候（调用）很简单；<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 将要封装的代码，以字符串形式传递给构造函数；<span class="token comment" spellcheck="true">// ??不太明白</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 封装的函数不会立即执行，调用时执行；<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 调用 <span class="token function">：fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ；调用时，函数中的代码以顺序执行；</code></pre><pre class=" language-js"><code class="language-js"><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>）创建一个对象<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 构造函数创建对象<span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// console.log(typeof fun ) "function"</span>补充<span class="token punctuation">:</span> fun<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hello"</span> 也是可以存在函数中的；函数拥有普通对象的一切功能，但比所有普通对象更强大！在开发中很少使用 （<span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>）构造函数创建对象；<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 使用函数声明创建一个函数<span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 套<span class="token punctuation">[</span><span class="token punctuation">]</span>表可选，写不写都行。<span class="token comment" spellcheck="true">// ??? 不太明白</span>构造函数创建对象与函数声明创建一个函数的区别及函数声明创建一个函数的优越性？<span class="token operator">...</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 使用函数表达式创建一个函数<span class="token keyword">let</span> fn1 <span class="token operator">=</span> <span class="token function">funtion</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>；funtion <span class="token function">fn2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token operator">+</span>b<span class="token punctuation">}</span> 相当于在函数内部声明变量  <span class="token keyword">var</span> a <span class="token punctuation">,</span><span class="token keyword">var</span> b 但未赋值，实参会赋值给函数中对应的形参；<span class="token function">调用函数，解析器不会检查实参类型；传数值会计算，fn2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span><span class="token function">传</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> 123hello<span class="token punctuation">;</span><span class="token function">传</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span>因此要注意是否会接收到不合法的参数，若有可能，最好对参数类型检查。</code></pre><pre class=" language-js"><code class="language-js">调函数，也不会检查实参数量，多余的实参不会被赋值，因为函数中只有a<span class="token operator">+</span>b，多传也是a<span class="token operator">+</span>b的结果；函数实参可以是任意数据类型；若实参数量少于形参，则没有对应实参的形参，将会是undefined<span class="token punctuation">,</span>funtion <span class="token function">fn2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token operator">+</span>b<span class="token punctuation">}</span>， a<span class="token operator">+</span>b结果为NAN；函数必须有返回值！<span class="token keyword">return</span> 将作为函数的执行结果返；<span class="token keyword">return</span>后的代码不再执行；<span class="token keyword">return</span> 后不写任何值，相当于返回undefined<span class="token punctuation">,</span> 同不写<span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">return</span> 后可以跟任意类型的值；例： <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">var</span> d <span class="token operator">=</span> a<span class="token operator">+</span>b <span class="token operator">+</span>c <span class="token keyword">return</span> d<span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 这样更加灵活，函数返回什么值，result结果就是什么；</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是函数<span class="token punctuation">;</span>函数实参可以是任何值，也可以是对象；参数过多，可以将参数封装到一个对象里，再通过 对象<span class="token punctuation">.</span>属性值拿值；<span class="token function">函数也可以作为函数的参数；fn</span><span class="token punctuation">(</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  相当于把函数的返回值放进去了；<span class="token function">fn</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span>相当于把函数放进去  （机器）<span class="token keyword">break</span>退出循环体，<span class="token keyword">for</span>停止；<span class="token keyword">return</span>结束函数；函数内部可无限声明函数；</code></pre><pre class=" language-js"><code class="language-js">函数的键值<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>自执行函数： <span class="token punctuation">(</span>往往只执行一次<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>对象属性值可为任何数据类型，亦可以是一个函数；<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"牛恒"</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>sayname <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">sayname</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 牛恒  (调方法)</span><span class="token function">sayname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调函数  ，这两种，只是叫法不一样，无本质区别</span>若函数作为对象的一个属性保存，那么就称 <span class="token operator">**</span><span class="token operator">*</span> 这个函数是这个对象的方法。调用函数就叫调用对象的方法（methods）。</code></pre><h4 id="3-枚举-（将对象的属性一个个取出）"><a href="#3-枚举-（将对象的属性一个个取出）" class="headerlink" title="3. 枚举 （将对象的属性一个个取出）"></a>3. 枚举 （将对象的属性一个个取出）</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用for in</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">"wind"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token string">"24"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 语法:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 有几个键，(打印几次),循环就会执行几次，每次执行都会将对象的属性赋值给变量 n</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// n = name 第一次</span><span class="token comment" spellcheck="true">// n = age 第二次</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 对象、函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ant-Design双向数据绑定及其他</title>
      <link href="2021/05/15/ant-design-shuang-xiang-shu-ju-bang-ding-ji-qi-ta/"/>
      <url>2021/05/15/ant-design-shuang-xiang-shu-ju-bang-ding-ji-qi-ta/</url>
      
        <content type="html"><![CDATA[<p>前提：</p><p>antd的表单Input，Selcet,多选check不像在Vue，数据与视图实时绑定，view刷新数据跟着变。</p><p>由于react是单向数据流，数据变化了才会同步到视图，因此需要另一种方式来实现。</p><p>举例Input:</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/**    **思路：**    给Input设置value、onChange属性，在onChange时修改兵保存value的值。同Select、checked。    如果一个onChange事件要一次修改保存多个Input、Select，checked。    可以在onChange事件函数中定义一个对象，传给onChange函数的参数再多出一个作为标识，    第二个值默认是改变后的====>最新值。*/</span>valueChange <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> valueChange <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    dataChange<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token comment" spellcheck="true">/**        ps：对象使用[]存键名，可存储特殊键名        例如obj["123"] = 789        obj["#@^%Gd"] = 666 都是正确的        这里使用obj[]就更加灵活    */</span>    <span class="token comment" spellcheck="true">/**       此处相当于将一条有键所对应的Input、Select，checked变化后的Value值存储到一个对象了    */</span>    <span class="token comment" spellcheck="true">// 那么每次在有一条数据的value发生变化的时候，重新修改这个对象即可！</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//*** 使用 hook</span><span class="token keyword">const</span> <span class="token punctuation">[</span>dataChange<span class="token punctuation">,</span> setDataChange<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>valueChange <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    dataChange<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token comment" spellcheck="true">//此时dataChange原值已被更改</span>    <span class="token comment" spellcheck="true">// 更新更改后的dataChange</span>    <span class="token function">setDataChange</span><span class="token punctuation">(</span>dataChange<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// view</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>     <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>dataChange<span class="token punctuation">.</span>inputs<span class="token punctuation">}</span></span>     <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">valueChange</span><span class="token punctuation">(</span><span class="token string">"inputs"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">// 使用 类式组件</span><span class="token keyword">export</span> defalut Class <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">{</span>    <span class="token function">cconstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            dataChange <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    valueChange <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> dataChange <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        dataChange<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> value          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dataChange<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// view</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>     <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>dataChange<span class="token punctuation">.</span>inputs<span class="token punctuation">}</span></span>     <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueChange</span><span class="token punctuation">(</span><span class="token string">"inputs"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre><p>其他：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/**   1) 防抖处理 背景：在做webscoket推送时，需要重新刷新页面，以体现实时更新的效果。 但是有个问题，webscoket推送太快后面页面会非常卡，刷新频率太快不利于用户操作，也影响美观 解决方法：（防抖）控制数据更新频率*/</span> <span class="token comment" spellcheck="true">// code</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">//借助闭包维护全局纯净</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>         <span class="token punctuation">}</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 简化写法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在调数据接口的地方调用 debounce（），传入请求数据接口的函数和希望延迟的时间</span></code></pre><p>相关资料地址：<a href="https://segmentfault.com/a/1190000018428170">https://segmentfault.com/a/1190000018428170</a></p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/**  2)   关于git为什么先pull   先pull 最后再push 的情况就是为了应对多人合并开发的情况*/</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/**  3) 问题：  在用到一个视频插件的地方给包裹它的元素position，给这个元素的父级realtive，  结果子元素不显示了，去除掉父级的realtive就能正常显示，此问题尚未解决，仍在思考中！  对于相对，绝对定位的理解有待加深。*/</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> antd  数据绑定  其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js总结</title>
      <link href="2021/05/10/js-zong-jie/"/>
      <url>2021/05/10/js-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>JS：布兰登艾奇发明</p><p>简称JS(javascript),与Java无本质关系</p><p>JS是ECMA的体现，ECMA是JS的规范</p><h4 id="什么是javascript-？"><a href="#什么是javascript-？" class="headerlink" title="什么是javascript ？"></a>什么是javascript ？</h4><p>基于对象和事件驱动的 解释性，程序设计脚本语言。</p><p>基于对象：暂时省略..</p><p>事件驱动： …</p><p>解释性：…</p><p>跨平台性：…</p><pre class=" language-tcl"><code class="language-tcl">JS语法以;结尾，不写也行，浏览器会自动添加，但会消耗系统资源。JS会忽略多个换行和空格，因此我们可以对代码进行优化。字面量：不可改变的值，用的较少；变量：可保存字面量，且可以改变。</code></pre><pre class=" language-tex"><code class="language-tex">标识符：JS中可自主命名的，都叫标识符。(变量名、函数名，属性名)1）标识符可含数字、字母、_,$;2）标识符不能以数字开头;3) 不能是ES中的关键字或保留字;4) JS中一般标识符使用驼峰命名;</code></pre><h4 id="数据类型（基本数据类型，引用数据类型）"><a href="#数据类型（基本数据类型，引用数据类型）" class="headerlink" title="数据类型（基本数据类型，引用数据类型）"></a>数据类型（基本数据类型，引用数据类型）</h4><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>基本数据类型number<span class="token punctuation">,</span>string<span class="token punctuation">,</span>boolean<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>undefined<span class="token number">2</span><span class="token punctuation">.</span>引用数据类型Object 包含 object、array<span class="token punctuation">,</span><span class="token keyword">function</span></code></pre><pre class=" language-js"><code class="language-js">string<span class="token punctuation">:</span>字符串需要使用<span class="token string">""</span>引起来，单双都可以；字符串使用 \ 作为转义符（转义作用：把一个东西以普通方式展现，不做过多处理，同正则转义）；在字符串中 \n 表示换行 （这是换行符？待定）  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"我爱你，\n娟"</span>；咋字符串中 \t 表示制表符，相当于按了tab键。</code></pre><h5 id="数据类型强制转换"><a href="#数据类型强制转换" class="headerlink" title="数据类型强制转换"></a><strong>数据类型强制转换</strong></h5><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">;</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span>    a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>不会影响原变量，有返回值；   <span class="token keyword">null</span><span class="token function">，undefined没有toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 函数； 将要转化的作为参数，s大写；   可将<span class="token keyword">null</span><span class="token punctuation">,</span>undefined加上<span class="token string">""</span><span class="token function">，转为字面量；相对于toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>可转<span class="token keyword">null</span><span class="token punctuation">,</span>undefined；<span class="token number">3</span><span class="token punctuation">.</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">;</span> 将要转的值放里面，空<span class="token string">' '</span>或 <span class="token string">'    '</span>里面加了空格转为<span class="token number">0</span>；   布尔值 <span class="token boolean">true</span> 转为 <span class="token number">1</span>， <span class="token boolean">false</span>转为 <span class="token number">0</span> ；   <span class="token keyword">null</span>类型为number，结果为 <span class="token number">0</span>；   undefined<span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span>，结果为NAN；</code></pre><p><strong>专门处理字符串的parseInt</strong></p><pre class=" language-js"><code class="language-js">a <span class="token operator">=</span> <span class="token string">"123px"</span> a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 123</span>parseInt将字符串中的整数内容取出；<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>取浮点型<span class="token operator">*</span>补充<span class="token operator">*</span> 对于非string类型使用parseInt会先转成string<span class="token punctuation">,</span>然后再操作，因此parseInt（<span class="token boolean">true</span>）结果会是NAN；<span class="token operator">**</span><span class="token function">相对于Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">可以转换带px</span><span class="token punctuation">(</span>单位的<span class="token punctuation">)</span>，但转有些值（<span class="token boolean">true</span>）并不太理想<span class="token operator">**</span>    <span class="token number">4</span><span class="token punctuation">.</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">;</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true;</span>   <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>   <span class="token function">Boolean</span><span class="token punctuation">(</span>Infinty<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>   <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>   <span class="token operator">**</span>总结：<span class="token operator">**</span>   数字，再除了<span class="token number">0</span>和<span class="token keyword">null</span>，都是<span class="token boolean">true</span><span class="token punctuation">;</span>   字符串除了空字符串<span class="token string">' '</span>，都是<span class="token boolean">true</span>。字符串里一个空格，也是<span class="token boolean">true</span><span class="token punctuation">;</span>   undefined是<span class="token boolean">false</span><span class="token punctuation">;</span>   转对象也是<span class="token boolean">true</span>。</code></pre><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token punctuation">)</span>就是一种运算符。算数运算符？<span class="token operator">+</span> <span class="token punctuation">:</span> <span class="token operator">+</span> 号是比较特殊的运算符，可做字符串拼接。  任何值 与 字符串 做拼接，都会把该值转为字符串，再拼接；  <span class="token operator">**</span><span class="token operator">*</span>可以使用  任意数据 <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">**</span><span class="token operator">*</span> 这种方法转为字符串串；  <span class="token operator">**</span><span class="token operator">*</span>在打印的时候，可以使用 <span class="token string">" c = "</span> <span class="token operator">+</span> c 的方式打印更佳！    <span class="token operator">-</span> <span class="token operator">/</span> <span class="token operator">*</span>   任何 值使用 <span class="token operator">-</span> <span class="token operator">/</span> <span class="token operator">*</span> 运算符时会将值转为number（隐式转换）  <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">**</span><span class="token operator">*</span> 可以用一个   字符串 <span class="token operator">-</span> <span class="token number">0</span> ，就转化为number<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "123" - 0</span>  <span class="token operator">-</span> 号可对值进行取反， <span class="token operator">-</span> 为number负值， <span class="token operator">+</span> 为正值；运算符优先级： 先乘除后加减，同数学。 <span class="token operator">||</span>  <span class="token operator">&amp;&amp;</span>   <span class="token operator">!</span>有一个优先级的表； 优先级一样，就从左往右算；</code></pre><h5 id="JS代码块：-只有分组作用"><a href="#JS代码块：-只有分组作用" class="headerlink" title="JS代码块： 只有分组作用"></a>JS代码块： 只有分组作用</h5><p>补充：质数(除了1和它本身之间的数，不能整除它本身，那它就是质数)</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 质数: 除了1和他本身，也就是从二开始到它之间的数，若都不能被这之间的数整除，该数是质数</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入一个大于1的数'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'非法！'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 被一个数整除</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token string">'是质数'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token string">"不是质数！"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法java初识</title>
      <link href="2021/05/06/suan-fa-java-chu-shi/"/>
      <url>2021/05/06/suan-fa-java-chu-shi/</url>
      
        <content type="html"><![CDATA[<p>递归：自己调自己，效率非常不好。使用递归测算可能会卡主程序，因为慢；</p><p>循环：速度很快，因为是异步进行的？</p><p>所谓算法，其实就是，比对各种不同测算结果的优劣，取最优！（以后再补充）</p><p>java 的函数需要在主函数main里调，out规定输出什么值；</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法、java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antdPopover的动态变色和动态visable</title>
      <link href="2021/05/05/antdpopover-de-dong-tai-bian-se-he-dong-tai-visable/"/>
      <url>2021/05/05/antdpopover-de-dong-tai-bian-se-he-dong-tai-visable/</url>
      
        <content type="html"><![CDATA[<h5 id="目的：-使用Popover制作动态的变色和控制Visable"><a href="#目的：-使用Popover制作动态的变色和控制Visable" class="headerlink" title="目的： 使用Popover制作动态的变色和控制Visable"></a>目的： 使用Popover制作动态的变色和控制Visable</h5><p>引入相关文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cxs <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Popover <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'../../iconfont/iconfont.css'</span><span class="token keyword">import</span> <span class="token string">"./popovers.css"</span><span class="token punctuation">;</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Popovers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>chooseIndex<span class="token punctuation">,</span> setChooseIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Rose"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Mary"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Lucy"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">28</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">29</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Bruce"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">27</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Tian"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"JuDiao"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Niuheng"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">31</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"KaiDi"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Haohao"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Wind"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span>  <span class="token keyword">const</span> closeList <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">)</span>    <span class="token function">setChooseIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 每次关闭也会重新return？ 渲染的是全部视图还是局部视图</span>    <span class="token comment" spellcheck="true">// stopPropagation 阻止事件冒泡</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> renderContent <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 函数组件的函数，还必须const</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'content-wrap'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">"content-top"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'content-top-left'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Name<span class="token punctuation">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token operator">&lt;</span>div         onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 此处必须阻止冒泡事件，否则会触发父元素的点击事件，导致子元素的点击事件点击了但是没效果</span>          <span class="token function">closeList</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// ***这是因为事件冒泡触发父元素点击对值重新赋值了***</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>        className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'content-top-right'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon</span> <span class="token attr-name">iconfont"</span><span class="token punctuation">></span></span><span class="token entity" title="&#xe607;">&amp;#xe607;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">"content-bottom"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Have a good nice Day <span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> changeColorAndIndex <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(item, index)</span>    <span class="token comment" spellcheck="true">// console.log('changeIndex')</span>    <span class="token function">setChooseIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 中间值与下标相等了 ，完成了两件事，被点击元素变色，被点击元素的pop显示，其他不显示！</span>  <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'wrap'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>点名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div         key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span>        id<span class="token operator">=</span><span class="token string">'item-info'</span>            className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"activeIndex"</span><span class="token punctuation">:</span> chooseIndex <span class="token operator">===</span> index<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//1. 若类名与中间值相等，就出现变化的背景色</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token function">changeColorAndIndex</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//3.  使中间值和下标相等的事件。触发器</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span>Popover          content<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">renderContent</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span>          trigger<span class="token operator">=</span><span class="token string">"click"</span>          getPopupContainer<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"item-info"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 绑定渲染父级</span>          visible<span class="token operator">=</span><span class="token punctuation">{</span>chooseIndex <span class="token operator">===</span> index<span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//2. 同理，若下标和中间值相同就显示</span>        <span class="token operator">></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">"item-onfo1"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'item-info-left'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'item-info-right'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Popover</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Popovers</code></pre><h5 id="关于为什么popover要绑定父级"><a href="#关于为什么popover要绑定父级" class="headerlink" title="关于为什么popover要绑定父级"></a>关于为什么popover要绑定父级</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// popover的默认渲染父级是body ，这在有些时候会出问题，例如元素错位(当然在目前看来是没有问题的，为了严谨)</span>getPopupContainer<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"item-info"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="css"><a href="#css" class="headerlink" title="css:"></a>css:</h5><pre class=" language-css"><code class="language-css"><span class="token selector">// 给父级元素相对定位，高度// 给子元素向左的距离<span class="token class">.ant-popover</span> </span><span class="token punctuation">{</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">415</span>px  <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover-arrow</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none  <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover-inner-content</span></span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">270</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="完整css"><a href="#完整css" class="headerlink" title="完整css"></a>完整css</h6><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.wrap</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">900</span>px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header</span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* text-align: center; */</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> seagreen<span class="token punctuation">;</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#item-info</span></span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">16</span>px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.activeIndex</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#cccccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-onfo1</span></span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">11</span>px <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#cccccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-info-left</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-info-right</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover</span> </span><span class="token punctuation">{</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">415</span>px  <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover-arrow</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none  <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover-inner-content</span></span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">270</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* content */</span><span class="token selector"><span class="token class">.content-wrap</span></span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">14</span>px <span class="token number">16</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top</span></span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-bottom</span></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* less 预编译  要  calc(~"100% - 50px") */</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span> - <span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-left</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-left</span> p</span><span class="token punctuation">{</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-left</span> h1</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> crimson<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-right</span> </span><span class="token punctuation">{</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-right</span> i </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-bottom</span> h2</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> dodgerblue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> aned Popover </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AutoComplute制作模糊搜索</title>
      <link href="2021/05/05/autocomplute-zhi-zuo-mo-hu-sou-suo/"/>
      <url>2021/05/05/autocomplute-zhi-zuo-mo-hu-sou-suo/</url>
      
        <content type="html"><![CDATA[<h5 id="1-引入React-useState-classnames插件，引出Option"><a href="#1-引入React-useState-classnames插件，引出Option" class="headerlink" title="1. 引入React, useState classnames插件，引出Option"></a>1. 引入React, useState classnames插件，引出Option</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cxs <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AutoComplete <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./dimserch.css'</span><span class="token keyword">const</span> <span class="token punctuation">{</span> Option <span class="token punctuation">}</span> <span class="token operator">=</span> AutoComplete</code></pre><p><strong>思路</strong> ：</p><p>将一份数据存两遍，一份用于渲染，一份用于查找。</p><p>由于传入的  搜索值(serch)或是 变化值(onChange)的值若是空字符串，那么只需在另一份保存的数据中查找就可以了；</p><pre class=" language-js"><code class="language-js">filter，用list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 第一种写法  1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>includes<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>   <span class="token comment" spellcheck="true">// 若item包含传入值，返回此对象</span>      <span class="token comment" spellcheck="true">//第二种写法   2</span>  <span class="token comment" spellcheck="true">// const regex = new RegExp(val)</span>  <span class="token comment" spellcheck="true">// if(regex.test(item)) return true</span>  <span class="token keyword">return</span> <span class="token boolean">false</span> 其他情况不返回！<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">DimSerch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> list <span class="token operator">=</span>    <span class="token punctuation">[</span>      <span class="token string">"双皮奶"</span><span class="token punctuation">,</span> <span class="token string">"狮子头"</span><span class="token punctuation">,</span> <span class="token string">"擀面皮"</span><span class="token punctuation">,</span> <span class="token string">"巧克力蛋糕"</span><span class="token punctuation">,</span>         <span class="token string">"热米皮"</span><span class="token punctuation">,</span> <span class="token string">"牛肉面"</span><span class="token punctuation">,</span> <span class="token string">"二细牛肉面"</span><span class="token punctuation">,</span> <span class="token string">"三细牛肉面"</span><span class="token punctuation">,</span>      <span class="token string">"扬州炒饭"</span><span class="token punctuation">,</span> <span class="token string">"蛋炒饭"</span><span class="token punctuation">,</span> <span class="token string">"蛋炒土豆丝"</span><span class="token punctuation">,</span> <span class="token string">"巧克力饼"</span><span class="token punctuation">,</span>        <span class="token string">"狮子头拌奶酪"</span><span class="token punctuation">,</span> <span class="token string">"火腿擀面皮"</span><span class="token punctuation">,</span> <span class="token string">"加量擀面皮"</span><span class="token punctuation">,</span>      <span class="token string">"热米皮拌青椒"</span><span class="token punctuation">,</span> <span class="token string">"双皮奶加量"</span><span class="token punctuation">,</span> <span class="token string">"海之言"</span><span class="token punctuation">,</span> <span class="token string">"蓝色海之言"</span><span class="token punctuation">,</span>         <span class="token string">"紫色海之言"</span><span class="token punctuation">,</span> <span class="token string">"橘黄海之言"</span><span class="token punctuation">,</span> <span class="token string">"绿色海之言"</span><span class="token punctuation">,</span>      <span class="token string">"百吉猫锅巴"</span><span class="token punctuation">,</span> <span class="token string">"三元锅巴"</span><span class="token punctuation">,</span> <span class="token string">"酥锅巴"</span><span class="token punctuation">,</span> <span class="token string">"AD钙"</span><span class="token punctuation">,</span> <span class="token string">"乳酸菌AD钙"</span><span class="token punctuation">,</span>         <span class="token string">"草莓AD钙"</span><span class="token punctuation">,</span> <span class="token string">"香辣火腿肠"</span><span class="token punctuation">,</span> <span class="token string">"玉米火腿肠"</span>    <span class="token punctuation">]</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>realyDatas<span class="token punctuation">,</span> setRealyDatas<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>originList<span class="token punctuation">,</span> setoriginList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>  <span class="token keyword">const</span> handleSearch <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// const regex = new RegExp(val)  // 定义规则(传入值);若val是空字符串，</span>                                      <span class="token comment" spellcheck="true">// 那么所有被检验元素都包含''，</span>       <span class="token comment" spellcheck="true">/**         *** 注意： 在使用正则regex.test(item)有时会在搜索框 的值包含()，         删去一个时报错，提示不是有效的正则，而includes不会报这个错。      */</span>            <span class="token comment" spellcheck="true">// 也就是说，此时返回被遍历对象的所有（每一项）;</span>    <span class="token keyword">let</span> newArray <span class="token operator">=</span> originList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// if (regex.test(item)) {      // 若每一项包含所定义规则；所有字符都包含空字符串；</span>      <span class="token comment" spellcheck="true">//   return true                // 就返回这个对象</span>      <span class="token comment" spellcheck="true">// }</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// item包含输入的值，返回此对象；其他情况false不返回</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setRealyDatas</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 更新渲染数组； 重新渲染</span>  <span class="token punctuation">}</span>    <span class="token keyword">const</span> autoChange <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 关于是否只需要一个这样的函数，待定</span>    <span class="token comment" spellcheck="true">// const regex = new RegExp(val)</span>    <span class="token keyword">let</span> newArray <span class="token operator">=</span> originList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// if (regex.test(item)) {</span>      <span class="token comment" spellcheck="true">//   return true</span>      <span class="token comment" spellcheck="true">// }</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setRealyDatas</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>wrap<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AutoComplete</span>        <span class="token attr-name">getPopupContainer</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"wrap"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>        <span class="token attr-name">onSearch</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleSearch<span class="token punctuation">}</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>autoChange<span class="token punctuation">}</span></span>        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">/**          在渲染时如果数据量过大，搜索框会出现卡顿          因此不能直接渲染全部数据                    补充：这里截取数组 为什么使用了slice 而不是 splice?          splice操作原数组，而slice不会操作原数组，使用splice 数据会自动删，          如果有2003条数据，那么最后只会剩下3条数据！          原因： 一份数据存了两份，操作一份数据会影响另一份数据！这是浅拷贝的问题，          slice不影响原数组，所以数据不会变少。在多数情况下，建议不要操作原数据。       */</span>        <span class="token punctuation">{</span><span class="token punctuation">(</span>realyDatas<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">30</span>           <span class="token operator">?</span> realyDatas<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>           <span class="token punctuation">:</span> realyDatas<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Option</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            <span class="token punctuation">{</span>item<span class="token punctuation">}</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Option</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AutoComplete</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> DimSerch</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 模糊搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="2021/04/30/sui-bi/"/>
      <url>2021/04/30/sui-bi/</url>
      
        <content type="html"><![CDATA[<h4 id="4-10-4-16-report"><a href="#4-10-4-16-report" class="headerlink" title="4.10-4.16 report"></a>4.10-4.16 report</h4><h5 id="1-Object-keys-obj-传入对象，返回属性名"><a href="#1-Object-keys-obj-传入对象，返回属性名" class="headerlink" title="1) Object.keys(obj)  // 传入对象，返回属性名"></a>1) Object.keys(obj)  // 传入对象，返回属性名</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">"上午"</span><span class="token punctuation">,</span>list<span class="token punctuation">:</span><span class="token string">"333"</span><span class="token punctuation">,</span> dance<span class="token punctuation">:</span><span class="token string">"巴克勒"</span><span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (3) ["type", "list", "dance"]  返回键名，但并没有吃掉属性值</span></code></pre><h5 id="2-classList添加类名"><a href="#2-classList添加类名" class="headerlink" title="2) classList添加类名"></a>2) classList添加类名</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> bot <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'bot'</span><span class="token punctuation">)</span>bot<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'niuheng'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// console.log(bot.classList.contains('niuheng')) // true</span></code></pre><h5 id="3）-map的参数"><a href="#3）-map的参数" class="headerlink" title="3） map的参数"></a>3） map的参数</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"类型"</span><span class="token punctuation">,</span> <span class="token string">"影响"</span><span class="token punctuation">,</span> <span class="token string">"距离"</span><span class="token punctuation">,</span> <span class="token string">"推荐"</span><span class="token punctuation">,</span> <span class="token string">"预计"</span><span class="token punctuation">]</span>     array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// console.log(item+'x', index, arr)</span>        <span class="token comment" spellcheck="true">// 类型x 0 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>        <span class="token comment" spellcheck="true">// VM22:3 影响x 1 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>        <span class="token comment" spellcheck="true">// VM22:3 距离x 2 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>        <span class="token comment" spellcheck="true">// VM22:3 推荐x 3 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>        <span class="token comment" spellcheck="true">// VM22:3 预计x 4 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>         <span class="token keyword">return</span> item<span class="token operator">+</span><span class="token string">'x'</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// (5) ["类型x", "影响x", "距离x", "推荐x", "预计x"]</span></code></pre><h5 id="4-Array-from"><a href="#4-Array-from" class="headerlink" title="4) Array.from()"></a>4) Array.from()</h5><h6 id="Array-from-将一个类数组对象或可遍历对象转化为一个真正的数组"><a href="#Array-from-将一个类数组对象或可遍历对象转化为一个真正的数组" class="headerlink" title="Array.from()将一个类数组对象或可遍历对象转化为一个真正的数组"></a>Array.from()将一个类数组对象或可遍历对象转化为一个真正的数组</h6><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">9797</span><span class="token punctuation">,</span><span class="token number">564</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">45642</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [[Entries]]</span>        <span class="token comment" spellcheck="true">// 0: 12</span>        <span class="token comment" spellcheck="true">// 1: 45</span>        <span class="token comment" spellcheck="true">// 2: 97</span>        <span class="token comment" spellcheck="true">// 3: 9797</span>        <span class="token comment" spellcheck="true">// 4: 564</span>        <span class="token comment" spellcheck="true">// 5: 134</span>        <span class="token comment" spellcheck="true">// 6: 45642</span>        <span class="token comment" spellcheck="true">// size: 7,</span><span class="token comment" spellcheck="true">// 可以看到set不是一个数组，它看起来想一个对象，却又不是一个对象</span><span class="token comment" spellcheck="true">// console.log( Array.from(set))  // [12, 45, 97, 9797, 564, 134, 45642]</span></code></pre><h6 id="Array-from-还可将NodeList-转为真正的数组。"><a href="#Array-from-还可将NodeList-转为真正的数组。" class="headerlink" title="Array.from()还可将NodeList  转为真正的数组。"></a>Array.from()还可将NodeList  转为真正的数组。</h6><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> abc <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过getElementsByTagName获取的元素不是一个数组，而是nodeList</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">,</span>abc<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 使用Array.from()</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Array.form'</span><span class="token punctuation">,</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[a, a, a, a, a, a, a, a]</span><span class="token comment" spellcheck="true">//第二种方法转化</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 这种方式新建数组很新颖</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> abc<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> ele <span class="token operator">=</span> abc<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [a, a, a, a, a, a, a, a]</span></code></pre><h5 id="5-合并对象-assign"><a href="#5-合并对象-assign" class="headerlink" title="5) 合并对象 assign"></a>5) 合并对象 assign</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>config<span class="token punctuation">,</span> <span class="token punctuation">{</span> key<span class="token punctuation">:</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="6）writing-mode"><a href="#6）writing-mode" class="headerlink" title="6）writing-mode"></a>6）writing-mode</h5><p>文字垂直显示</p><pre class=" language-css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">writing-mode</span><span class="token punctuation">:</span> vertical-lr<span class="token punctuation">}</span></code></pre><h5 id="7）getAttribute-setAttribute"><a href="#7）getAttribute-setAttribute" class="headerlink" title="7）getAttribute\setAttribute"></a>7）getAttribute\setAttribute</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> pp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>pp<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-event'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 添加属性</span><span class="token keyword">let</span> hasEvent <span class="token operator">=</span> pp<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-event'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取对应键名对应的属性值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hasEvent<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><h5 id="8）Object-prototype-toString-call"><a href="#8）Object-prototype-toString-call" class="headerlink" title="8）Object.prototype.toString.call()"></a>8）Object.prototype.toString.call()</h5><h6 id="用Object-prototype-toString-call-obj-检测对象类型"><a href="#用Object-prototype-toString-call-obj-检测对象类型" class="headerlink" title="用Object.prototype.toString.call(obj)检测对象类型"></a>用Object.prototype.toString.call(obj)检测对象类型</h6><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Eric'</span><span class="token punctuation">,</span><span class="token string">'Mary'</span><span class="token punctuation">,</span><span class="token string">'Rose'</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Array]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'Eric'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object String]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// [object Number]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// [object Boolean]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Undefined]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Null]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"julius"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Object]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Function]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// [object Array]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Date]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token regex">/^\[.*\]$/</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object RegExp]</span></code></pre><h6 id="判断数据类型-gt-函数调用"><a href="#判断数据类型-gt-函数调用" class="headerlink" title="判断数据类型====&gt;函数调用"></a>判断数据类型====&gt;函数调用</h6><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> isNumber <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>  Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Number]'</span>  <span class="token comment" spellcheck="true">// 字符串怎么能是true呢？</span>    <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><h5 id="9）引入iconfont字体图标"><a href="#9）引入iconfont字体图标" class="headerlink" title="9）引入iconfont字体图标"></a>9）引入iconfont字体图标</h5><p>下载好并放入，import ‘./iconfont/iconfont.css’</p><pre class=" language-html"><code class="language-html">// 使用：第一种方法 =>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">*className*</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-zanting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">// 第二种方法 => <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon iconfont<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#xe635;">&amp;#xe635;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git操作</title>
      <link href="2021/04/30/git-cao-zuo/"/>
      <url>2021/04/30/git-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h4 id="git-操作"><a href="#git-操作" class="headerlink" title="git 操作"></a>git 操作</h4><pre class=" language-jsx"><code class="language-jsx">git init <span class="token comment" spellcheck="true">// (在github新建远程仓库，将一个文件使用此命令初始化，然后按照提示操作。)</span>git add <span class="token punctuation">.</span>git commit <span class="token operator">-</span>m git push <span class="token comment" spellcheck="true">// (若从远程上来下来，并切换了分支，那么可直接git push 就能将本地最新代码push到远程对应的这个分支上去)</span>git checkout  <span class="token comment" spellcheck="true">// 分支名 (已在远程对应的分支上，可使用此命令切换到其他远程分支)</span>git checkout <span class="token operator">-</span>b <span class="token comment" spellcheck="true">// 分支名 (创建本地分支)</span>git branch <span class="token operator">-</span>a <span class="token comment" spellcheck="true">// (查看所有分支，本地and远程)</span>git branch <span class="token comment" spellcheck="true">// (查看本地分支)</span>git push <span class="token operator">--</span><span class="token keyword">set</span><span class="token operator">-</span>upstream origin 本地分支名 <span class="token comment" spellcheck="true">// (将本地分支推到远程仓库，使远程仓库下有该分支名)</span>git pull origin develop <span class="token comment" spellcheck="true">// (拉取对应远程分支的代码)</span>git reset <span class="token operator">--</span>hard commmit代码 <span class="token comment" spellcheck="true">// (回退到指定版本)</span>git commit <span class="token operator">--</span>no<span class="token operator">-</span>verify <span class="token operator">-</span>m <span class="token comment" spellcheck="true">// 跳过校验提交</span>git merge <span class="token comment" spellcheck="true">// (用于将分支代码合并至主分支)</span><span class="token comment" spellcheck="true">// 先将自己的分支 add . commit  push 完毕， 再切换到master分支 ，</span><span class="token comment" spellcheck="true">// 使用 git merge 你的分支 命令将自己分支上的代码合并至主分支 。</span><span class="token comment" spellcheck="true">// 最后psuh 主分支代码</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组过滤undefined</title>
      <link href="2021/04/30/shu-zu-guo-lu-undefined/"/>
      <url>2021/04/30/shu-zu-guo-lu-undefined/</url>
      
        <content type="html"><![CDATA[<h5 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h5><p>我们在传递数据的时候，很多时候数据是一个数组，而又有些时候我们并不需要将整个数组传递过去，而是传递数组中的前几个对象；</p><p>这时就可以现在这样： method([list[0],list[1],list[2,list[3]])；</p><p>(调用父组件传递过来的函数，发送一个数组)；</p><p><strong>问题：数据都是调用后端接口得来的，而数据这个东西，有时候多，有时候少，多的时候就不说了，反正我们时以下标这样取得，怎么传也只有三条数据，但是数据少的时候问题就来了；</strong></p><p>什么问题呢？ 通过像这样传递的数据 method([list[0],list[1],list[2,list[3]])，<strong>如果数据一旦少于三条。也就是说如果调接口之得到一条数据</strong>，但是你这样通过下标传递数据, 那么发送过去的这个数组后两个必定是undefined!</p><p>将undefined发送给其他需要的组件，那么是极有可能出问题的，因此我们需要对数据进行处理：<strong>在数据为undefined时不发送数据！</strong></p><p>哪怕我只发送过去一条实际存在的数据，也不发送undefined,可以少传，可以不传，但不可以发undefined!</p><p>试了很多种方法，例如：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// list是我们要发送的数组</span><span class="token comment" spellcheck="true">// 将list 遍历</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>datas<span class="token punctuation">,</span> setDatas<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mydatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> list <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token operator">...</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">&amp;&amp;</span> item<span class="token operator">!==</span> undefined <span class="token operator">||</span> item <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> item <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [{item},undefined,undefined] 结果依然没有发生变化,依然发送的是undefined</span>    <span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">[</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p>解决：</p><pre class=" language-js"><code class="language-js"><span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">[</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 返回的新数组种没有undefined！！！</span><span class="token comment" spellcheck="true">// success</span></code></pre><p>原因：经过filter后会自动去掉undefined、null,空字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token string">'3.jpg'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span>、<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">]</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>VM23<span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3.jpg"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 可以看到undefined、null、"" 被去除了</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数组过滤undefined、null，&#39;&#39; </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件冒泡的影响，两种hook</title>
      <link href="2021/04/28/shi-jian-mou-pao-de-ying-xiang-liang-chong-hook/"/>
      <url>2021/04/28/shi-jian-mou-pao-de-ying-xiang-liang-chong-hook/</url>
      
        <content type="html"><![CDATA[<h5 id="1-多个元素嵌套设有多个点击事件，最下级的元素触发点击事件可能发生冒泡情况。"><a href="#1-多个元素嵌套设有多个点击事件，最下级的元素触发点击事件可能发生冒泡情况。" class="headerlink" title="1. 多个元素嵌套设有多个点击事件，最下级的元素触发点击事件可能发生冒泡情况。"></a>1. 多个元素嵌套设有多个点击事件，最下级的元素触发点击事件可能发生冒泡情况。</h5><p><strong>冒泡</strong>：点击子元素的  点击事件， 会同时触发父组件的点击事件；</p><p><strong>在多个嵌套元素设置多个点击事件，极有可能发生此类问题！</strong></p><p>关于冒泡带来的问题，例如：    </p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 在一个元素的父级 定义一个点击事件    // 在这个事件中定义一种状态或者是下标，</span><span class="token keyword">function</span> <span class="token function">Cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>chooseIndex<span class="token punctuation">,</span> setChooseIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>    <span class="token operator">...</span>       changeIndex <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 父级元素的点击事件</span>        <span class="token function">setChooseIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// setChooseIndex改变初始值后  是必定会引发视图更新的！！</span>    <span class="token punctuation">}</span>    closeStatus <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 子节点的点击事件</span>       <span class="token function">setChooseIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 默认传空，chooseIndex 便不再等于index，但是visable 却没有关闭</span>   <span class="token punctuation">}</span>                       <span class="token comment" spellcheck="true">// 在useEffect 和 reuturn打印发现值还是上一次的，也就是没有被改变</span>    <span class="token punctuation">{</span>dataList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// ****原因是因为，子元素每次closeStatus时都重新触发了changeIndex事件，因此closeStatus的值怎么都改不过来****</span>    <span class="token comment" spellcheck="true">// **** 阻止事件冒泡即可</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span>        <span class="token operator">...</span>    <span class="token operator">...</span>         <span class="token comment" spellcheck="true">// 当chooseIndex == index 时，会出现两个效果，点击每一个变色；popver单个visable 属性true</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">classname</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'list-wrap'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"activeItemClass"</span> <span class="token punctuation">:</span> chooseIndex <span class="token operator">===</span> index<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>     <span class="token operator">&lt;</span>Popver      content <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token function">renderContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>     visable<span class="token operator">=</span><span class="token punctuation">{</span>chooseIndex <span class="token operator">===</span> index<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 当chooseIndex === index，即成立时，visable为true</span>     <span class="token operator">></span>                                <span class="token comment" spellcheck="true">// visable 在不成立，值不存在的情况下为false  例如： item.visable不存在为          false</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">changeIndex</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Popver</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>       renderContent <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token operator">...</span>        <span class="token operator">...</span>        <span class="token operator">&lt;</span>div         onClick <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 阻止事件冒泡</span>                <span class="token function">closeStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2 . 补充：   useEffect 、useState</p><pre class=" language-tex"><code class="language-tex">useEffect 函数在  函数组件是可以多次定义的，这样的好处是：各放各的，不至于在有的状态和一个开关的值发生变化时，因为空数组传了值而重新调用useEffect 里面请求接口数据的函数，造成多次请求，严重影响页面性能。</code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 而定义的  </span><span class="token keyword">const</span> <span class="token punctuation">[</span>content<span class="token punctuation">,</span> setContnet<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 在set后是一定会重新刷新页面的，就像类的this.setSate({})也会重新调用render函数，重新刷新页面。</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 事件冒泡、hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决OpenSSL报错</title>
      <link href="2021/04/27/jie-jue-openssl-bao-cuo/"/>
      <url>2021/04/27/jie-jue-openssl-bao-cuo/</url>
      
        <content type="html"><![CDATA[<p>首先，这个错误很可能是网络不稳定，连接超时导致的；</p><h5 id="若再次尝试依然报错，可输入如下命令"><a href="#若再次尝试依然报错，可输入如下命令" class="headerlink" title="若再次尝试依然报错，可输入如下命令"></a>若再次尝试依然报错，可输入如下命令</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ps ：在 hexo g 后输入效果更佳</span>git config <span class="token operator">--</span>global http<span class="token punctuation">.</span>sslVerify <span class="token string">"false"</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Git报错解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css磨砂效果，模糊效果</title>
      <link href="2021/04/27/css-mo-sha-xiao-guo-mo-hu-xiao-guo/"/>
      <url>2021/04/27/css-mo-sha-xiao-guo-mo-hu-xiao-guo/</url>
      
        <content type="html"><![CDATA[<p>要点：给需要磨砂的div(设rgba的那个元素) =&gt; 设置伪元素；</p><p>给伪元素content: ‘’、绝对定位，四处为0,left：0….</p><p>给伪元素一样的背景图，并给z-index: -1 、给自身z-index:1 ***重要，必须给！</p><p>最后给 伪元素 filter: blur(37px); 属性值，效果就出来了。</p><pre class=" language-css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(./heroheart.jpg)</span><span class="token punctuation">;</span>   <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#app</span></span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">370</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#app</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(./heroheart.jpg)</span><span class="token punctuation">;</span><span class="token property">background-size</span><span class="token punctuation">:</span>cover <span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span><span class="token number">37</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">28</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFFFFF</span><span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>时间带走了回不去的青春，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>却带不走我一往无前的心！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>世间万物，万般困难、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>能耐我何？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> css 磨砂，模糊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/25/hello-world/"/>
      <url>2021/04/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
