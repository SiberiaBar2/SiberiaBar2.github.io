<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>uniapp问题总结</title>
      <link href="2022/04/30/uniapp-wen-ti-zong-jie/"/>
      <url>2022/04/30/uniapp-wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="uniapp问题总结"><a href="#uniapp问题总结" class="headerlink" title="uniapp问题总结"></a>uniapp问题总结</h5><h6 id="引入u-view"><a href="#引入u-view" class="headerlink" title="引入u-view"></a>引入u-view</h6><pre class=" language-tex"><code class="language-tex">1. 安装：   选择HBuilderX -----> 工具 -----> 插件市场 ----->    搜索u-view UI, 选择用HBuilderX安装。   安装完之后将uni-modules里的u-view拖出来，放入项目根目录。   虽然引入ui有很多种方式，但还是推荐这种引入方式。  </code></pre><pre class=" language-js"><code class="language-js"><span class="token number">2</span><span class="token punctuation">.</span> 配置 <span class="token comment" spellcheck="true">// 1. main.js</span>  <span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span>  <span class="token keyword">import</span> uView <span class="token keyword">from</span> <span class="token string">"uview-ui"</span><span class="token punctuation">;</span>  Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>uView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*  *  * 2. uni.scss  引入uView的全局SCSS主题文件   *  *  在项目根目录的uni.scss中引入此文件。  */</span>  @<span class="token keyword">import</span> <span class="token string">'uview-ui/theme.scss'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 3. 引入uView基础样式</span>  <span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span><span class="token operator">></span>          <span class="token comment" spellcheck="true">/* 注意要写在第一行，同时给style标签加入lang="scss"属性 */</span>    @<span class="token keyword">import</span> <span class="token string">"uview-ui/index.scss"</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 4. 配置easycom组件模式</span>  <span class="token comment" spellcheck="true">// pages.json</span>  <span class="token comment" spellcheck="true">// uni-app为了调试性能的原因，修改easycom规则不会实时生效，</span>  <span class="token comment" spellcheck="true">// 配置完后，您需要重启HX或者重新编译项目才能正常使用uView的功能。</span>  <span class="token comment" spellcheck="true">//请确保您的pages.json中只有一个easycom字段，否则请自行合并多个引入规则。</span>  <span class="token punctuation">{</span>    <span class="token string">"easycom"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 下载安装的方式需要前面的"@/"，npm安装的方式无需"@/"</span>            <span class="token comment" spellcheck="true">// 下载安装方式 (1)</span>      <span class="token string">"^u-(.*)"</span><span class="token punctuation">:</span> <span class="token string">"@/uview-ui/components/u-$1/u-$1.vue"</span>            <span class="token comment" spellcheck="true">// npm方式下载的引用 (2)</span>            <span class="token comment" spellcheck="true">//"^u-(.*)": "uview-ui/components/u-$1/u-$1.vue"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 此为本身已有的内容</span>    <span class="token string">"pages"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// ......</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* 注意点：  * * 第二种引入方式 为npm下载方式的引用，但是微信开发者工具并没有npm构建， * * 找不到 u-button 所以就会出现 ...之类的报错， * * 解决方法就是给路径前加@/, *  * 采用下载安装方式。 *  * 遂解！ */</span>参考资料：       <span class="token comment" spellcheck="true">// u-view在微信开发者平台报错解决</span>   https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>weixin_46231579<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">120913279</span>   <span class="token comment" spellcheck="true">// u-view引入配置</span>      https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>tags<span class="token operator">/</span>MtTaEg0sMTEzODQyLWJsb2cO0O0O<span class="token punctuation">.</span>html</code></pre><h6 id="引入多个组件-与-动态组件-配合使用"><a href="#引入多个组件-与-动态组件-配合使用" class="headerlink" title="引入多个组件 与 动态组件 配合使用"></a>引入多个组件 与 动态组件 配合使用</h6><pre class=" language-js"><code class="language-js">        <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category-content"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category-left"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>view v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item,index) in tabPane"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">'item.key'</span>                         <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'tab-panes'</span> @click<span class="token operator">=</span><span class="token string">'changeTabpane(item, index)'</span>                         <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"{'chooseIndex': item.key === chooseIndex}"</span><span class="token operator">></span>                      <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>            <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category-right"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>component <span class="token punctuation">:</span>is<span class="token operator">=</span><span class="token string">'changePriview'</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"changeComponent"</span><span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>       <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"js"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        TAB_PANE    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./constants.js'</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> RenderContent <span class="token keyword">from</span> <span class="token string">'./renderContent/renderContent.vue'</span>    <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> files <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'./categoryCommon'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex">/.vue$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    files<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> name <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">files</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">||</span> <span class="token function">files</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token operator">...</span>modules<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                tabPane<span class="token punctuation">:</span> TAB_PANE<span class="token punctuation">,</span>                chooseIndex<span class="token punctuation">:</span> <span class="token string">'HomePriview'</span><span class="token punctuation">,</span>                changeCom<span class="token punctuation">:</span> modules            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">changeTabpane</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>chooseIndex <span class="token operator">=</span> val<span class="token punctuation">.</span>key<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>       <span class="token function">changePriview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>changeCom<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>chooseIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 打包时uniapp提示不支持动态组件，</span><span class="token comment" spellcheck="true">// 如何能像动态组件一样有相同的效果？</span><span class="token comment" spellcheck="true">// render 、jsx</span><span class="token comment" spellcheck="true">// 新建一个组件，它将起到像 component 那样的中转作用</span><span class="token comment" spellcheck="true">// renderContent.vue</span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        props<span class="token punctuation">:</span> <span class="token punctuation">{</span>            changeCom<span class="token punctuation">:</span> <span class="token punctuation">{</span>                type<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>                <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            chooseIndex<span class="token punctuation">:</span> <span class="token punctuation">{</span>                type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>                <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'HomePriview'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'天启帝君'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">autoChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'瀚宇星皇'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">getNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Vue render函数内部可以访问整个实例上(整个export default {}内部)的变量</span>            <span class="token comment" spellcheck="true">// (data上的)和方法(methods上的)</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">autoChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this.name'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'this.getNums'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getNums<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 在render中，计算属性中的方法同样不用加 () 直接可以获得值，</span>                  <span class="token comment" spellcheck="true">// 计算属性能用，watch在render函数中也可以良好使用</span>                  <span class="token keyword">let</span> Renderview <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>changeCom<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>chooseIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">&lt;</span>view <span class="token operator">></span>                <span class="token operator">&lt;</span>Renderview <span class="token operator">/</span> <span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 第二种render render(h) h 是一个渲染函数，会返回一个虚拟dom</span>        <span class="token function">render</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Vue render函数内部可以访问整个实例上(整个export default {}内部)的变量*</span>            <span class="token comment" spellcheck="true">// (data上的)和方法(methods上的)</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">autoChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 计算属性中的方法不用加() 直接可以获得值，</span>                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this.name'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'this.getNums'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getNums<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// console.log('this.changeCom', this.changeCom, 'chooseIndex', this.chooseIndex)</span>                  <span class="token comment" spellcheck="true">// 计算属性能用，watch在render函数中也可以良好使用</span>                  <span class="token keyword">let</span> renderview <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>changeCom<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>chooseIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>renderview<span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 然而这两种方式在小程序中都不支持，</span>          <span class="token comment" spellcheck="true">// 第一种 return 一个元素的方式 (&lt;/>)，uniapp打包时就会报错，</span>     <span class="token comment" spellcheck="true">// 第二种 因为没有模板，在小程序无法生成wxml, home 找不到 renderContent.wxml ，</span>           <span class="token comment" spellcheck="true">// 就会报错无法展示。</span>           <span class="token comment" spellcheck="true">// 目前没有很好的解决办法</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父组件改造</span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"top-title"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title-left"</span><span class="token operator">></span>                总览            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>            <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title-right"</span><span class="token operator">></span>                列表            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category-content"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category-left"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>view v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item,index) in tabPane"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">'item.key'</span>           <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'tab-panes'</span> @click<span class="token operator">=</span><span class="token string">'changeTabpane(item, index)'</span>           <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"{'chooseIndex': item.key === chooseIndex}"</span><span class="token operator">></span>                    <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>            <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category-right"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>RenderContent <span class="token punctuation">:</span>changeCom<span class="token operator">=</span><span class="token string">'changeCom'</span> <span class="token punctuation">:</span>chooseIndex<span class="token operator">=</span><span class="token string">'chooseIndex'</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"js"</span><span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>        TAB_PANE    <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./constants.js'</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> RenderContent <span class="token keyword">from</span> <span class="token string">'./renderContent/renderContent.vue'</span>    <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> files <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'./categoryCommon'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex">/.vue$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    files<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> name <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">files</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">||</span> <span class="token function">files</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'modules'</span><span class="token punctuation">,</span> modules<span class="token punctuation">)</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token operator">...</span>modules<span class="token punctuation">,</span>            RenderContent        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                tabPane<span class="token punctuation">:</span> TAB_PANE<span class="token punctuation">,</span>                chooseIndex<span class="token punctuation">:</span> <span class="token string">'HomePriview'</span><span class="token punctuation">,</span>                changeCom<span class="token punctuation">:</span> modules            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">changeTabpane</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>chooseIndex <span class="token operator">=</span> val<span class="token punctuation">.</span>key<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// constants.js </span><span class="token keyword">export</span> <span class="token keyword">const</span> TAB_PANE <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        text<span class="token punctuation">:</span> <span class="token string">'全部'</span><span class="token punctuation">,</span>        key<span class="token punctuation">:</span> <span class="token string">'HomePriview'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> uniapp问题总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>April30总结</title>
      <link href="2022/04/30/april30-zong-jie/"/>
      <url>2022/04/30/april30-zong-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="April-30-总结"><a href="#April-30-总结" class="headerlink" title="April 30 总结"></a>April 30 总结</h4><h5 id="antd-cascader-类型-和最大限制问题"><a href="#antd-cascader-类型-和最大限制问题" class="headerlink" title="antd cascader 类型 和最大限制问题"></a>antd cascader 类型 和最大限制问题</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// antd Cascader 的 onChange</span><span class="token keyword">export</span> <span class="token keyword">declare</span> type SingleValueType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ----------------------------------------------</span><span class="token keyword">import</span> <span class="token punctuation">{</span>SingleValueType<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rc-cascader/lib/Cascader'</span><span class="token punctuation">;</span><span class="token keyword">export</span> type OptionType <span class="token operator">=</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token punctuation">{</span>    value<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    label<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span>    children<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token punctuation">{</span>value<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span> label<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不为多选</span><span class="token keyword">const</span> handelChange <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">:</span> SingleValueType<span class="token punctuation">,</span> selectTion<span class="token punctuation">:</span> OptionType<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>region<span class="token punctuation">,</span> regionCode<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">covertParams</span><span class="token punctuation">(</span>selectTion<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> regionConfig <span class="token operator">=</span> <span class="token punctuation">{</span>        region<span class="token punctuation">,</span>        regionCode<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">setCaster</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setKeys</span><span class="token punctuation">(</span>regionConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 多选 区别在于 多选是二维数组</span><span class="token comment" spellcheck="true">// Cascader maxTagCount 属性无效，这里手动限制最大值</span><span class="token comment" spellcheck="true">// code 用来双向数据绑定，selectedOptions 是具体的这一项地区的中文和地区码item</span><span class="token keyword">const</span> cascaderChange <span class="token operator">=</span> <span class="token punctuation">(</span>code<span class="token punctuation">:</span> SingleValueType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> selectedOptions<span class="token punctuation">:</span> OptionType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token string">'selectedOptions'</span><span class="token punctuation">,</span> selectedOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedOptions<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> deleteArr <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        form<span class="token punctuation">.</span><span class="token function">setFieldsValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>region<span class="token punctuation">:</span> deleteArr<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'超出最大数量，最多不超过5处'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// return;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>region<span class="token punctuation">,</span> regionCode<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">covertParams</span><span class="token punctuation">(</span>selectedOptions<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'region-label'</span><span class="token punctuation">,</span> region<span class="token punctuation">,</span> regionCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    form<span class="token punctuation">.</span><span class="token function">setFieldsValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>regionLabel<span class="token punctuation">:</span> region<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// useHeaderBar.ts</span><span class="token keyword">const</span> typeChange <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">any</span><span class="token punctuation">,</span> selectTion<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>selectTion<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> selectTion<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        message<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'超出最大数量，最多不超过5处'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>selectTion<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>flag <span class="token operator">===</span> SELECT <span class="token operator">||</span> flag <span class="token operator">===</span> DATA <span class="token operator">||</span> flag <span class="token operator">===</span> DOOR <span class="token operator">||</span> flag <span class="token operator">===</span> STATISTICS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>region<span class="token punctuation">,</span> regionCode<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">covertParams</span><span class="token punctuation">(</span>selectTion<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            region<span class="token punctuation">,</span>            regionCode<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">commonParams</span><span class="token punctuation">(</span><span class="token string">'typeKeywords'</span><span class="token punctuation">,</span> selectTion <span class="token operator">?</span> regionConfig <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> type <span class="token operator">=</span> flag <span class="token operator">===</span> DATA <span class="token operator">?</span> val <span class="token punctuation">:</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setSearchData</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token operator">...</span>state<span class="token punctuation">,</span>            type<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="状态维护在自定义hook中的组件，怎么让其他组件拿到实时的值"><a href="#状态维护在自定义hook中的组件，怎么让其他组件拿到实时的值" class="headerlink" title="状态维护在自定义hook中的组件，怎么让其他组件拿到实时的值"></a>状态维护在自定义hook中的组件，怎么让其他组件拿到实时的值</h5><pre class=" language-tex"><code class="language-tex"> 使用 forwardRef 和 useImperativeHandle 暴露顶部组件的最新值， 外部组件给这个组件传入 ref对象 ， 使用 headerBar.current.sendSearch （暴露的方法）  就可以获得 header 组件最新的值。  值得注意的是，自定义hook只是逻辑复用，不是状态复用，  使用自定以hook的组件可以把最新的state传递出去。</code></pre><h5 id="过度复用组件、复用逻辑带来的复杂度问题"><a href="#过度复用组件、复用逻辑带来的复杂度问题" class="headerlink" title="过度复用组件、复用逻辑带来的复杂度问题"></a>过度复用组件、复用逻辑带来的复杂度问题</h5><pre class=" language-tex"><code class="language-tex">无论是组件复用还是逻辑复用，都是为了减少相同代码、降低耦合，但过度组件封装、逻辑复用就会带来很复杂的判断问题，像这样的组件或自定义hook，往往为了兼容不同组件的间的样式差别、或者是逻辑的区别，往往要写很多的flag，这就带来了多而杂的判断问题，必须花时间去读。这样一来虽然完成了ui、逻辑的抽离但也使复杂度更高了。怎么样书写更好、可读性和维护性更佳的组件、自定义hook是一个值得思考的问题。</code></pre><h5 id="headerBar-组件复用与逻辑复用"><a href="#headerBar-组件复用与逻辑复用" class="headerlink" title="headerBar 组件复用与逻辑复用"></a>headerBar 组件复用与逻辑复用</h5><pre class=" language-typescript"><code class="language-typescript">写一个header 组件，她将会接收一些参数，这些不同的text 将会被当做组件一个数组的title<span class="token punctuation">,</span>  这个数组将被过滤，条件是title不为空的将被保留 。<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>  自定义hook useHeaderBar 将负责维护header 组件的状态，<span class="token keyword">const</span> <span class="token punctuation">{</span>    searchData<span class="token punctuation">,</span> contentChange<span class="token punctuation">,</span> typeChange<span class="token punctuation">,</span> statusChange<span class="token punctuation">,</span> timeChange<span class="token punctuation">,</span> handelSearch<span class="token punctuation">,</span> handelReset<span class="token punctuation">,</span> namerChange<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useHeaderBar</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>这些不同的函数将被分配给不同的组件，在值变化时，useHeaderBar 中的这些函数将更新 她维护的 state 对象，这个对象是整个header 组件 input 、select <span class="token operator">...</span> 和其他组件的state集合，这个state 也同样会给到header 组件，header 组件使用这个 state<span class="token punctuation">[</span>key<span class="token punctuation">]</span>的方式赋予 input 或是其他组件的value ，来完成双向数据绑定，这真的很像 antd 中 useForm 表单域的操作 <span class="token punctuation">(</span>也可能不像<span class="token punctuation">)</span>。<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>不同的使用 header 组件的组件，需要传入flag ，用这个 flag 来区分 不同组件中的搜索和重置。注意： 我们在搜索的函数中，使用了同步函数，该函数的作用是能够获取useState 改变后的最新值，搜索函数本身使用这个同步函数或许是多此一举，但在 reset 函数中，刚刚重置完state，再次调用搜索函数，我们就能用得上了。</code></pre><h5 id="setState-return-一个值"><a href="#setState-return-一个值" class="headerlink" title="setState return 一个值"></a>setState return 一个值</h5><pre class=" language-tex"><code class="language-tex">如果新的 state 需要通过使用先前的 state 计算得出，那么可以将函数传递给 setState。该函数将接收先前的 state，并返回一个更新后的值。这种 也叫做 函数式更新</code></pre><h5 id="Antd-Cascader-配合-china-division-插件或json文件的省市区级联"><a href="#Antd-Cascader-配合-china-division-插件或json文件的省市区级联" class="headerlink" title="Antd Cascader 配合 china-division 插件或json文件的省市区级联"></a>Antd Cascader 配合 china-division 插件或json文件的省市区级联</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 使用 china-division 插件</span><span class="token keyword">import</span> provinces <span class="token keyword">from</span> <span class="token string">'china-division/dist/provinces.json'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cities <span class="token keyword">from</span> <span class="token string">'china-division/dist/cities.json'</span><span class="token punctuation">;</span><span class="token keyword">import</span> areas <span class="token keyword">from</span> <span class="token string">'china-division/dist/areas.json'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 转换key</span><span class="token keyword">const</span> chinaDiviSion <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    areas<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>area<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> matchCity <span class="token operator">=</span> cities<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>city<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> city<span class="token punctuation">.</span>code <span class="token operator">===</span> area<span class="token punctuation">.</span>cityCode<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matchCity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            matchCity<span class="token punctuation">.</span>children <span class="token operator">=</span> matchCity<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            matchCity<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                label<span class="token punctuation">:</span> area<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                value<span class="token punctuation">:</span> area<span class="token punctuation">.</span>code<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cities<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>city <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> matchProvince <span class="token operator">=</span> provinces<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>province <span class="token operator">=</span><span class="token operator">></span> province<span class="token punctuation">.</span>code <span class="token operator">===</span> city<span class="token punctuation">.</span>provinceCode<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matchProvince<span class="token punctuation">)</span> <span class="token punctuation">{</span>            matchProvince<span class="token punctuation">.</span>children <span class="token operator">=</span> matchProvince<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            matchProvince<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                label<span class="token punctuation">:</span> city<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                value<span class="token punctuation">:</span> city<span class="token punctuation">.</span>code<span class="token punctuation">,</span>                children<span class="token punctuation">:</span> city<span class="token punctuation">.</span>children<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> provinces<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>province <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>        label<span class="token punctuation">:</span> province<span class="token punctuation">.</span>name<span class="token punctuation">,</span>        value<span class="token punctuation">:</span> province<span class="token punctuation">.</span>code<span class="token punctuation">,</span>        children<span class="token punctuation">:</span> province<span class="token punctuation">.</span>children<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> options<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> chinaDiviSion<span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 使用json文件</span><span class="token comment" spellcheck="true">// 使用:</span><span class="token comment" spellcheck="true">// 给到 Cascader 的 options 属性 chinaDiviSion()</span><span class="token comment" spellcheck="true">// 若 json 文件 的 key 已经是 value 和 label children? ，直接将 引入的json 变量给到 Cascader即可</span><span class="token keyword">import</span> pccode <span class="token keyword">from</span> <span class="token string">'@/utils/pccode.json'</span><span class="token punctuation">;</span><span class="token keyword">const</span> chinaDiviSion <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> pccode<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> children <span class="token operator">=</span> item<span class="token punctuation">.</span>children<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ele<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>            label<span class="token punctuation">:</span> ele<span class="token punctuation">.</span>name<span class="token punctuation">,</span>            value<span class="token punctuation">:</span> ele<span class="token punctuation">.</span>code<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                label<span class="token punctuation">:</span> item<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                value<span class="token punctuation">:</span> item<span class="token punctuation">.</span>code<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            label<span class="token punctuation">:</span> item<span class="token punctuation">.</span>name<span class="token punctuation">,</span>            value<span class="token punctuation">:</span> item<span class="token punctuation">.</span>code<span class="token punctuation">,</span>            children<span class="token punctuation">:</span> children<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> options<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> chinaDiviSion<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> April30总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>April28其他总结</title>
      <link href="2022/04/30/april28-qi-ta-zong-jie/"/>
      <url>2022/04/30/april28-qi-ta-zong-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="April-28-其他总结"><a href="#April-28-其他总结" class="headerlink" title="April 28 其他总结"></a>April 28 其他总结</h4><h5 id="检测是否是多维数组"><a href="#检测是否是多维数组" class="headerlink" title="检测是否是多维数组"></a>检测是否是多维数组</h5><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> isDeep <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span> item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 检测是否是多维数组   </span></code></pre><h5 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h5><pre class=" language-js"><code class="language-js"> <span class="token regex">/^[\u4e00-\u9fa5_a-zA-Z0-9(?=.*,)]{1,10}$/</span>  <span class="token comment" spellcheck="true">// 匹配数字、字母、汉字、逗号零个或多个(可选)，1 ~ 10 个字符</span></code></pre><h5 id="useRef-使用时的一些问题-子组件ref"><a href="#useRef-使用时的一些问题-子组件ref" class="headerlink" title="useRef 使用时的一些问题 子组件ref"></a>useRef 使用时的一些问题 子组件ref</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Mutable</span> <span class="token punctuation">{</span>    getFormValue<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    resetForm<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> hotRef<span class="token punctuation">:</span> MutableRefObject<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> as Mutable<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 报错: _hotRef$current.resetForm is not a function </span><span class="token keyword">const</span> hotRef<span class="token punctuation">:</span> MutableRefObject<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 不报错</span></code></pre><h5 id="useRef-使用时的一些问题2-值的保存"><a href="#useRef-使用时的一些问题2-值的保存" class="headerlink" title="useRef 使用时的一些问题2 值的保存"></a>useRef 使用时的一些问题2 值的保存</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// useRef 类型判断、配合子组件forwordref时的类型 、用 useRef保存值，初始值不要给null    </span><span class="token keyword">const</span> query<span class="token punctuation">:</span> MutableRefObject<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误   </span><span class="token keyword">const</span> query<span class="token punctuation">:</span> MutableRefObject<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 正确</span><span class="token comment" spellcheck="true">// 待验证</span></code></pre><h5 id="antd-的一些组件在绑定初始value为undefined时才显示placehloder的问题"><a href="#antd-的一些组件在绑定初始value为undefined时才显示placehloder的问题" class="headerlink" title="antd 的一些组件在绑定初始value为undefined时才显示placehloder的问题"></a>antd 的一些组件在绑定初始value为undefined时才显示placehloder的问题</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// antd 的一些组件在绑定初始value为undefined时才显示placehloder的问题</span>select 和 caster 组件，初始值给 <span class="token string">''</span> 不能显示placeholder<span class="token punctuation">,</span> 但给undefined就可以显示？</code></pre><h5 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">===</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><h5 id="一个函数管理多个列表状态"><a href="#一个函数管理多个列表状态" class="headerlink" title="一个函数管理多个列表状态"></a>一个函数管理多个列表状态</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">//  三大榜单列表 用数组 来状态管理</span><span class="token keyword">import</span> <span class="token punctuation">{</span>useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useMemo<span class="token punctuation">,</span> useCallback<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>Card<span class="token punctuation">,</span> Space<span class="token punctuation">,</span> Button<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>SingleValueType<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'rc-cascader/lib/Cascader'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cn <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token punctuation">;</span><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./index.less'</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Region</span> <span class="token punctuation">{</span>    region<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    regionCode<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> ZERO <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> initBelongList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> QueryList <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> threeList <span class="token operator">=</span> <span class="token operator">=</span> <span class="token punctuation">[</span>   <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'热搜主榜'</span><span class="token punctuation">,</span>            key<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>            queryLisy<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    text<span class="token punctuation">:</span> <span class="token string">'热搜1'</span><span class="token punctuation">,</span>                    nums<span class="token punctuation">:</span> <span class="token number">3234</span><span class="token punctuation">,</span>                    key<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token operator">...</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span>list<span class="token punctuation">,</span> num<span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token operator">?</span><span class="token punctuation">.</span>query<span class="token punctuation">.</span>current<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>curIndex<span class="token punctuation">,</span> setCurIndex<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>initBelongList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>cardList<span class="token punctuation">,</span> setCardList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>threeList<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">...</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">const</span> handelClick <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span>belongIndex<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> queryIndex<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setCurIndex</span><span class="token punctuation">(</span>                curIndex<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> ind<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ind <span class="token operator">===</span> belongIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">const</span> curItem <span class="token operator">=</span> queryIndex<span class="token punctuation">;</span>                        <span class="token keyword">return</span> curItem<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> item<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setCardList</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>swiVal <span class="token operator">===</span> ZERO<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            item<span class="token punctuation">.</span>name <span class="token operator">=</span> list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>inpVal<span class="token punctuation">;</span>                            item<span class="token punctuation">.</span>queryLisy <span class="token operator">=</span> item<span class="token punctuation">.</span>queryLisy<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> item<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        item<span class="token punctuation">.</span>queryLisy <span class="token operator">=</span> item<span class="token punctuation">.</span>queryLisy<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> item<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>wrap<span class="token punctuation">}</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token function">renderSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>cardList<span class="token punctuation">}</span><span class="token operator">></span>                <span class="token punctuation">{</span><span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> cardList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> ind<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> key<span class="token punctuation">,</span> queryLisy<span class="token punctuation">}</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token punctuation">(</span>                            <span class="token operator">&lt;</span>Card className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>card<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span> title<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span> bordered<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">false</span><span class="token punctuation">}</span><span class="token operator">></span>                                <span class="token punctuation">{</span>queryLisy<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ele<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                                    <span class="token keyword">const</span> <span class="token punctuation">{</span>text<span class="token punctuation">,</span> nums<span class="token punctuation">}</span> <span class="token operator">=</span> ele<span class="token punctuation">;</span>                                    <span class="token keyword">const</span> chooseIndex <span class="token operator">=</span> styles<span class="token punctuation">.</span>chooseIndex<span class="token punctuation">;</span>                                    <span class="token keyword">return</span> <span class="token punctuation">(</span>                                        <span class="token operator">&lt;</span>div                                            key<span class="token operator">=</span><span class="token punctuation">{</span>ele<span class="token punctuation">.</span>key<span class="token punctuation">}</span>                                            className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">cn</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>listItem<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>chooseIndex<span class="token punctuation">]</span><span class="token punctuation">:</span> curIndex<span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">===</span> index<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                                            onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">handelClick</span><span class="token punctuation">(</span>ind<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span>                                        <span class="token operator">></span>                                            <span class="token operator">&lt;</span>Space size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'large'</span><span class="token punctuation">}</span><span class="token operator">></span>                                                <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>radios<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                                                <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                                            <span class="token operator">&lt;</span><span class="token operator">/</span>Space<span class="token operator">></span>                                            <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>nums<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                                    <span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>Card<span class="token operator">></span>                        <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>cardList<span class="token punctuation">,</span> curIndex<span class="token punctuation">,</span> handelClick<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> QueryList<span class="token punctuation">;</span></code></pre><h5 id="post全新的数据请求方式-参数拼接的方式"><a href="#post全新的数据请求方式-参数拼接的方式" class="headerlink" title="post全新的数据请求方式 参数拼接的方式"></a>post全新的数据请求方式 参数拼接的方式</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// post全新的数据请求方式 参数拼接的方式</span><span class="token keyword">export</span> <span class="token keyword">const</span> changeDataStatus <span class="token operator">=</span> async <span class="token punctuation">(</span>params<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>materialCategory<span class="token punctuation">,</span> materialIds<span class="token punctuation">,</span> materialStatus<span class="token punctuation">}</span> <span class="token operator">=</span> params<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全部拼接为string</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> await ajax<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>        capi<span class="token punctuation">.</span>setDataStatus <span class="token operator">+</span>            <span class="token string">'?materialCategory='</span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>materialCategory<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token operator">+</span>            <span class="token string">'&amp;materialIds='</span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>materialIds<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token operator">+</span>            <span class="token string">'&amp;materialStatus='</span> <span class="token operator">+</span>            <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>materialStatus<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span>status<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="table-选中项"><a href="#table-选中项" class="headerlink" title="table 选中项"></a>table 选中项</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// table 选中项</span>    <span class="token keyword">export</span> type RowKeys <span class="token operator">=</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">...</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedRowKeys<span class="token punctuation">,</span> setSelectedRowKeys<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>RowKeys<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>tableRows<span class="token punctuation">,</span> setTableRows<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> rowSelection <span class="token operator">=</span> <span class="token punctuation">{</span>        selectedRowKeys<span class="token punctuation">,</span>        onChange<span class="token punctuation">:</span> onSelectChange<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> tableConfig <span class="token operator">=</span> <span class="token punctuation">{</span>        rowSelection<span class="token punctuation">:</span> rowSelection<span class="token punctuation">,</span>        columns<span class="token punctuation">:</span> columns<span class="token punctuation">,</span>        dataSource<span class="token punctuation">:</span> rows<span class="token punctuation">,</span>        rowKey<span class="token punctuation">:</span> <span class="token punctuation">(</span>record<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> record<span class="token punctuation">.</span>hotSearchId<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> onSelectChange <span class="token operator">=</span> <span class="token punctuation">(</span>selectedRowKeys<span class="token punctuation">:</span> RowKeys<span class="token punctuation">,</span> selectedRows<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setSelectedRowKeys</span><span class="token punctuation">(</span>selectedRowKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTableRows</span><span class="token punctuation">(</span>selectedRows<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>Tabel <span class="token punctuation">{</span><span class="token operator">...</span>tableConfig<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h5 id="redux新的使用方式"><a href="#redux新的使用方式" class="headerlink" title="redux新的使用方式"></a>redux新的使用方式</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// redux新的使用方式 hotSearch.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span>createSlice<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@reduxjs/toolkit'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>RootState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'.'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">HotSearchState</span> <span class="token punctuation">{</span>    rows<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    count<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    page<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    pageSize<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> initialState<span class="token punctuation">:</span> HotSearchState <span class="token operator">=</span> <span class="token punctuation">{</span>    rows<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    page<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    pageSize<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> hotSearchSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'hotSearch'</span><span class="token punctuation">,</span>    initialState<span class="token punctuation">,</span>    reducers<span class="token punctuation">:</span> <span class="token punctuation">{</span>        saveTabelData<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span>payload<span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>payload<span class="token punctuation">:</span> HotSearchState<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span>rows<span class="token punctuation">,</span> count<span class="token punctuation">,</span> page<span class="token punctuation">,</span> pageSize<span class="token punctuation">}</span> <span class="token operator">=</span> payload<span class="token punctuation">;</span>            state<span class="token punctuation">.</span>rows <span class="token operator">=</span> rows<span class="token punctuation">;</span>            state<span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>            state<span class="token punctuation">.</span>page <span class="token operator">=</span> page<span class="token punctuation">;</span>            state<span class="token punctuation">.</span>pageSize <span class="token operator">=</span> pageSize<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> selectHotSearch <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">:</span> RootState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>hotSearch<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> hotSearchSlice<span class="token punctuation">.</span>reducer<span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>configureStore<span class="token punctuation">,</span> ThunkAction<span class="token punctuation">,</span> Action<span class="token punctuation">,</span> combineReducers<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@reduxjs/toolkit'</span><span class="token punctuation">;</span><span class="token keyword">import</span> commonReducer <span class="token keyword">from</span> <span class="token string">'./common'</span><span class="token punctuation">;</span><span class="token keyword">import</span> hotSearchReducer <span class="token keyword">from</span> <span class="token string">'./hotSearch'</span><span class="token punctuation">;</span><span class="token keyword">import</span> dataReducer <span class="token keyword">from</span> <span class="token string">'./data'</span><span class="token punctuation">;</span><span class="token keyword">import</span> statiSticsReducer <span class="token keyword">from</span> <span class="token string">'./statistics'</span><span class="token punctuation">;</span><span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    common<span class="token punctuation">:</span> commonReducer<span class="token punctuation">,</span>    hotSearch<span class="token punctuation">:</span> hotSearchReducer<span class="token punctuation">,</span>    data<span class="token punctuation">:</span> dataReducer<span class="token punctuation">,</span>    statistics<span class="token punctuation">:</span> statiSticsReducer<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    reducer<span class="token punctuation">:</span> rootReducer<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> type RootState <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> store<span class="token punctuation">.</span>getState<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">export</span> type AppThunk<span class="token operator">&lt;</span>ReturnType <span class="token operator">=</span> <span class="token keyword">void</span><span class="token operator">></span> <span class="token operator">=</span> ThunkAction<span class="token operator">&lt;</span>ReturnType<span class="token punctuation">,</span> RootState<span class="token punctuation">,</span> unknown<span class="token punctuation">,</span> Action<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 组件中使用</span><span class="token keyword">import</span> <span class="token punctuation">{</span>HotSearchState<span class="token punctuation">,</span> hotSearchSlice<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/store/hotSearch'</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'@/store/index'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>saveTabelData<span class="token punctuation">}</span> <span class="token operator">=</span> hotSearchSlice<span class="token punctuation">.</span>actions<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 组件外</span><span class="token comment" spellcheck="true">// 在组件内触发, 任意一个func里</span>  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>      <span class="token function">saveTabelData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          rows<span class="token punctuation">,</span>          count<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用redux state </span>  <span class="token keyword">const</span> HotSearchState <span class="token operator">=</span> useSelector<span class="token operator">&lt;</span>RootState<span class="token punctuation">,</span> Pick<span class="token operator">&lt;</span>HotSearchState<span class="token punctuation">,</span> <span class="token string">'rows'</span> <span class="token operator">|</span> <span class="token string">'count'</span> <span class="token operator">|</span> <span class="token string">'page'</span> <span class="token operator">|</span> <span class="token string">'pageSize'</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span>      _<span class="token punctuation">.</span><span class="token function">pick</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>hotSearch<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rows'</span><span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'page'</span><span class="token punctuation">,</span> <span class="token string">'pageSize'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>rows<span class="token punctuation">,</span> count<span class="token punctuation">,</span> page<span class="token punctuation">,</span> pageSize<span class="token punctuation">}</span> <span class="token operator">=</span> HotSearchState<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这些解构的值可以直接当做变量使用</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// App.tsx</span><span class="token keyword">import</span> <span class="token punctuation">{</span>BrowserRouter as Router<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>Provider<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">'./Layout/BasicLayout'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Router basename<span class="token operator">=</span><span class="token string">'/yl'</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Layout <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="封装-table-column"><a href="#封装-table-column" class="headerlink" title="封装 table column"></a>封装 table column</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 封装 table column</span><span class="token keyword">import</span> <span class="token punctuation">{</span>Switch<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">'moment'</span><span class="token punctuation">;</span><span class="token keyword">import</span> findCode <span class="token keyword">from</span> <span class="token string">'@/page/components/utils/findCode'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>mapSource<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./mapSource'</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">ColumnType</span> <span class="token punctuation">{</span>    config<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>    fnc<span class="token punctuation">:</span> <span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    listFun<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    lookDetail<span class="token punctuation">:</span> <span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> SOURCE_TYPE <span class="token operator">=</span> <span class="token string">'数据源类别'</span><span class="token punctuation">;</span><span class="token keyword">const</span> column <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">:</span> ColumnType<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>config<span class="token punctuation">,</span> fnc<span class="token punctuation">,</span> listFun<span class="token punctuation">,</span> lookDetail<span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> source<span class="token punctuation">,</span> type<span class="token punctuation">,</span> id<span class="token punctuation">,</span> time<span class="token punctuation">,</span> status<span class="token punctuation">,</span> todo<span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">;</span>    <span class="token keyword">const</span> renderSwitch <span class="token operator">=</span> <span class="token punctuation">(</span>record<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Switch            size<span class="token operator">=</span><span class="token string">'default'</span>            checkedChildren<span class="token operator">=</span><span class="token string">'开'</span>            unCheckedChildren<span class="token operator">=</span><span class="token string">'关'</span>            defaultChecked            checked<span class="token operator">=</span><span class="token punctuation">{</span>record<span class="token punctuation">.</span>bd_status<span class="token punctuation">}</span>            onChange<span class="token operator">=</span><span class="token punctuation">{</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token function">listFun</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> index<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * 这样封装的column 可以使用传进来的方法,    *    * 并向传入的方法传递及时的值 （important!）    *     * 外部传入的这些函数用这些及时的值去做一些事。    */</span>    <span class="token keyword">const</span> handelCreate <span class="token operator">=</span> <span class="token punctuation">(</span>record<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">fnc</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> handelDetail <span class="token operator">=</span> <span class="token punctuation">(</span>record<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">lookDetail</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> name<span class="token punctuation">,</span>            dataIndex<span class="token punctuation">:</span> <span class="token string">'title'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> type<span class="token punctuation">,</span>            dataIndex<span class="token punctuation">:</span> <span class="token string">'baidu_cate'</span><span class="token punctuation">,</span>            render<span class="token punctuation">:</span> <span class="token punctuation">(</span>baidu_cate<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> record<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>type <span class="token operator">===</span> SOURCE_TYPE <span class="token operator">?</span> mapSource<span class="token punctuation">[</span>baidu_cate<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token function">findCode</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>city_code<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> id<span class="token punctuation">,</span>            dataIndex<span class="token punctuation">:</span> <span class="token string">'nid'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> time<span class="token punctuation">,</span>            dataIndex<span class="token punctuation">:</span> <span class="token string">'update_time'</span><span class="token punctuation">,</span>            render<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> record<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token function">moment</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>update_time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY / MM / DD'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> status<span class="token punctuation">,</span>            dataIndex<span class="token punctuation">:</span> <span class="token string">'bd_status'</span><span class="token punctuation">,</span>            render<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> record<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">renderSwitch</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> todo<span class="token punctuation">,</span>            dataIndex<span class="token punctuation">:</span> <span class="token string">'todo'</span><span class="token punctuation">,</span>            render<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> record<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token string">'#2056da'</span><span class="token punctuation">,</span> cursor<span class="token punctuation">:</span> <span class="token string">'pointer'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>marginRight<span class="token punctuation">:</span> <span class="token string">'15px'</span><span class="token punctuation">}</span><span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">handelDetail</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>                            查看详情                        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                        <span class="token operator">&lt;</span>span onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">handelCreate</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>创建白名单<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    source <span class="token operator">&amp;&amp;</span>        columns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 动态插入</span>            title<span class="token punctuation">:</span> source<span class="token punctuation">,</span>            dataIndex<span class="token punctuation">:</span> <span class="token string">'brand_name'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> columns<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> column<span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 组件中使用</span><span class="token keyword">import</span> column <span class="token keyword">from</span> <span class="token string">'./Column'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 决定要使用的常量</span><span class="token keyword">const</span> COLUMN_CONFIG <span class="token operator">=</span> flag <span class="token operator">===</span> DOOR <span class="token operator">?</span> TYPE_TWO <span class="token punctuation">:</span> TYPE_ONE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 白名单</span><span class="token keyword">const</span> openModal <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setModalFlag</span><span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWhite</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setVisit</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**** list switch 前端更新 于同步后端接口*/</span><span class="token keyword">const</span> listChange <span class="token operator">=</span> <span class="token punctuation">(</span>record<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> num <span class="token operator">=</span> val <span class="token operator">===</span> <span class="token keyword">true</span> <span class="token operator">?</span> ONE <span class="token punctuation">:</span> ZERO<span class="token punctuation">;</span>    <span class="token keyword">const</span> newRows <span class="token operator">=</span> rows<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> ind<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ind <span class="token operator">===</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> newItem <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            newItem<span class="token punctuation">.</span>bd_status <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token keyword">return</span> newItem<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>        <span class="token function">actionFunc</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            rows<span class="token punctuation">:</span> newRows<span class="token punctuation">,</span>            count<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 同步后端接口</span>    <span class="token punctuation">(</span>async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>            materialCategory<span class="token punctuation">:</span> record<span class="token punctuation">.</span>baidu_cate<span class="token punctuation">,</span>            materialIds<span class="token punctuation">:</span> <span class="token punctuation">[</span>record<span class="token punctuation">.</span>nid<span class="token punctuation">]</span><span class="token punctuation">,</span>            materialStatus<span class="token punctuation">:</span> record<span class="token punctuation">.</span>bd_status<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        await <span class="token function">apiFunc</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 查看详情时请求接口,* * 根据不同flag 确定不同组件请求不同的接口**/</span><span class="token keyword">const</span> lookDetail <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setModalFlag</span><span class="token punctuation">(</span>DETAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setVisit</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>        materialCategory<span class="token punctuation">:</span> item<span class="token punctuation">.</span>baidu_cate<span class="token punctuation">,</span>        materialId<span class="token punctuation">:</span> item<span class="token punctuation">.</span>nid<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">===</span> DATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span>async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> res <span class="token operator">=</span> await <span class="token function">getDetail</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setDetailData</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">===</span> DOOR<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span>async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> res <span class="token operator">=</span> await <span class="token function">getDoorDetail</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setDetailData</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> columnConfig <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 变量和方法</span>    config<span class="token punctuation">:</span> COLUMN_CONFIG<span class="token punctuation">,</span>    fnc<span class="token punctuation">:</span> openModal<span class="token punctuation">,</span>    listFun<span class="token punctuation">:</span> listChange<span class="token punctuation">,</span>    lookDetail<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> commonColumn <span class="token operator">=</span> <span class="token function">column</span><span class="token punctuation">(</span>columnConfig<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会返回column数组</span><span class="token keyword">const</span> tableConfig <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将 tableConfig 解构于 table 标签</span>    rowSelection<span class="token punctuation">:</span> rowSelection<span class="token punctuation">,</span>    columns<span class="token punctuation">:</span> commonColumn<span class="token punctuation">,</span>    dataSource<span class="token punctuation">:</span> rows<span class="token punctuation">,</span>    rowKey<span class="token punctuation">:</span> <span class="token punctuation">(</span>record<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> record<span class="token punctuation">.</span>nid<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="项目两个极其相似的组件的样式以及逻辑复用"><a href="#项目两个极其相似的组件的样式以及逻辑复用" class="headerlink" title="项目两个极其相似的组件的样式以及逻辑复用"></a>项目两个极其相似的组件的样式以及逻辑复用</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>FC<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> CTabs <span class="token keyword">from</span> <span class="token string">'@/components/CTabs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Materiel <span class="token keyword">from</span> <span class="token string">'./components/Materiel'</span><span class="token punctuation">;</span><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./index.less'</span><span class="token punctuation">;</span><span class="token keyword">const</span> TEXT_CONFIG <span class="token operator">=</span> <span class="token punctuation">{</span>    content<span class="token punctuation">:</span> <span class="token string">'物料名称：'</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">'数据源类别：'</span><span class="token punctuation">,</span>    status<span class="token punctuation">:</span> <span class="token string">'物料状态：'</span><span class="token punctuation">,</span>    time<span class="token punctuation">:</span> <span class="token string">'起止时间：'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    flag<span class="token punctuation">:</span> <span class="token string">'data'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> TEXT_CONFIG_ONE <span class="token operator">=</span> <span class="token punctuation">{</span>    content<span class="token punctuation">:</span> <span class="token string">'物料名称：'</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">'门店区域：'</span><span class="token punctuation">,</span>    status<span class="token punctuation">:</span> <span class="token string">'物料状态：'</span><span class="token punctuation">,</span>    time<span class="token punctuation">:</span> <span class="token string">'起止时间：'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'品牌名称：'</span><span class="token punctuation">,</span>    flag<span class="token punctuation">:</span> <span class="token string">'door'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> cTabs <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        index<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        tab<span class="token punctuation">:</span> <span class="token string">'物料查看'</span><span class="token punctuation">,</span>        cont<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Materiel TEXT_CONFIG<span class="token operator">=</span><span class="token punctuation">{</span>TEXT_CONFIG<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        index<span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span>        tab<span class="token punctuation">:</span> <span class="token string">'门店管理'</span><span class="token punctuation">,</span>        cont<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Materiel TEXT_CONFIG<span class="token operator">=</span><span class="token punctuation">{</span>TEXT_CONFIG_ONE<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> Data<span class="token punctuation">:</span> FC <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>dataWrap<span class="token punctuation">}</span><span class="token operator">></span>            <span class="token operator">&lt;</span>CTabs tabs<span class="token operator">=</span><span class="token punctuation">{</span>cTabs<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**** 由于不同的flag都会进入 Materiel 组件，** 虽然都使用的是统一组件，* * 但是flag不同，数据也就不同，* * 用flag 区分数据就好了* * 在使用redux时，用不同的 action 保存不同组件的数据 就可以避免数据混乱。** 虽然使用的同一组件，** 但数据不同，那他们就是有区别的，*  * 即使这两个组件本身相差不大，** 也会因为flag 的不同调用不同的接口和func**/</span></code></pre><h5 id="前端更新的思想及其好处"><a href="#前端更新的思想及其好处" class="headerlink" title="前端更新的思想及其好处"></a>前端更新的思想及其好处</h5><pre class=" language-tex"><code class="language-tex">在视图发生变化时，不调用接口似的视图更新，而是采用前端更新的方式来更新视图，同时同步数据库数据，在下一次刷新页面时调用接口，这样的操作一定程度上优化了性能，减轻了服务器压力，是性能优化的可选措施。</code></pre><h5 id="table-rowSelection-不指定唯一key的后果"><a href="#table-rowSelection-不指定唯一key的后果" class="headerlink" title="table rowSelection 不指定唯一key的后果"></a>table rowSelection 不指定唯一key的后果</h5><pre class=" language-tex"><code class="language-tex">如果要选中多行在 不指定  rowKey: (record: any) => record.nid 时，选中一个就会全部选中，这是因为key重复或者没有指定key！</code></pre><h5 id="antd-tooltip-文字hover显示"><a href="#antd-tooltip-文字hover显示" class="headerlink" title="antd tooltip 文字hover显示"></a>antd tooltip 文字hover显示</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 使用 Tooltip 包裹要hover显示气泡的元素                   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Tooltip</span> <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>tag<span class="token punctuation">}</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>tag<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Tag</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>blue<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>              <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>                  overflow<span class="token punctuation">:</span> <span class="token string">'hidden'</span><span class="token punctuation">,</span>                  textOverflow<span class="token punctuation">:</span> <span class="token string">'ellipsis'</span><span class="token punctuation">,</span>                  whiteSpace<span class="token punctuation">:</span> <span class="token string">'nowrap'</span><span class="token punctuation">,</span>                  cursor<span class="token punctuation">:</span> <span class="token string">'pointer'</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">}</span></span>          <span class="token punctuation">></span></span>              <span class="token punctuation">{</span>tag<span class="token punctuation">}</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Tag</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Tooltip</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> April28其他总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>April28项目总结</title>
      <link href="2022/04/30/april28-xiang-mu-zong-jie/"/>
      <url>2022/04/30/april28-xiang-mu-zong-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="April-28-项目总结"><a href="#April-28-项目总结" class="headerlink" title="April 28 项目总结"></a>April 28 项目总结</h3><h4 id="modal-和上级组件-和-modal的下级组件-的值传递"><a href="#modal-和上级组件-和-modal的下级组件-的值传递" class="headerlink" title="modal 和上级组件 和 modal的下级组件 的值传递"></a>modal 和上级组件 和 modal的下级组件 的值传递</h4><pre class=" language-tex"><code class="language-tex">结论：    可以为 modal 传入一个 reactNode (组件)，展示这个组件的值(值是时实变化的)，   这个 modal 调用上级组件的方法作为自己的 onOk 和 onCancel ,        在上级组件传入的函数里 执行一些表单操作，      自己 只是做了一个展示作用！      作为被传入 modal 组件的 reactNode ，使用 forwardRef 和 useImperativeHandle 暴露自己的方法和   值，让得 modal 的 上级组件、（也是自己的上级组件）调用这些方法。   从而完成表单操作，或者是将这些暴露出来的表单值，      用 useState 或 useRef 将值保存再传给其他需要展示这些数据的组件。      如此，完成了一次比较离奇、奇葩的组件展示、组件值的传递使用。</code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// SwitchInp</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SwitchInpType</span> <span class="token punctuation">{</span>    TITLE_LIST<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token punctuation">{</span>        text<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>        key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span>    NUMS<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> SwitchInp<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token operator">&lt;</span>SwitchInpType<span class="token operator">></span> <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> submitForm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        hotRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">getFormValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> handleCancel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setVisit</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> handleOk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> <span class="token punctuation">{</span>list<span class="token punctuation">,</span> num<span class="token punctuation">}</span> <span class="token operator">=</span> switchRef<span class="token punctuation">.</span>current<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            query<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将 switch 组件暴露的实时的值保存其他传给其他组件</span>                list<span class="token punctuation">,</span>                num<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 同步后端接口 , 数量 以及 query 标题</span>          <span class="token keyword">const</span> hotSearchConfigParams <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>                appName<span class="token punctuation">:</span> item<span class="token punctuation">.</span>label<span class="token punctuation">,</span>                name<span class="token punctuation">:</span> item<span class="token punctuation">.</span>inpVal<span class="token punctuation">,</span>                enable<span class="token punctuation">:</span> item<span class="token punctuation">.</span>swiVal<span class="token punctuation">,</span>                hotSearchConfigId<span class="token punctuation">:</span> item<span class="token punctuation">.</span>hotSearchConfigId<span class="token punctuation">,</span>                queryCount<span class="token punctuation">:</span> num<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> queryCount <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>                hotSearchConfigParams<span class="token punctuation">,</span>                queryCount<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span>async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> res <span class="token operator">=</span> await <span class="token function">editHot</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> ZERO<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'变更成功'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'变更失败'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setVisit</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> modalConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modalType <span class="token operator">===</span> CREATE <span class="token operator">||</span> modalType <span class="token operator">===</span> EDIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                visit<span class="token punctuation">,</span>                handleOk<span class="token punctuation">:</span> submitForm<span class="token punctuation">,</span>                handleCancel<span class="token punctuation">,</span>                reactNode<span class="token punctuation">:</span> <span class="token operator">&lt;</span>CreateHot <span class="token punctuation">{</span><span class="token operator">...</span>createHotConfig<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>                NUMS<span class="token punctuation">,</span>                title<span class="token punctuation">:</span> TITLE_TWO<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                visit<span class="token punctuation">,</span>                handleOk<span class="token punctuation">,</span>                handleCancel<span class="token punctuation">,</span>                reactNode<span class="token punctuation">:</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>textAlign<span class="token punctuation">:</span> <span class="token string">'center'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>display<span class="token punctuation">:</span> <span class="token string">'inline-block'</span><span class="token punctuation">,</span> marginRight<span class="token punctuation">:</span> <span class="token string">'30px'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>SwitchList <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>switchRef<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                NUMS<span class="token punctuation">,</span>                title<span class="token punctuation">:</span> TITLE_ONE<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span><span class="token operator">></span>           <span class="token operator">...</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token operator">&lt;</span>ModalView <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">modalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// CreateHot</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Mutable</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// SwitchInp暴露</span>    getFormValue<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    resetForm<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> CreateHot <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">:</span> PropsCreateHot<span class="token punctuation">,</span> ref<span class="token punctuation">:</span> ForwardedRef<span class="token operator">&lt;</span>Mutable<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">[</span>form<span class="token punctuation">]</span> <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> resetForm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        form<span class="token punctuation">.</span><span class="token function">resetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token operator">...</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">const</span> getFormValue <span class="token operator">=</span> async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        form<span class="token punctuation">.</span><span class="token function">validateFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>values <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 通过表单校验, 就调接口，无论是新建还是修改</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> EDIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        sendParams<span class="token punctuation">.</span>hotSearchId <span class="token operator">=</span> copyFields<span class="token punctuation">.</span>hotSearchId <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>                        <span class="token punctuation">(</span>async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                            <span class="token keyword">const</span> res <span class="token operator">=</span> await <span class="token function">editHotSearch</span><span class="token punctuation">(</span>sendParams<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> ZERO<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 若 返回码正确</span>                                <span class="token function">resetForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'更新成功'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token function">getSearchList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token function">handleCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 再调用父组件的关闭modal方法，这里</span>                            <span class="token punctuation">}</span>                   <span class="token comment" spellcheck="true">// 能起到一个阻塞作用</span>                      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 如果表单校验失败，或者接口调用失败</span>                    <span class="token punctuation">}</span>                           <span class="token comment" spellcheck="true">// 不会关闭modal</span>                <span class="token punctuation">}</span>                               <span class="token comment" spellcheck="true">// 而直接在 modal 上级组件 调用完 getFormValue 后</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>                                  <span class="token comment" spellcheck="true">// 直接关闭modal，</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>errorInfo <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 会出现表单校验爆红，但modal关闭的情况！！</span>                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'errorInfo'</span><span class="token punctuation">,</span> errorInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>          <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>getFormValue<span class="token punctuation">,</span> resetForm<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Form       form<span class="token operator">=</span><span class="token punctuation">{</span>form<span class="token punctuation">}</span>      <span class="token operator">...</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">></span>    <span class="token operator">...</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">export</span> <span class="token keyword">default</span> forwardRef<span class="token operator">&lt;</span>Mutable<span class="token punctuation">,</span> PropsCreateHot<span class="token operator">></span><span class="token punctuation">(</span>CreateHot<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// SwitchList</span><span class="token keyword">interface</span> <span class="token class-name">Refs</span> <span class="token punctuation">{</span>    getParams<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        list<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> SwitchList <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">:</span> SwitchInpType<span class="token punctuation">,</span> ref<span class="token punctuation">:</span> ForwardedRef<span class="token operator">&lt;</span>Refs<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>num<span class="token punctuation">,</span> numberChange<span class="token punctuation">,</span> list<span class="token punctuation">,</span> listChange<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useHome</span><span class="token punctuation">(</span>NUMS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> getParams <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> defaultVal <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>inpVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                item<span class="token punctuation">.</span>inpVal <span class="token operator">=</span> item<span class="token punctuation">.</span>label<span class="token punctuation">;</span>                <span class="token keyword">return</span> item<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> item<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            list<span class="token punctuation">:</span> defaultVal<span class="token punctuation">,</span>            num<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>        getParams<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>switchList<span class="token punctuation">}</span><span class="token operator">></span>            <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token punctuation">{</span>label<span class="token punctuation">,</span> inpVal<span class="token punctuation">,</span> swiVal<span class="token punctuation">}</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>label<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>listItem<span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">...</span>TYPE_ONE<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>label<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>label<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                        <span class="token operator">&lt;</span>Input                            className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>inp<span class="token punctuation">}</span>                        value<span class="token operator">=</span><span class="token punctuation">{</span>inpVal<span class="token punctuation">}</span>                        onChange<span class="token operator">=</span><span class="token punctuation">{</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token function">listChange</span><span class="token punctuation">(</span><span class="token string">'inpVal'</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>                        disabled<span class="token operator">=</span><span class="token punctuation">{</span>swiVal <span class="token operator">&amp;&amp;</span> NUMS <span class="token operator">!==</span> QUERYNUMS<span class="token punctuation">}</span>                    <span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>Switch                        <span class="token comment" spellcheck="true">// 这里两个组件会冲突 </span>                                                <span class="token comment" spellcheck="true">// 值得注意的是，自定义hook 只是组件逻辑复用， 不是状态复用</span>                                                <span class="token comment" spellcheck="true">// 但这里一个组件的状态到另一个组件里了..</span>                        checked<span class="token operator">=</span><span class="token punctuation">{</span>swiVal <span class="token operator">===</span> ZERO<span class="token punctuation">}</span>                        onChange<span class="token operator">=</span><span class="token punctuation">{</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token function">listChange</span><span class="token punctuation">(</span><span class="token string">'swiVal'</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">}</span>                        size<span class="token operator">=</span><span class="token string">'default'</span>                        checkedChildren<span class="token operator">=</span><span class="token string">'开'</span>                        unCheckedChildren<span class="token operator">=</span><span class="token string">'关'</span>                        defaultChecked                    <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> forwardRef<span class="token operator">&lt;</span>Refs<span class="token punctuation">,</span> SwitchInpType<span class="token operator">></span><span class="token punctuation">(</span>SwitchList<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// ModalView</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>ReactNode<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>Modal<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./index.less'</span><span class="token punctuation">;</span><span class="token keyword">const</span> SEARCH_NUMS <span class="token operator">=</span> <span class="token string">'搜索数量设置：'</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>    visit<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>    handleOk<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    handleCancel<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    reactNode<span class="token operator">?</span><span class="token punctuation">:</span> ReactNode<span class="token punctuation">;</span>    NUMS<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    title<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>props<span class="token punctuation">:</span> Type<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>visit<span class="token punctuation">,</span> handleOk<span class="token punctuation">,</span> handleCancel<span class="token punctuation">,</span> reactNode<span class="token punctuation">,</span> NUMS<span class="token punctuation">,</span> title<span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Modal                width<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">700</span><span class="token punctuation">}</span>                title<span class="token operator">=</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span>                visible<span class="token operator">=</span><span class="token punctuation">{</span>visit<span class="token punctuation">}</span>                className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>modal<span class="token punctuation">}</span>                onOk<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token function">handleOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span>                onCancel<span class="token operator">=</span><span class="token punctuation">{</span>handleCancel<span class="token punctuation">}</span>                centered                style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>display<span class="token punctuation">:</span> NUMS <span class="token operator">===</span> SEARCH_NUMS <span class="token operator">?</span> <span class="token string">'flex'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">></span>                <span class="token punctuation">{</span>reactNode <span class="token operator">?</span> reactNode <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Modal<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// useHome</span><span class="token keyword">import</span> <span class="token punctuation">{</span>useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>getHotConfig<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/constants/actions'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// interface SwitchList {</span><span class="token comment" spellcheck="true">//     label: string;</span><span class="token comment" spellcheck="true">//     inpVal: string;</span><span class="token comment" spellcheck="true">//     swiVal: number;</span><span class="token comment" spellcheck="true">//     hotSearchConfigId?: number;</span><span class="token comment" spellcheck="true">//     queryCount?: number;</span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>NUMS<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> setList<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'NUMS'</span><span class="token punctuation">,</span> NUMS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> numberChange <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setNum</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span>async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> result <span class="token operator">=</span> await <span class="token function">getHotConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setList</span><span class="token punctuation">(</span>                result<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>                    label<span class="token punctuation">:</span> item<span class="token punctuation">.</span>appName<span class="token punctuation">,</span>                    inpVal<span class="token punctuation">:</span> item<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                    swiVal<span class="token punctuation">:</span> item<span class="token punctuation">.</span>enable<span class="token punctuation">,</span>                    hotSearchConfigId<span class="token punctuation">:</span> item<span class="token punctuation">.</span>hotSearchConfigId<span class="token punctuation">,</span>                    num<span class="token punctuation">:</span> item<span class="token punctuation">.</span>queryCount<span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setNum</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>queryCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> listChange <span class="token operator">=</span> <span class="token punctuation">(</span>flag<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * this way space address can not change , so         * use map .         * const newList = [] as any;         * newList[index][flag] = value;         * setList([...list, ...newList]);         * console.log('index --- value', index, value);         */</span>        <span class="token function">setList</span><span class="token punctuation">(</span>            list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> ind<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ind <span class="token operator">===</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">===</span> <span class="token string">'swiVal'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        item<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> item<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    item<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                    <span class="token keyword">return</span> item<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> item<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        num<span class="token punctuation">,</span>        numberChange<span class="token punctuation">,</span>        list<span class="token punctuation">,</span>        listChange<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> April28项目总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>momentjs时间转换</title>
      <link href="2022/04/30/momentjs-shi-jian-zhuan-huan/"/>
      <url>2022/04/30/momentjs-shi-jian-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="moment-js-时间转换"><a href="#moment-js-时间转换" class="headerlink" title="moment.js 时间转换"></a>moment.js 时间转换</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 获取某一天的零时时间</span><span class="token comment" spellcheck="true">// moment(item).startOf('day').format(dateFormat)</span><span class="token comment" spellcheck="true">// 获取某一天的23:59:59</span><span class="token comment" spellcheck="true">// moment(item).endOf('day').format(dateFormat);</span><span class="token comment" spellcheck="true">// 获取两个时间差的时间间隔</span><span class="token comment" spellcheck="true">// endTime.diff(startTime, 'days');</span><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">'moment'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>ZERO_ONE<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/constants/constants'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>ZERO<span class="token punctuation">,</span> ONE<span class="token punctuation">}</span> <span class="token operator">=</span> ZERO_ONE<span class="token punctuation">;</span><span class="token keyword">const</span> dateFormat <span class="token operator">=</span> <span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// antd RangePicker 的值是一个 moment[], 共两项</span><span class="token keyword">const</span> transforMation <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 定义第一项和第零项的值</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> moment<span class="token punctuation">.</span>Moment<span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> ZERO<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">moment</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dateFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> ONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">moment</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dateFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> item<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dateFormat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 基本用不到，给map一个默认</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> transforMation<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ===============时间转换函数==================</span><span class="token keyword">const</span> getTimeDifference <span class="token operator">=</span> <span class="token punctuation">(</span>selectTion<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> copySeletion <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>selectTion<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> startTime <span class="token operator">=</span> copySeletion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> endTime <span class="token operator">=</span> copySeletion<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> timeDifference<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> endTime<span class="token punctuation">.</span><span class="token function">diff</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">'days'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> isMoreThanSeven<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> timeDifference <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        isMoreThanSeven<span class="token punctuation">,</span>        timeDifference<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> momentjs时间转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>立即获取hook更新的值</title>
      <link href="2022/03/24/li-ji-huo-qu-hook-geng-xin-de-zhi/"/>
      <url>2022/03/24/li-ji-huo-qu-hook-geng-xin-de-zhi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="自定义hook-—-立即获得setState之后的值"><a href="#自定义hook-—-立即获得setState之后的值" class="headerlink" title="自定义hook — 立即获得setState之后的值"></a>自定义hook — 立即获得setState之后的值</h4><pre class=" language-typescript"><code class="language-typescript">通常我们在一个函数中使用useState的第二个参数，也就是dispatch 更新state，在这个setState 的下面我们 log 看看的话，就会发现我们拿不到我们刚刚才 <span class="token keyword">set</span> 的值，在刚刚<span class="token keyword">set</span>完调用的函数里，也拿不到最新的值。<span class="token keyword">const</span> numberChange <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pack'</span><span class="token punctuation">,</span> pack<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 拿不到最新的值，是因为函数和log 一样，也是同步执行的。</span>    <span class="token function">setNum</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">getSyncPack</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1 传参</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> fn <span class="token operator">=</span> async <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> await axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/../../../list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 接口地址</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> positions <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        positions <span class="token operator">&amp;&amp;</span> <span class="token function">setPack</span><span class="token punctuation">(</span>positions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">numberChange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>这是 react 的规则所决定的，此时尚在前一轮的渲染中。<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>react 每次渲染都有独立的state和函数，拿不到最新值，是因为我们在过去的渲染函数中！因此也只能获得那一次渲染中的state。</code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/** * @FilePath: hooks/useSyncCallback * @Author: lixiaofei */</span><span class="token comment" spellcheck="true">// 在组件中调用此函数，可以立即获得刚刚set 完最新的值，同时支持传参的方式。</span><span class="token keyword">import</span> <span class="token punctuation">{</span>useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useCallback<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> useSyncCallback <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>callback<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>proxyState<span class="token punctuation">,</span> setProxyState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>current<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>paramsters<span class="token punctuation">,</span> setParamsters<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> Func <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setParamsters</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setProxyState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>current<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyState<span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setProxyState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>current<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>proxyState<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        proxyState<span class="token punctuation">.</span>current <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>paramsters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Func<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> useSyncCallback<span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 组件中使用</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">...</span><span class="token keyword">const</span> <span class="token punctuation">[</span>pack<span class="token punctuation">,</span> setPack<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> getSyncPack <span class="token operator">=</span> useSyncCallback<span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// val 传递的参数</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'val'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在这个函数内部可以 log 到最新的值</span>    <span class="token comment" spellcheck="true">// 这里是为了实时获得首次 effect 从接口获取的 pack的对象属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> newList<span class="token punctuation">:</span> SwitchList<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> val<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                label<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`位置</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: `</span></span><span class="token punctuation">,</span>                inpVal<span class="token punctuation">:</span> pack<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`position</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>                swiVal<span class="token punctuation">:</span> pack<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`position</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">Enable`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">setList</span><span class="token punctuation">(</span>newList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> numberChange <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setNum</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">getSyncPack</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1 传参</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 立即获取hook更新的值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reactLess深度选择器</title>
      <link href="2022/03/24/reactless-shen-du-xuan-ze-qi/"/>
      <url>2022/03/24/reactless-shen-du-xuan-ze-qi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="react-less-全局-深度选择器"><a href="#react-less-全局-深度选择器" class="headerlink" title="react less 全局 / 深度选择器"></a>react less 全局 / 深度选择器</h4><h5 id="use"><a href="#use" class="headerlink" title="use"></a>use</h5><pre class=" language-js"><code class="language-js">        <span class="token comment" spellcheck="true">/*    * 在最近的项目中，是使用 import styles from './index.less' 这种方式，    &amp;    * 发现这种方式引入的类名下无法选中 ant 的组件名，比如 .ant -btn。    &amp;     * 而直接引入的方式样式又不会生效（import './index.less'），    &amp;     * 问了同事，使用 :global 就可以选中修改这个 ant 组件了。    *    */</span><span class="token punctuation">.</span><span class="token keyword">switch</span><span class="token operator">-</span>list<span class="token operator">-</span>item <span class="token punctuation">{</span>    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    align<span class="token operator">-</span>items<span class="token punctuation">:</span> center<span class="token punctuation">;</span>    margin<span class="token operator">-</span>bottom<span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token keyword">switch</span><span class="token operator">-</span>label <span class="token punctuation">{</span>        display<span class="token punctuation">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span>        width<span class="token punctuation">:</span> 128px<span class="token punctuation">;</span>        margin<span class="token operator">-</span>right<span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>        text<span class="token operator">-</span>align<span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">:</span>global <span class="token punctuation">.</span>ant<span class="token operator">-</span><span class="token keyword">switch</span><span class="token operator">-</span>checked <span class="token punctuation">{</span>        background<span class="token operator">-</span>color<span class="token punctuation">:</span> #<span class="token number">3369e9</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">:</span>global <span class="token punctuation">.</span>ant<span class="token operator">-</span><span class="token keyword">switch</span> <span class="token punctuation">{</span>        width<span class="token punctuation">:</span> 44px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">:</span>global <span class="token punctuation">.</span>ant<span class="token operator">-</span><span class="token keyword">switch</span><span class="token operator">-</span>checked <span class="token punctuation">.</span>ant<span class="token operator">-</span><span class="token keyword">switch</span><span class="token operator">-</span>handle <span class="token punctuation">{</span>        left<span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">54</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-tex"><code class="language-tex">在编写 less 时， 建议采用如上的方式，空出空格, 更加清晰明了。</code></pre><h5 id="other"><a href="#other" class="headerlink" title="other"></a>other</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** 一般我们在react组件中的class类名都是 className='wrap'，&amp; * 引入了classnames 一般是 className={cn('wrap')} 、 &amp;* className={cn('wrap', {'chooseIndex': flag === '1'})},&amp; * 现在可以用 className={styles.wrap} 、&amp; * className={styles['switch-list-item']} 、&amp; * const colorName = todo === '可用' ? 'blue' : 'red';&amp; * className={styles[colorName]} 这种方式。&amp; * 跟classnames 相比，同样非常灵活。*/</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> reactLess深度选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中引入less</title>
      <link href="2022/03/24/react-zhong-yin-ru-less/"/>
      <url>2022/03/24/react-zhong-yin-ru-less/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="React-中引入less"><a href="#React-中引入less" class="headerlink" title="React 中引入less"></a>React 中引入less</h3><pre class=" language-json"><code class="language-json">在 当前最新的 less 、 less-loader 支持下，可以成功引入less。当前版本：    <span class="token property">"less"</span><span class="token operator">:</span> <span class="token string">"^4.1.2"</span><span class="token punctuation">,</span>    <span class="token property">"less-loader"</span><span class="token operator">:</span> <span class="token string">"^10.2.0"</span></code></pre><pre class=" language-js"><code class="language-js">项目根目录执行：Git initgit add <span class="token punctuation">.</span>git commit <span class="token operator">-</span>m <span class="token string">''</span>npm run eject <span class="token comment" spellcheck="true">// 暴露 config/webpack.config.js</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js 新增</span><span class="token keyword">const</span> lessRegex <span class="token operator">=</span> <span class="token regex">/\.less$/</span><span class="token punctuation">;</span><span class="token keyword">const</span> lessModuleRegex <span class="token operator">=</span> <span class="token regex">/\.module\.less$/</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// modules/rules/oneOf  sassModuleRegex 后面</span> <span class="token punctuation">{</span>              test<span class="token punctuation">:</span> lessRegex<span class="token punctuation">,</span>              exclude<span class="token punctuation">:</span> lessModuleRegex<span class="token punctuation">,</span>              use<span class="token punctuation">:</span> <span class="token function">getStyleLoaders</span><span class="token punctuation">(</span>                <span class="token punctuation">{</span>                  importLoaders<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                  sourceMap<span class="token punctuation">:</span> isEnvProduction                    <span class="token operator">?</span> shouldUseSourceMap                    <span class="token punctuation">:</span> isEnvDevelopment<span class="token punctuation">,</span>                  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    mode<span class="token punctuation">:</span> <span class="token string">'icss'</span><span class="token punctuation">,</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token string">'less-loader'</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>              sideEffects<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>              test<span class="token punctuation">:</span> lessModuleRegex<span class="token punctuation">,</span>              use<span class="token punctuation">:</span> <span class="token function">getStyleLoaders</span><span class="token punctuation">(</span>                <span class="token punctuation">{</span>                  importLoaders<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                  sourceMap<span class="token punctuation">:</span> isEnvProduction                    <span class="token operator">?</span> shouldUseSourceMap                    <span class="token punctuation">:</span> isEnvDevelopment<span class="token punctuation">,</span>                  modules<span class="token punctuation">:</span> <span class="token string">'local'</span><span class="token punctuation">,</span>                  getLocalIdent<span class="token punctuation">:</span> getCSSModuleLocalIdent<span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token string">'less-loader'</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><pre class=" language-tex"><code class="language-tex">至于老项目中这样新增为什么会报错？题暂时保留疑问</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react中引入less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss与csrf攻击</title>
      <link href="2022/03/05/xss-yu-csrf-gong-ji/"/>
      <url>2022/03/05/xss-yu-csrf-gong-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="xss-与-csrf-攻击"><a href="#xss-与-csrf-攻击" class="headerlink" title="xss 与 csrf 攻击"></a>xss 与 csrf 攻击</h5><h5 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h5><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><pre class=" language-tex"><code class="language-tex">XSS 全称是 Cross Site Scripting(即跨站脚本)，为了和 CSS 区分，故叫它XSS。XSS 攻击是指浏览器中执行恶意脚本(无论是跨域还是同域)，从而拿到用户的信息并进行操作。</code></pre><h6 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h6><pre class=" language-js"><code class="language-js">XSS 攻击的方式一般有三种： 存储型、反射型和文档型。存储型：       一般是将代码存储到数据库，服务器将这些数据取出返回给客户端，      客户端执行这些恶意代码，      从而达到攻击的效果。   这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。反射型：    指一般恶意脚本作为网络请求的一部分。    <span class="token comment" spellcheck="true">// 不注释这行代码，即便是md软件，即便选择了tex，都会执行，都会alert!!</span>    <span class="token comment" spellcheck="true">// 如： http://sanyuan.com?q=&lt;script>alert("你完蛋了")&lt;/script></span>        服务器拿到q参数，然后将内容返给浏览器端，        浏览器将这些内容作为html的一部分解析，        发现是一段脚本，直接执行，然后就被攻击了    之所以叫它反射型<span class="token punctuation">,</span> 是因为恶意脚本是通过作为网络请求的参数，经过服务器，然后再反射到HTML文档中，执行解析。和存储型不一样的是，服务器并不会存储这些恶意脚本。</code></pre><h6 id="文档型"><a href="#文档型" class="headerlink" title="文档型"></a>文档型</h6><pre class=" language-tex"><code class="language-tex">文档型的 XSS 攻击并不会经过服务端，而是作为中间人的角色，在数据传输过程劫持到网络数据包，然后修改里面的 html 文档！这样的劫持方式包括WIFI路由器劫持或者本地恶意软件等。</code></pre><h5 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h5><pre class=" language-js"><code class="language-js">我们可以发现，三种XSS攻击都是让恶意脚本在浏览器中执行。措施：    <span class="token number">1</span><span class="token punctuation">.</span>不相信用户的输入              无论是前端还是后端，都对用户输入的内容进行转码和过滤              如<span class="token punctuation">:</span>          <span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'你完蛋了'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>          转码后变为<span class="token punctuation">:</span>          <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>script<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>你完蛋了<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">/</span>script<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>                这样的代码在 html 解析的过程中是无法执行的。        当然也可以利用关键词过滤的方式，将 script 标签给删除。那么现在输入的就没有内容了。        <span class="token number">2</span><span class="token punctuation">.</span> 利用 CSP        CSP，即浏览器中的内容安全策略，它的核心思想就是服务器决定浏览器加载哪些资源，                具体来说可以完成以下功能<span class="token punctuation">:</span>            <span class="token number">1</span>）限制其他域下的资源加载。            <span class="token number">2</span>）禁止向其它域提交数据。            <span class="token number">3</span>）提供上报机制，能帮助我们及时发现 XSS 攻击。                    <span class="token number">3</span><span class="token punctuation">.</span> 利用 HttpOnly                    很多 XSS 攻击脚本都是用来窃取Cookie<span class="token punctuation">,</span>             而设置 Cookie 的 HttpOnly 属性后，JavaScript 便无法读取 Cookie 的值。            这样也能很好的防范 XSS 攻击。</code></pre><h4 id="csrf-攻击"><a href="#csrf-攻击" class="headerlink" title="csrf 攻击"></a>csrf 攻击</h4><pre class=" language-js"><code class="language-js"><span class="token function">CSRF</span><span class="token punctuation">(</span>Cross<span class="token operator">-</span>site request forgery<span class="token punctuation">)</span><span class="token punctuation">,</span> 即跨站请求伪造，指的是黑客诱导用户点击链接，打开黑客的网站，然后黑客利用用户目前的登录状态发起跨站请求。举个例子<span class="token punctuation">,</span> 你在某个论坛点击了黑客精心挑选的小姐姐图片，你点击后，进入了一个新的页面。那么恭喜你，被攻击了<span class="token punctuation">:</span>）<span class="token number">1</span><span class="token punctuation">.</span> 自动发起<span class="token keyword">get</span>请求   加入黑客网站里有这样一段代码：      <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"https://xxx.com/info?user=hhh&amp;count=100"</span><span class="token operator">></span>        进入页面后自动发送<span class="token keyword">get</span>请求， 这里请求会带上你 xxx<span class="token punctuation">.</span>com 的cookie 信息，如果你登陆过的话。      如果服务端没有相应的验证机制，就会认为这是一个正常用户的请求，      因为携带了相应的cookie，就可能进行转账汇款或者其他恶意操作。   <span class="token number">2</span><span class="token punctuation">.</span> 黑客可能自己写了一个表单，一个自动提交的表单。   同样会携带用户的cookie ，让服务器认为是一个正常用户的操作，让其他恶意操作成为可能。   <span class="token number">3</span><span class="token punctuation">.</span> 诱导点击触发<span class="token keyword">get</span>请求   黑客的网站上可能会放一个诱导链接来让你点击，      <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://xxx/info?user=hhh&amp;count=100"</span> taget<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>点击进入修仙世界<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    点击后发送<span class="token keyword">get</span>请求，接下来和上面 <span class="token operator">**</span><span class="token operator">*</span>自动发 GET 请求<span class="token operator">**</span><span class="token operator">*</span> 同理。</code></pre><h5 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h5><pre class=" language-js"><code class="language-js">csrf 攻击中的重要一环就是发送目标站点下的cookie<span class="token punctuation">,</span> 然后就是这一份cookie 模拟了用户身份，因此在cookie上下文章是不二之选！<span class="token number">1</span><span class="token punctuation">.</span> 利用Cookie的SameSite属性     SameSite可以设置为三个值，Strict、Lax和None。      a<span class="token punctuation">.</span> Strict 模式下，浏览器完全禁止第三方请求携带cookie<span class="token punctuation">,</span>           比如请求 karlfranz<span class="token punctuation">.</span>cn 网站只能在 karlfranz<span class="token punctuation">.</span>cn域名请求中携带cookie<span class="token punctuation">,</span>            其他网站请求都不能。       b<span class="token punctuation">.</span> Lax 模式下相对宽松一点，但只能 在<span class="token keyword">get</span>方法请求表单 或 a 发送<span class="token keyword">get</span>请求下可以 携带cookie<span class="token punctuation">,</span>          其他情况均不能。      c<span class="token punctuation">.</span> 在none模式下， 也就是默认模式，请求会自动携带cookie 。  <span class="token number">2</span><span class="token punctuation">.</span> 验证来源站点   这就需要用到请求头中的两个字段 Origin 和 Referer<span class="token punctuation">,</span>        其中Origin 只包含域名信息， 而Referer 包含了具体的url路径。      不过这两者都可以伪造，通过Ajax 的自定义请求就可以伪造，安全性略差。<span class="token number">3</span><span class="token punctuation">.</span> CSRF Token   Django 是一门后端框架，在它的表单 （template 中）开发表单时，      经常会附上这一段代码：       <span class="token punctuation">{</span><span class="token operator">%</span> csrf_token <span class="token operator">%</span><span class="token punctuation">}</span>    这就是 csrf token的典型应用，        它的原理是浏览器向服务器发送请求时，服务器生成一个字符串，将其植入返回的页面中，        然后浏览器发送和请求时，就必须带上这个字符串，来让服务器验证是否合法，        如果不合法，就不予以相应。        这个字符串就是 csrf token <span class="token punctuation">,</span>          通常第三方站点无法拿到这个token<span class="token punctuation">,</span> 因此发出的请求也就被服务器拒绝。     </code></pre><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//juejin.cn/post/6844904021308735502?utm_source=gold_browser_extension#heading-64 </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> xss与csrf攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts-check</title>
      <link href="2022/03/05/ts-check/"/>
      <url>2022/03/05/ts-check/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="ts-check"><a href="#ts-check" class="headerlink" title="ts-check"></a>ts-check</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><pre class=" language-tex"><code class="language-tex">javascript 是弱类型语言，类型校验在一定程度上能够提高代码的健壮性。typescript 已经对类型有了良好的支持，但对于一些老项目，如果替换成ts 成本和风险都是巨大的。ts-check 用于js文件，vscode自动支持，非常适合老项目，对于提高老项目的健壮性、可维护性有一定作用。</code></pre><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// @ts-check 与其他例如 @type 配合使用</span><span class="token comment" spellcheck="true">// @ts-check</span><span class="token comment" spellcheck="true">/** * 声明函数参数类型 * @param p0 {string} - TS 风格声明 p0 * @param {string}  p1 - p1 是 string 类型参数 * @param {string=} p2 - p2 是可选的 string 类型参数 * @param {string} [p3] - 另外一种可选参数写法 * @param {string} [p4="test"] - p4 是可选的 string 类型参数（默认值为 "test"） * @return {string} - 函数返回值是 string 类型 */</span> <span class="token keyword">function</span> <span class="token function">fn3</span><span class="token punctuation">(</span>p0<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> p4<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO</span>    <span class="token keyword">return</span> <span class="token string">'2'</span>  <span class="token punctuation">}</span>  <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 其中 p2、 p3, p4 皆是可选参数的写法，如果有就必须是指定的string类型</span>  <span class="token comment" spellcheck="true">// 必须 与 @ts-check配合使用</span>  <span class="token comment" spellcheck="true">//=========================================</span>  <span class="token comment" spellcheck="true">/** * 可以指定 union 类型，如字符串或者布尔值 * @type {(string | boolean)} */</span><span class="token comment" spellcheck="true">// 这样写只作用于下面第一个变量</span><span class="token keyword">let</span> var3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不能将类型“1”分配给类型“string | boolean”。ts(2322)</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">/** * 用 “return” 说明函数的返回值类型 * @return {number} */</span> <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">'1'</span> <span class="token comment" spellcheck="true">// return '1' :不能将类型“string”分配给类型“number”。</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/** * 可以像使用 "@return" 一样使用 "@returns" * @returns {{a: string, b: number}} */</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// a : 不能将类型“number”分配给类型“string”。</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 用 "@typedef" 自定义复杂类型 * @typedef {Object} SpecialType - 创建一个新的类型 'SpecialType' * @property {string} prop1 - SpecialType 属性 prop1 是 string 类型 * @property {number} prop2 - SpecialType 属性 prop2 是 number 类型 * @property {number=} prop3 - SpecialType 属性 prop3 是可选的 number 类型 * @prop {number} [prop4] - SpecialType 属性 prop4 是可选的 number 类型 * @prop {number} [prop5=42] - SpecialType 属性 prop5 是可选的 number 类型（默认值 42）） */</span><span class="token comment" spellcheck="true">/** @type {SpecialType} */</span><span class="token keyword">let</span> specialTypeObject <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 必选</span>    prop1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 不能将类型“number”分配给类型“string”</span>    prop2<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 不能将类型“boolean”分配给类型“number”。ts(2322)</span>    <span class="token comment" spellcheck="true">// 可选</span>    prop3<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    prop4<span class="token punctuation">:</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 不能将类型“string”分配给类型“number”。ts(2322)</span>    prop5<span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//imweb.io/topic/59e34d90b72024f03c7f495e</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ts-check </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>new和call</title>
      <link href="2022/03/05/new-he-call/"/>
      <url>2022/03/05/new-he-call/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="new-和call"><a href="#new-和call" class="headerlink" title="new 和call"></a>new 和call</h4><h5 id="new"><a href="#new" class="headerlink" title="new"></a>new</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> newFactory <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在传入为null的情况下 this 指向window</span>        <span class="token keyword">var</span> context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>        <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取出构造函数</span>        Constructor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将新对象的原型指向构造函数的原型</span>        obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将剩余的参数交给构造函数</span>        <span class="token comment" spellcheck="true">// 将构造函数执行，并将函数的指向 ----> 执行新对象，</span>        Constructor<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> Person <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'构造name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 构造name 小明</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>habit <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'prototype ----> i am '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prototype ----> i am 小明</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'prototype ----> i am '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">'years old'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prototype ----> i am 18years old</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'prototype ----> sex '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prototype ----> sex 男</span>        <span class="token keyword">return</span> <span class="token string">'1'</span>    <span class="token punctuation">}</span>    Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token string">'吃零食'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">newFactory</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'new 的模拟'</span><span class="token punctuation">,</span> person1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// new 的模拟 Person {name: '小明', age: 18, sex: '男'}</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'habit'</span><span class="token punctuation">,</span> person1<span class="token punctuation">.</span><span class="token function">habit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// habit 1</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// name 小明</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">,</span> person1<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// info 吃零食</span></code></pre><h5 id="call"><a href="#call" class="headerlink" title="call"></a>call</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**** 在javascript 中 call 一般用于改变this的指向，&amp;* 但更通俗的来讲，call 的作用是为了使执行的函数能够获得原本它获取不到的变量的访问权限。**/</span><span class="token comment" spellcheck="true">/*** 在实现原理上，是对希望被访问到的对象，将当前执行的函数以自身变量的形式赋予它，&amp;* 执行完毕再删除这个函数对应的变量。*/</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name = '</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// name = 木木</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age = '</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// age = 18</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'value = '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// value = 10</span><span class="token punctuation">}</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>xf_call <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> context <span class="token operator">=</span> context <span class="token operator">||</span> window    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'arguments[ '</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">' ]'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'context.fn('</span> <span class="token operator">+</span> args <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn    <span class="token keyword">return</span> result<span class="token punctuation">}</span>bar<span class="token punctuation">.</span><span class="token function">xf_call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'木木'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'对象'</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 对象 { value: 10 }</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> new和call </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="2022/03/05/sui-bi-1/"/>
      <url>2022/03/05/sui-bi-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h4><h5 id="在没有权限时点击保存当前区块的参数"><a href="#在没有权限时点击保存当前区块的参数" class="headerlink" title="在没有权限时点击保存当前区块的参数"></a>在没有权限时点击保存当前区块的参数</h5><pre class=" language-ts"><code class="language-ts">  <span class="token comment" spellcheck="true">// React.FC</span><span class="token keyword">const</span> loginViewRef<span class="token punctuation">:</span> MutableRefObject<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> saveLabelRef <span class="token operator">=</span> useRef<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// event function</span><span class="token comment" spellcheck="true">// 如果label（点击了）存在 ，就把它保存下来</span><span class="token comment" spellcheck="true">// 再次调用时，没有点击之前的区块，就用上一次的</span><span class="token operator">...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>label<span class="token punctuation">)</span> <span class="token punctuation">{</span>      saveLabelRef<span class="token punctuation">.</span>current <span class="token operator">=</span> label<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> checkKey <span class="token operator">=</span> label <span class="token operator">||</span> saveLabelRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>  <span class="token operator">...</span></code></pre><h5 id="json转换"><a href="#json转换" class="headerlink" title="json转换"></a>json转换</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> CustomJSON <span class="token operator">=</span> <span class="token punctuation">{</span>    parse<span class="token punctuation">:</span> str <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> obj<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str <span class="token operator">||</span> <span class="token string">'{}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'JSON.parse Error:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> obj <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    stringify<span class="token punctuation">:</span> obj <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> str<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            str <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'JSON.stringify error:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str <span class="token operator">||</span> <span class="token string">'{}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="批量读取、清空本地存储"><a href="#批量读取、清空本地存储" class="headerlink" title="批量读取、清空本地存储"></a>批量读取、清空本地存储</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 批量存储暂时没有，直接写更方便！</span><span class="token keyword">const</span> localArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'taskStatus'</span><span class="token punctuation">,</span> <span class="token string">'taskTodo'</span><span class="token punctuation">,</span> <span class="token string">'taskType'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> resultArr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> as <span class="token keyword">any</span><span class="token punctuation">;</span>localArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    resultArr<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> CustomJSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>taskStatus<span class="token punctuation">,</span> taskTodo<span class="token punctuation">,</span> taskType<span class="token punctuation">}</span> <span class="token operator">=</span> resultArr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// demo</span><span class="token keyword">const</span> LOCAL_KEY <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ROSE'</span><span class="token punctuation">,</span> <span class="token string">'LUCY'</span><span class="token punctuation">,</span> <span class="token string">'ALICE'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>LOCAL_KEY<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> item <span class="token operator">+</span> <span class="token string">'I LOVE YOU'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span>ROSE<span class="token punctuation">,</span> LUCY<span class="token punctuation">,</span> ALICE<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 批量清空</span><span class="token keyword">export</span> <span class="token keyword">const</span> updateTaskData <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> info<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> CustomJSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> lOCAL_KEY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        key<span class="token punctuation">:</span> <span class="token string">'taskStatus'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// text是刷新后需要同步到页面的文字，key是操作的某一个操作状态</span>        value<span class="token punctuation">:</span> <span class="token punctuation">{</span>text<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        key<span class="token punctuation">:</span> <span class="token string">'taskTodo'</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> <span class="token punctuation">{</span>text<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token punctuation">{</span>operation<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        key<span class="token punctuation">:</span> <span class="token string">'taskType'</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> <span class="token punctuation">{</span>text<span class="token punctuation">:</span> key<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// tab切换时，需要更新本地存储的key</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">lOCAL_KEY</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    actions<span class="token punctuation">.</span><span class="token function">updateTaskData</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>key<span class="token punctuation">,</span> item<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 补充</span><span class="token keyword">const</span> filterStatus <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setDefaultStatus</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setStatusKeywords</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getSyncStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  actions<span class="token punctuation">.</span><span class="token function">updateTaskData</span><span class="token punctuation">(</span><span class="token string">'taskStatus'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>text<span class="token punctuation">,</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> filterTodo <span class="token operator">=</span> <span class="token punctuation">(</span>text <span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> TodoKeywords<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setDefaultOpera</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTodoKeywords</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getSyncTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    actions<span class="token punctuation">.</span><span class="token function">updateTaskData</span><span class="token punctuation">(</span><span class="token string">'taskTodo'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>text<span class="token punctuation">,</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="自定义hook-，马上获取刚刚set的值"><a href="#自定义hook-，马上获取刚刚set的值" class="headerlink" title="自定义hook ，马上获取刚刚set的值"></a>自定义hook ，马上获取刚刚set的值</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/** * * useSyncCallback *  */</span><span class="token keyword">import</span> <span class="token punctuation">{</span>useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useCallback<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> useSyncCallback <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>callback<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">,</span> value<span class="token operator">?</span><span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>proxyState<span class="token punctuation">,</span> setProxyState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>current<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> Func <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setProxyState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>current<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyState<span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setProxyState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>current<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>proxyState<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        proxyState<span class="token punctuation">.</span>current <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Func<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> useSyncCallback<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用</span><span class="token keyword">const</span> <span class="token punctuation">[</span>statusKeywords<span class="token punctuation">,</span> setStatusKeywords<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span>ALL_TRANSLATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> filterStatus <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setDefaultStatus</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setStatusKeywords</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 刚刚set完，还是在上一次的渲染函数中，拿不到最新改变后的值，不信可以log</span>    <span class="token function">getSyncStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用同步函数，获取改变后最新的值，只在这个函数中可以获得最新的值</span>    actions<span class="token punctuation">.</span><span class="token function">updateTaskData</span><span class="token punctuation">(</span><span class="token string">'taskStatus'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>text<span class="token punctuation">,</span> key<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> getSyncStatus <span class="token operator">=</span> useSyncCallback<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">commonSortParam</span><span class="token punctuation">(</span>justOrback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> requestParams <span class="token punctuation">:</span> RequestType <span class="token operator">=</span> <span class="token punctuation">{</span>        params<span class="token punctuation">:</span> data<span class="token punctuation">,</span>        type<span class="token punctuation">:</span> chooseIndex<span class="token punctuation">,</span>        todoWords<span class="token punctuation">:</span> todoKeywords<span class="token punctuation">,</span>         status<span class="token punctuation">:</span> statusKeywords <span class="token comment" spellcheck="true">// ***在这个函数中的todoKeywords是改变后最新的！！</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">getTaskData</span><span class="token punctuation">(</span>requestParams<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h6><pre class=" language-js"><code class="language-js">随风 <span class="token number">18</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">17</span>object<span class="token punctuation">.</span>create<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>这是 ES6 正式推荐的设置原型对象的方法。<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>对象，要添加给前面对象的原型对象<span class="token punctuation">)</span>返回参数为对象本身获取对象c上的原型对象的全部属性，不含自身属性。Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>给对象的原型添加属性，不使用构造函数和类的方式。获取对象的自身属性，不包含原型对象的属性。Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (包括可枚举和不可枚举的)</span><span class="token keyword">var</span> c2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>注意： Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法不能正确拷贝 <span class="token keyword">get</span> ，<span class="token keyword">set</span> 属性<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColoredTriangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token string">'colorGet'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设为可枚举，不然 Object.assign 方法会过滤该属性</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Could it return "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将这里改为assign 会发现 colorGet 前面没有get</span><span class="token keyword">var</span> c3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>如果是要拷贝原型上的属性，就需要 Object<span class="token punctuation">.</span>assign <span class="token punctuation">,</span> Object<span class="token punctuation">.</span>create<span class="token punctuation">,</span> Object<span class="token punctuation">.</span>getPrototypeOf 方法结合使用如果是拷贝<span class="token keyword">get</span> <span class="token operator">/</span><span class="token keyword">set</span> 属性，就需要 结合 Ojbect<span class="token punctuation">.</span>getOwnPropertyDescriptors 方法链接：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>jianshu<span class="token punctuation">.</span>com<span class="token operator">/</span>p<span class="token operator">/</span>28d85bebe599</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React面试题</title>
      <link href="2022/03/05/react-mian-shi-ti/"/>
      <url>2022/03/05/react-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="React面试题"><a href="#React面试题" class="headerlink" title="React面试题"></a>React面试题</h5><h6 id="什么是-jsx"><a href="#什么是-jsx" class="headerlink" title="什么是 jsx"></a>什么是 jsx</h6><pre class=" language-js"><code class="language-js">jsx <span class="token punctuation">(</span> javascript xml <span class="token punctuation">)</span> <span class="token punctuation">,</span> 是javascript 语法的扩展，jsx    是React<span class="token punctuation">.</span>createElement 的语法糖。jsx优点：      体现了React申明式的优点，    </code></pre><h6 id="什么是-React-副作用"><a href="#什么是-React-副作用" class="headerlink" title="什么是 React 副作用"></a>什么是 React 副作用</h6><pre class=" language-js"><code class="language-js">就是除了状态相关的逻辑，比如网络请求，监听事件，查找 dom。在react中，有些副作用需要清除，有些副作用无需清除。比如手动变更dom<span class="token punctuation">,</span> 记录日志这些都无需清除。而订阅外部数据源、添加定时器等容易造成内存泄露，就很有必要清除。    例如： 组件已经卸载了，但定时器还没有关闭，那么就会报错！！        <span class="token comment" spellcheck="true">// 在组件卸载时，取消订阅外部数据源</span>    <span class="token comment" spellcheck="true">// axios 官方支持的 中断请求方法</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> source <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> fetchData <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> Axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/companies"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        cancelToken<span class="token punctuation">:</span> source<span class="token punctuation">.</span>token      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//cancelled</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> error<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    source<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>companies<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>参看资料： https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>jianshu<span class="token punctuation">.</span>com<span class="token operator">/</span>p<span class="token operator">/</span>e1ff909aca88  <span class="token comment" spellcheck="true">// 简书</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>jianshu<span class="token punctuation">.</span>com<span class="token operator">/</span>p<span class="token operator">/</span>fdab5a6fa1aa</code></pre><h6 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h6><pre class=" language-js"><code class="language-js">概念：<span class="token number">1</span><span class="token punctuation">.</span> 一个函数，它的计算不依赖外部的变量，它就是纯函数。<span class="token number">2</span><span class="token punctuation">.</span> 一个函数在执行过程中发生了外部可变的变化，就不是纯函数，反之则是。    一般来讲就是发生了和运算返回值无关的事，就不是纯函数例如：        修改外部作用域 <span class="token operator">/</span> 全局变量<span class="token punctuation">;</span>        修改传入的参数，发送请求、console<span class="token punctuation">.</span>log 、操作dom都属于副作用。        </code></pre><h6 id="useEffect-和useLayoutEffect-的区别"><a href="#useEffect-和useLayoutEffect-的区别" class="headerlink" title="useEffect 和useLayoutEffect 的区别"></a>useEffect 和useLayoutEffect 的区别</h6><pre class=" language-js"><code class="language-js">useLayoutEffect<span class="token punctuation">:</span>是在所有DOM变更之后浏览器渲染之前调用，既同步调用useEffect<span class="token punctuation">:</span>是在组件渲染到屏幕之后执行，既异步调用useLayoutEffect 相比 useEffect，通过同步执行状态更新可解决一些特性场景下的页面闪烁问题。useEffect 可以满足百分之<span class="token number">99</span>的场景，而且 useLayoutEffect 会阻塞渲染，请谨慎使用</code></pre><h6 id="什么是useRef"><a href="#什么是useRef" class="headerlink" title="什么是useRef"></a>什么是useRef</h6><pre class=" language-js"><code class="language-js">返回的 ref 对象在组件的整个生命周期内保持不变当更新 current 值时并不会 re<span class="token operator">-</span>render ，这是与 useState 不同的地方采用useRef<span class="token punctuation">,</span>作为组件实例的变量，保证获取到的数据肯定是最新的。三、useRef与createRef的区别在一个组件的正常的生命周期中可以大致分为<span class="token number">3</span>个阶段：从创建组件到挂载到DOM阶段。初始化props以及state<span class="token punctuation">,</span> 根据state与props来构建DOM组件依赖的props以及state状态发生变更，触发更新销毁阶段第一个阶段，useRef与createRef没有差别第二个阶段，createRef每次都会返回个新的引用<span class="token punctuation">;</span> 而useRef不会随着组件的更新而重新创建第三个阶段，两者都会销毁<span class="token comment" spellcheck="true">// 总结</span>useRef可以用来定义变量，这些变量更改之后不会引起页面重新渲染。<span class="token function">useRef也可以用来区分初始渲染还是更新</span><span class="token punctuation">(</span>通过current有没值，具体见示例库里的didOrUpdate<span class="token punctuation">.</span>tsx<span class="token punctuation">)</span>在DOM节点上定义ref属性，通过<span class="token punctuation">.</span>current就可以获取到该DOM元素通过forwardRef就可以给函数子组件传入ref属性。使用useImperativeHandle用于定义暴露给父组件的ref方法</code></pre><h6 id="useEffect使用异步函数"><a href="#useEffect使用异步函数" class="headerlink" title="useEffect使用异步函数"></a>useEffect使用异步函数</h6><pre class=" language-js"><code class="language-js">useEffect 不能直接使用<span class="token keyword">async</span> <span class="token keyword">await</span> 语法糖<span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* 错误用法 ，effect不支持直接 async await*/</span> <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 请求数据 */</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>useEffect 的回调参数返回的是一个清除副作用的 clean<span class="token operator">-</span>up 函数。因此无法返回 Promise，更无法使用 <span class="token keyword">async</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token comment" spellcheck="true">// 那么如何让useEffect 支持 async await ?</span><span class="token number">1</span><span class="token punctuation">.</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> getDatas <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">getDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="自定义hook-amp-高阶组件"><a href="#自定义hook-amp-高阶组件" class="headerlink" title="自定义hook &amp; 高阶组件"></a>自定义hook &amp; 高阶组件</h6><pre class=" language-js"><code class="language-js">自定义hook ：    将一些常用的，跨越多个组件的hook逻辑代码抽离出去就是一个自定义hook。    自定义 hook 内部仍使用hook<span class="token punctuation">,</span> 因此其内部同样也要遵循hook规则。    每个组件间的 state 是完全独立的。        Hook 是一种复用 状态逻辑  的方式，它不复用 state 本身。        事实上 Hook 的每次调用  都有一个完全独立的state ——         因此你可以在单个组件中多次调用同一个自定义 Hook。 <span class="token comment" spellcheck="true">// ??? 为什么是独立的state</span> 规则：      <span class="token number">1</span><span class="token punctuation">.</span> 函数名以use开头        <span class="token number">2</span><span class="token punctuation">.</span>     其他组件调用自定义hook<span class="token punctuation">,</span> 也应该放到最顶层。<span class="token comment" spellcheck="true">// 自定义 hook vs 高阶组件</span> 高阶组件同样可以封装重复的逻辑代码，达到代码复用，减少冗余代码的作用。但是：    <span class="token number">1</span><span class="token punctuation">.</span> 高阶组件 没有 自定义hook来的优雅，    <span class="token number">2</span><span class="token punctuation">.</span> 高阶组件也会导致组件嵌套层次过深。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> React面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>recent_report</title>
      <link href="2022/02/13/recent-report/"/>
      <url>2022/02/13/recent-report/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="recent-Report"><a href="#recent-Report" class="headerlink" title="recent_Report"></a>recent_Report</h3><h5 id="const定义的对象是否可以改变？-是"><a href="#const定义的对象是否可以改变？-是" class="headerlink" title="const定义的对象是否可以改变？ 是"></a>const定义的对象是否可以改变？ 是</h5><pre class=" language-js"><code class="language-js">基本数据类型：    基本数据类型保存在栈中，同时它的值也直接保存在栈中，    值与值之间相互独立，修改一个变量不会影响其他变量。引用数据类型：        引用数据类型是同时保存在栈内存和堆内存中的对象，        栈区保存了指向堆区的地址。    <span class="token keyword">const</span> 声明的只是在栈区不可变；引用数据类型保存在栈区的地址不可变。因此给一个对象其中的属性值重新赋值是可以的，但给这个对象本身重新赋值是不可以的，因为那样会改变该对象的地址。</code></pre><h5 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h5><pre class=" language-less"><code class="language-less">概念：  使用合适的 HTML 标签和属性去呈现页面的的语义<span class="token operator">/</span>解构。  例如段落使用 p 标签，段落使用 h<span class="token number">1</span><span class="token operator">-</span>h<span class="token number">6</span>等。优点：  没有 css 的情况，整个页面也可以呈现很好的语义解构。  增强代码可读性，利于团队合作。  有利于增强用户体验。  有利于 seo 搜索引擎优化、利于爬虫标记。</code></pre><h5 id="前端组件化开发"><a href="#前端组件化开发" class="headerlink" title="前端组件化开发"></a>前端组件化开发</h5><pre class=" language-tex"><code class="language-tex">传统开发模式下，往往是把前端网页代码和后端代码糅合在一起，利用某种技术(如JSP、ASP、PHP)。在这种开发模式下，网页的每次改动都需要前后端共同参与才能完成，这样有非常大的沟通成本，且效率低下。</code></pre><pre class=" language-tex"><code class="language-tex">现在流行前后端分离的开发模式，后端只负责给前端提供数据，前端负责页面渲染和交互。</code></pre><h6 id="前端为什么要进行组件化开发"><a href="#前端为什么要进行组件化开发" class="headerlink" title="前端为什么要进行组件化开发"></a>前端为什么要进行组件化开发</h6><pre class=" language-tex"><code class="language-tex">组件化可以使页面的各个部分可以吧被复用，减少重复代码；另一方面也可以更好的使团队分工合作，让不同的人编写不同的组件。前端可以借助一种框架来进行组件化开发，例如 (vue、 react angluar),此时，网页不再是由一个个独立的css、html, javascript组成的了，而是利用组件的思想将网页划分成一个个组件。如： 轮播图组件、列表组件、搜索组件，导航栏组件等，将这些组件拼装在一起，就形成一个网页。</code></pre><h5 id="mpa多页面应用"><a href="#mpa多页面应用" class="headerlink" title="mpa多页面应用"></a>mpa多页面应用</h5><pre class=" language-js"><code class="language-js">纯服务端渲染， 像使用jsp<span class="token punctuation">,</span>jade<span class="token punctuation">,</span><span class="token string">'ejs'</span><span class="token punctuation">,</span><span class="token string">'tempalte'</span> 等技术在后端生成对应的html解构，<span class="token function">然后转换成字符串，在每个对应的路由返回对应的数据</span><span class="token punctuation">(</span>不管是页面渲染数据html等内容或是要展示的数据库数据<span class="token punctuation">)</span>。Jade模版服务端渲染，代码实现：<span class="token keyword">const</span> express<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> jade <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jade'</span><span class="token punctuation">)</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token operator">**</span><span class="token operator">*</span><span class="token keyword">const</span> url path <span class="token operator">=</span> <span class="token operator">**</span><span class="token operator">*</span> <span class="token keyword">const</span> html <span class="token operator">=</span> jade<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> result<span class="token punctuation">,</span> urlPath <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//传入数据给模板引擎</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//直接吐渲染好的`html`文件拼接成字符串返回给客户端</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//RestFul接口 </span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do something</span><span class="token punctuation">}</span><span class="token punctuation">)</span>优点：     <span class="token number">1</span><span class="token punctuation">.</span> seo优化好，因为返回给前端的都是渲染好的html结构，里面的内容都可以被爬虫抓取到。    <span class="token number">2</span><span class="token punctuation">.</span> 对于一些性能要求不高的项目，内容不多的情况下直接一把梭就好，不用再搭建工程化的环境。    <span class="token number">3</span><span class="token punctuation">.</span> 对于后端来说，不用特意去学习前端。    <span class="token number">4</span><span class="token punctuation">.</span> 兼容性好，传统服务端渲染出来的都是字符串，html结构。  缺点：  <span class="token number">1</span><span class="token punctuation">.</span>如果项目很大，不利于维护。有些云计算公司，有不少使用的是非spa应用，例如一个几十万行的jquery项目，    如果文档和注释不是很全，真的无从下手。    <span class="token number">2</span><span class="token punctuation">.</span> 性能和用户体验，无法和spa比拟。    <span class="token number">3</span><span class="token punctuation">.</span> 后期迭代，升级空间不大。    <span class="token number">4</span><span class="token punctuation">.</span> 目前详ant<span class="token operator">-</span>design<span class="token operator">-</span>pro这样的库很多，单页面应用学习成本很低。  </code></pre><h5 id="spa单页面应用"><a href="#spa单页面应用" class="headerlink" title="spa单页面应用"></a>spa单页面应用</h5><pre class=" language-tex"><code class="language-tex">概念：  只有一个页面的web应用，单页面跳转仅刷新局部资源，公共资源(css，js等)仅加载一次，  常用于pc端官网，购物等网站。单页面应用的路由跳转：  1. 浏览器的url地址发生变化，但实际上并没有发送请求，也没有刷新整个页面  2. 根据配置的路由信息，每次点击切换路由，展示不同的页面，实际上是类似于选项卡的切换，div的显示隐藏，  但同时地址栏会发生变化。  3. 分为HashRouter和BrowserRouter两种模式优点：   1. 用户体验好，快，单页面应用内容的改变不需要重载整个页面，只是局部刷新，服务器压力小。    2. 前后端分离，前端页面会比较炫酷(比如页面切换时的转场动画)。    3. 如果通过大量极致优化的手段，是可以从不少方面和原生有得一拼的。    4. 共用一套后端程序代码。  缺点：  1. 不利于seo    2. 首次加载耗费时间多。    3. 导航不可用，如果要导航需要自行实现前进后退。      参考资料： https://segmentfault.com/a/1190000019936510   思否             https://zhuanlan.zhihu.com/p/92407628    知乎                        https://blog.csdn.net/cmzhuang/article/details/94334619    csdn                         未完待续.... 后续补充单页面应用带来问题的优化方案。。。。。</code></pre><h5 id="bfc"><a href="#bfc" class="headerlink" title="bfc"></a>bfc</h5><pre class=" language-less"><code class="language-less">概念：  Block Formattijng Context <span class="token punctuation">(</span>块级格式化上下文 <span class="token operator">/</span> bfc<span class="token punctuation">)</span>  BFC指页面中一个独立的块级渲染区域 <span class="token punctuation">(</span>只有块级元素有<span class="token punctuation">)</span>， 该区域有一套渲染规则。生成<span class="token property">BFC</span><span class="token punctuation">:</span>  <span class="token number">1.</span> 根元素  <span class="token number">2.</span> 设置以下元素灰生成 <span class="token property">BFC</span><span class="token punctuation">:</span>         <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left <span class="token operator">/</span> right <span class="token comment" spellcheck="true">// position的值不是 static 或者 relative</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden <span class="token operator">/</span> auto <span class="token operator">/</span> scroll        <span class="token property">position</span><span class="token punctuation">:</span> absolute <span class="token operator">/</span> fixed   </code></pre><h6 id="BFC特性"><a href="#BFC特性" class="headerlink" title="BFC特性"></a>BFC特性</h6><pre class=" language-less"><code class="language-less"><span class="token number">1.</span> 内部标签会在垂直方向一个接一个的放置。<span class="token number">2.</span> 垂直方向上的距离 margin 决定<span class="token punctuation">,</span> 属于同一个BFC的两个相邻元素的margin 会发生重叠。<span class="token number">3.</span> 每个标签的左外边距与包含块的左边界相接触 <span class="token punctuation">(</span>从左向右<span class="token punctuation">)</span>， 即使浮动标签也是如此。<span class="token number">4.</span> BFC的区域不会与float 的标签区域重叠。<span class="token number">5.</span> 计算BFC高度时，浮动子标签也参与计算。<span class="token number">6.</span> BFC 就是页面上的一个隔离的独立容器， 容器里面的子标签不会影响到外面的标签，反之亦然。</code></pre><h6 id="BFC解决的问题"><a href="#BFC解决的问题" class="headerlink" title="BFC解决的问题"></a>BFC解决的问题</h6><pre class=" language-less"><code class="language-less"><span class="token number">1.</span> 边距折叠问题  根据特性<span class="token number">2</span>， 垂直方向上的距离由margin 决定，属于同一个BFC的两个相邻元素的 margin 会发生重叠，  因此兄弟元素的外边距灰出现塌陷问题。    解决： 根据特性<span class="token number">6</span>，给其中一个兄弟元素套一个父盒。<span class="token number">2.</span> 自适应两栏或三栏布局，父元素高度塌陷  自适应两栏布局，左侧设置固定宽度<span class="token punctuation">(</span>同时设浮动<span class="token punctuation">)</span>，右侧宽度自适应，此时父元素没有设置高度，父元素就会塌陷。  解决： 根据特性<span class="token number">4</span> 让标签处于一个新的 BFC<span class="token number">3.</span> 防止文字环绕      浮动的盒子会遮盖下方的盒，但下方盒子的文字不会被遮盖，这时文字灰环绕在浮动盒子的周围。<span class="token number">4.</span> 清除浮动， 给父元素添加 <span class="token property">overflow</span><span class="token punctuation">:</span> hidden 清除浮动 <span class="token punctuation">(</span>特性<span class="token number">5</span><span class="token punctuation">)</span></code></pre><pre class=" language-tex"><code class="language-tex">参考资料： https://blog.csdn.net/sinat_36422236/article/details/88763187  csdn</code></pre><h5 id="Vue-keep-alive"><a href="#Vue-keep-alive" class="headerlink" title="Vue keep-alive"></a>Vue keep-alive</h5><pre class=" language-tex"><code class="language-tex">keep-alive 是vue提供的一个抽象组件，用于对组件进行缓存，从而节省性能，在v页面渲染完毕后不会被渲染成一个dom元素。当组件在 keep-alive 被切换时，组件的activated、deactivated这两个生命周期钩子函数会被执行。****被包裹在 keep-alive 的组件状态会被保留，例如我们将组件滑到100条的位置，那么当我们切换到另一个组件，再次切回这个组件时，该组件的状态位置依然会保留在100条的位置。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> recent_report </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elementui分页中间不显示数字</title>
      <link href="2022/02/13/elementui-fen-ye-zhong-jian-bu-xian-shi-shu-zi/"/>
      <url>2022/02/13/elementui-fen-ye-zhong-jian-bu-xian-shi-shu-zi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="elementui分页中间不显示数字"><a href="#elementui分页中间不显示数字" class="headerlink" title="elementui分页中间不显示数字"></a>elementui分页中间不显示数字</h4><pre class=" language-tex"><code class="language-tex">后端返回的count字段的值是字符串，而element-ui分页只支持数字，因而不显示，转换成数字类型即可。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> elementui分页中间不显示数字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue添加全局轮询方法</title>
      <link href="2022/02/13/vue-tian-jia-quan-ju-lun-xun-fang-fa/"/>
      <url>2022/02/13/vue-tian-jia-quan-ju-lun-xun-fang-fa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="vue添加全局轮询方法"><a href="#vue添加全局轮询方法" class="headerlink" title="vue添加全局轮询方法"></a>vue添加全局轮询方法</h3><pre class=" language-js"><code class="language-js">main<span class="token punctuation">.</span>js 新写一个方法<span class="token comment" spellcheck="true">// main.js 使用this.$route.path 会报错，</span><span class="token comment" spellcheck="true">// 使用 location代替</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>autoChange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>keyWords<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 确定是当前的组件 (当前的前端路由路径和传入的key相匹配)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>keyWords<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 全局统一管理所有页面的轮询间隔(有很多个页面有自动刷新)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 组件使用</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 初始化生命周期调用的方法</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 初始请求列表数据的方法</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token operator">...</span><span class="token punctuation">.</span>     <span class="token operator">...</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">autoChangeMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始方法中即触发轮询</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/**   * 为什么多写了一个函数？   &amp;    * 在执行的箭头函数中，将调用接口的方法 (getAppList) 执行完后，   &amp;    * 重新调组件的函数 (autoChangeMethods),   &amp;   * 可以确保每次传递的值的准确性、及时性，   &amp;   * 而不是传死值，只能使用一次   */</span>       <span class="token function">autoChangeMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">autoChange</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">// 挂载在vue原型上的函数，组件(实例可以直接使用)，这里this执行Vue.prototype</span>                <span class="token string">'union'</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 第二个参数为一个函数，原型上的函数将它执行了就好</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAppList</span><span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// table列表方法</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>uuid<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 唯一标识</span>                         <span class="token keyword">this</span><span class="token punctuation">.</span>currentPage<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当前页</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize     <span class="token comment" spellcheck="true">// 每页数量</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">autoChangeMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归轮询</span>        <span class="token punctuation">}</span>      <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 待优化</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue添加全局轮询方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js单线程异步模型</title>
      <link href="2022/01/23/js-dan-xian-cheng-yi-bu-mo-xing/"/>
      <url>2022/01/23/js-dan-xian-cheng-yi-bu-mo-xing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="单线程异步模型"><a href="#单线程异步模型" class="headerlink" title="单线程异步模型"></a>单线程异步模型</h1><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><pre class=" language-js"><code class="language-js">不像java<span class="token punctuation">,</span> javascript 是单线程，同一时间只能做一件事， 那么在同一时间又多个任务的话，就需要排队，前一个任务执行完，才会执行下一个任务。<span class="token number">2</span>javascript为什么是单线程？：    <span class="token operator">**</span><span class="token operator">*</span> javascript 单线程是为了解决很复杂的同步问题，    就比如一个线程在某个dom 节点增加内容，一个线程要删除这个dom 节点，那到底是要增加内容还是删除这个节点，这        就带来了很多复杂的问题。</code></pre><h3 id="同步异步"><a href="#同步异步" class="headerlink" title="同步异步"></a>同步异步</h3><pre class=" language-js"><code class="language-js">同步 <span class="token punctuation">(</span>阻塞<span class="token punctuation">)</span>：   javascript 会严格按照单线程 <span class="token punctuation">(</span>从上到下，从左到右<span class="token punctuation">)</span> 执行。      <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>   <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span>   <span class="token keyword">var</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b   <span class="token comment" spellcheck="true">//这个例⼦总c⼀定是3不会出现先执⾏第三⾏然后在执⾏第⼆⾏和第⼀⾏的情况</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>为什么需要异步？javascript 本身是从上到下、从左往右的执行顺序，但是如果全部都是这种方式的话，网页的某些资源就必须得等待，<span class="token function">造成不佳的用户体验。</span><span class="token punctuation">(</span>元素的渲染就是同步的任务<span class="token punctuation">)</span>因此，就有了异步出现的需要。异步 <span class="token punctuation">(</span>非阻塞<span class="token punctuation">)</span> ：       不加入主线程，加入任务队列，可以同时等待多个，待有返回值时、且执行栈被清空时进入执行栈执行！          javascript 是从上到下、从左到右的执行顺序，但是遇到异步代码不会立即执行，而是先挂起，等待所有同步代码          执行完毕再回来执行异步代码。     </code></pre><h3 id="js线程"><a href="#js线程" class="headerlink" title="js线程"></a>js线程</h3><p>一张图来说明此等关系 : </p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//s3.bmp.ovh/imgs/2022/01/acca0885427c0794.png</code></pre><pre class=" language-js"><code class="language-js">js 是单线程的，但浏览器或者node 是多线程的，来辅助js线程的执行。  <span class="token number">1</span><span class="token punctuation">.</span> GUI 渲染线程  <span class="token number">2</span><span class="token punctuation">.</span> JS引擎线程    <span class="token number">3</span><span class="token punctuation">.</span> 定时器触发线程    <span class="token number">4</span><span class="token punctuation">.</span> 浏览器事件线程    <span class="token number">5</span><span class="token punctuation">.</span> http异步线程    <span class="token number">6</span><span class="token punctuation">.</span> EventLoop事件处理线程    <span class="token number">7</span><span class="token operator">...</span><span class="token punctuation">.</span>    补充： <span class="token number">1</span> 和 <span class="token number">2</span> 是互斥的，即GUI渲染线程会阻塞js 引擎线程的计算。    原因是GUI渲染线程在渲染时，若是js改变了dom，就会造成渲染的不同步。</code></pre><h5 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h5><pre class=" language-js"><code class="language-js">电脑的任务管理器查看正在运行的程序，可以认为一个进程 <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> 就是在运行一个程序。那么浏览器打开一个网页就是一个进程。一个进程的运行需要很多线程的配合，比如打开QQ这个进程可能有接收消息线程、传输文件线程、检测安全线程<span class="token operator">...</span>因此一个网页能够正常的运行并且能够与用户交互，也需要多个线程的配合，如上 。</code></pre><h6 id="js引擎线程-（主线程）"><a href="#js引擎线程-（主线程）" class="headerlink" title="js引擎线程 （主线程）"></a>js引擎线程 （主线程）</h6><pre class=" language-js"><code class="language-js">主线程代码 <span class="token punctuation">(</span>同步代码<span class="token punctuation">)</span> 直接进入执行栈 <span class="token punctuation">(</span>函数执行栈<span class="token punctuation">)</span> 执行异步代码交给对应的线程去执行。  例如：      <span class="token number">1</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token number">2</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fun A<span class="token punctuation">)</span>  <span class="token number">3</span> <span class="token function">ajax</span><span class="token punctuation">(</span>fun B<span class="token punctuation">)</span>  <span class="token number">4</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token number">5</span> dom<span class="token punctuation">.</span><span class="token function">onclick</span><span class="token punctuation">(</span>func C<span class="token punctuation">)</span>    主线程在执行这段代码时，遇到 <span class="token number">2</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fun A<span class="token punctuation">)</span> 交给 <span class="token operator">**</span><span class="token operator">*</span>定时器触发线程去执行<span class="token operator">**</span><span class="token operator">*</span>，    遇到 <span class="token number">3</span> <span class="token function">ajax</span><span class="token punctuation">(</span>fun B<span class="token punctuation">)</span> 会交给 http <span class="token operator">**</span><span class="token operator">*</span>异步线程去执行<span class="token operator">**</span><span class="token operator">*</span>，    碰到 <span class="token number">5</span> dom<span class="token punctuation">.</span><span class="token function">onclick</span><span class="token punctuation">(</span>func C<span class="token punctuation">)</span> ，会交给 <span class="token operator">**</span><span class="token operator">*</span>浏览器事件线程<span class="token operator">**</span><span class="token operator">*</span> 去执行。   这些不同的线程，为了方便，下面统一称为 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> <span class="token operator">**</span><span class="token operator">**</span>工作线程<span class="token operator">**</span><span class="token operator">**</span>。</code></pre><p><strong>工作线程</strong> (不同的处理异步的 —&gt; 浏览器线程)</p><pre class=" language-tex"><code class="language-tex">这些线程 (工作线程) 主要做两件事，  执行主线程给过来的异步代码，  保存着回调函数，当工作线程中的定时任务时间到了，或网络请求数据返回了，将回调函数交给任务队列。</code></pre><p><strong>任务队列</strong> (消息队列)</p><pre class=" language-js"><code class="language-js">任务队列 <span class="token punctuation">(</span>先进先出的数据结构<span class="token punctuation">)</span> 保存着未来将要执行的函数，可以理解为一个静态的队列存储结构，非线程！只做存储，里面存的是一堆异步成功后的回调函数，先成功的排在队列前面，后成功的排在队列后面。比如：  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>一开始任务队列是空的，两秒后，一个 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> 的函数进入队列，在<span class="token number">3</span>秒后，一个 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> 的函数进入队列，此时队列里有两个元素，主线程从队列头中挨个取出并执行。</code></pre><p><strong>不同工作线程的区别</strong></p><pre class=" language-texx"><code class="language-texx">主线程把setTimeout、ajax、dom.onclick分别给三个线程，他们之间有些不同。1、对于setTimeout，定时器触发线程  在接收到代码时就开始计时，时间到了将回调函数扔进队列。2、对于ajax，http 异步线程  立即发起http请求，请求成功后将回调函数扔进队列。3、对于dom.onclick，浏览器事件线程  会先监听dom，直到dom被点击了，才将回调函数扔进队列。</code></pre><p><strong>EventLoop线程</strong></p><pre class=" language-tex"><code class="language-tex">在执行栈被清空时触发事件循环。事件循环会不断检测任务队列是否有任务(回调函数)可执行，有则进入执行栈执行，没有则结束本次事件循环，开启下一轮事件循环，循环往复。--------------------------------------------------------------------------对于setTimeout，setInterval的定时,也不一定会按照设定的来，因为主线程代码可能很复杂，甚至要执行很久，所以有时可能会发生你定时设置了3秒，但实际上是3.5s后执行(主线程花费了0.5s)。</code></pre><h6 id="函数执行栈-执行栈"><a href="#函数执行栈-执行栈" class="headerlink" title="函数执行栈 (执行栈)"></a>函数执行栈 (执行栈)</h6><pre class=" language-js"><code class="language-js"><span class="token function">执行栈是一个栈的数据结构</span><span class="token punctuation">(</span>先进后出<span class="token punctuation">)</span>，执行栈执行的函数执行后，会出栈销毁，然后下一个进栈，出栈。当有函数嵌套的时候，就会堆积栈帧。<span class="token keyword">function</span> <span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'task1执⾏'</span><span class="token punctuation">)</span>  <span class="token function">task2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'task2执⾏完毕'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">task2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'task2执⾏'</span><span class="token punctuation">)</span>  <span class="token function">task3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'task3执⾏完毕'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">task3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'task3执⾏'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 函数是同步执行的</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'task1执⾏完毕'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*task1执⾏task2执⾏task3执⾏task3执⾏完毕task2执⾏完毕task1执⾏完毕*/</span><span class="token comment" spellcheck="true">// 函数作用域在函数声明时就已经决定了</span><span class="token comment" spellcheck="true">// 函数调用时 创建函数执行上下文，该函数执行上下文被压入执行上下文栈</span><span class="token comment" spellcheck="true">// 使用argument 创建活动对象、this 、作用域链，并将活动对象压入函数执行上下文顶部</span><span class="token comment" spellcheck="true">// 初始化函数执行上下文</span><span class="token comment" spellcheck="true">// 执行函数</span><span class="token comment" spellcheck="true">// 函数执行完毕，从执行上下文中弹出</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span>   <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p><strong>递归</strong></p><pre class=" language-js"><code class="language-js">我们经常会在未知深度的树形结构或者其他合适的场景使用递归，但这是有风险的。递归函数可以看作是在一个函数嵌套n层执行，那么在执行过程中就会出现栈帧堆积，如果处理的数据过大，可能出现执行栈的高度不够放置新的栈帧，而造成栈溢出的错误。因此在做海量数据递归时值得注意这个问题！递归的深度：   执行栈深度根据不同的浏览器和javascript引擎 有着不同的区别。       <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      i<span class="token operator">++</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`递归了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次`</span></span><span class="token punctuation">)</span>      <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>跨越递归限制：  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    i<span class="token operator">++</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`递归了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次`</span></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//使⽤异步任务来阻⽌递归的溢出</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span>  <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>原因：     现在我们不只是在栈中执行了，新的递归函数会进入工作线程，工作线程中的函数到时间后进入 <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>    任务队列，事件循环检测到任务队列有可执行的函数，于是放入执行栈中执行，    执行完毕后出栈，然后新的递归函数再次进入 <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> 工作线程<span class="token punctuation">,</span> 如此往复。    这样一来，执行栈中永远都只有一个函数在执行，不会栈溢出。</code></pre><h6 id="宏任务微任务"><a href="#宏任务微任务" class="headerlink" title="宏任务微任务"></a>宏任务微任务</h6><pre class=" language-js"><code class="language-js">异步的代码分为宏任务和微任务，微任务先执行，宏任务是javascript最原始的异步任务，包括setTimeout、setInterVal、AJAX等。常见宏任务：                        浏览器               nodeI<span class="token operator">/</span>O                    ✅                  ✅setTimeout             ✅                  ✅setInterval            ✅                  ✅setImmediate           ❌                  ✅requestAnimationFrame  ✅                  ❌   <span class="token comment" spellcheck="true">// requestAnimationFrame 在MDN的定义为，下次⻚⾯重绘前</span><span class="token comment" spellcheck="true">// 所执⾏的操作，⽽重绘也是作为宏任务的⼀个步骤来存在的，且该步骤晚于微任务的执⾏</span>微任务：process<span class="token punctuation">.</span>nextTick       ❌                  ✅MutationObserver       ✅                  ❌Promise<span class="token punctuation">.</span>then <span class="token keyword">catch</span> <span class="token keyword">finally</span>  ✅             ✅<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timer1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'UI update'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timer2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise 1'</span><span class="token punctuation">)</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise 2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise then'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// promise 1</span><span class="token comment" spellcheck="true">// promise 2</span><span class="token comment" spellcheck="true">// end</span><span class="token comment" spellcheck="true">// promise then</span><span class="token comment" spellcheck="true">// timer1</span><span class="token comment" spellcheck="true">// timer2</span><span class="token comment" spellcheck="true">// UI update</span><span class="token comment" spellcheck="true">// promise 1</span><span class="token comment" spellcheck="true">// promise 2</span><span class="token comment" spellcheck="true">// end</span><span class="token comment" spellcheck="true">// promise then</span><span class="token comment" spellcheck="true">// UI update</span><span class="token comment" spellcheck="true">// timer1</span><span class="token comment" spellcheck="true">// timer2</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2，1，4，3</span></code></pre><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><pre class=" language-js"><code class="language-js">Promise 主要是为了解决异步回调地狱的问题。她是将异步回调嵌套，拆解成链式调用，这样便可以将代码按照上下顺序来进行异步代码的流程控制。Pomise对象相当于⼀个未知状态的对象，他的定义就是声明⼀个等待未来结果的对象，在结果发⽣之前他⼀直是初始状态，在结果发⽣之后他会变成其中⼀种⽬标状态，它的名字 Promise 中⽂翻译为保证。因此 Promise <span class="token function">对象是一个严谨的对象，一定会如约执行！</span><span class="token punctuation">(</span>使用不当除外<span class="token punctuation">)</span>Promise函数中既存在同步函数，也存在异步函数。她的初始化函数即为同步函数，then <span class="token keyword">catch</span> <span class="token keyword">finally</span> 为异步函数。</code></pre><h5 id="promise三种状态"><a href="#promise三种状态" class="headerlink" title="promise三种状态"></a>promise三种状态</h5><pre class=" language-js"><code class="language-js">pending<span class="token punctuation">:</span> 初始状态 <span class="token punctuation">(</span>就绪状态<span class="token punctuation">)</span><span class="token punctuation">,</span> 此时promise仅做了初始化并注册了他对象上的所有任务。fulfilled<span class="token punctuation">:</span> 已完成，当初始化函数中执行reslove时，promise的状态变为fulfilled<span class="token punctuation">,</span>同时then 函数中的回调函数开始执行，relslove传递的函数会作为后面then 回调函数的形参。若初始化函数中不使用 reslove<span class="token punctuation">,</span> 那么then 中的回调也不会执行！若初始化函数执行了两种状态，只会取最先执行的状态。<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'then执⾏'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'catch执⾏'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally执⾏'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'then执⾏'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'catch执⾏'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally执⾏'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">}</span>MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发了then'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span>本质是我们调用这些链式函数的结尾时，它又返回了一个 包含它自己的对象，或是 “新的自己”。补充：<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'我是Promise的值'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//该res的结果是resolve传递的参数</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//该res的结果是undefined</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token string">'123'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//该res的结果是123</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//该res的结果是456</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token string">'我是直接返回的结果'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token string">'我是字符串'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//该res的结果是“我是直接返回的结果”</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/**Promise {&lt;fulfilled>: '我是Promise的值'}VM111:7 我是Promise的值VM111:10 undefinedVM111:14 123VM111:20 456VM111:26 我是直接返回的结果Promise {&lt;fulfilled>: undefined}*/</span><span class="token comment" spellcheck="true">/**只要有then， 且触发了reslove，整个链条就会执行到结尾。后续每个then 中的回调都可以return一个值，这个值作为下一个then 回调中的参数，若返回的是一个Promise对象，这个对象中的reslove的结果就会是下一个then 中的形参，若没有返回，那么下一个then中的函数接收到的就是undefined,若then 中传入的 **不是函数** ，或没有传值，链式调用同样不会中断，且在这之前最近的一次返回结果，会传入离它最近的then 的回调函数作为参数。*/</span>中断链式调用：<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'我是Promise的值'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//有两种⽅式中断Promise</span><span class="token comment" spellcheck="true">// throw('我是中断的原因')</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'我是中断的原因'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>中断链式调用是否违背promise精神？问题： promise状态一但确定，就不会再改变，那为什么在初始化函数中执行了reslove <span class="token punctuation">,</span>此时promise 的状态就已经是fulfilled了，但后面执行了中断操作，中断后promise的状态就是reject了，在同一个promise对象中出现了两种状态，这并不科学！<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'我是Promise的值'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> p1 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token operator">===</span>p<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Promise {&lt;fulfilled>: '我是Promise的值'}</span><span class="token comment" spellcheck="true">// VM277:7 Promise {&lt;pending>}</span><span class="token comment" spellcheck="true">// VM277:8 false</span>可以看到<span class="token punctuation">.</span>then之后，是一个新的promise对象，与<span class="token punctuation">.</span>then之前的 promise对象不是同一个对象，且这个新对象的状态为 pending （初始状态），那么在一个全新的promise对象中，正常执行 reslove 或 中断操作，与它之前的promise对象已经确定的状态，就没有什么关系了。因此，并不违背！</code></pre><h5 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h5><pre class=" language-js"><code class="language-js">有时我们请求数据需要用到上一个接口返回的数据、亦或是需要调用数个接口，待得他们全部返回，才开始渲染页面，这时，若我们使用Promise<span class="token punctuation">.</span>then 函数的异步控制，可以保证三个接口按照顺序调用，但用then 就必须当下这一个接口完成才能调下一个，这样无疑增加了时间。针对这个问题，Promsise增加一个all方法。Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'res'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>将多个Promise包装成一个Promise实例，成功时返回一个结果数组，失败时返回最先被reject状态的值。<span class="token operator">*</span> <span class="token operator">**</span> 值得注意的是：<span class="token operator">*</span> Promise<span class="token punctuation">.</span>all获得成功的结果数组里面的 <span class="token operator">**</span><span class="token operator">*</span>数据顺序与接收到的数组顺序是一致的。</code></pre><h5 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// race 使用格式与all相同</span><span class="token comment" spellcheck="true">// 顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，</span><span class="token comment" spellcheck="true">// 就返回那个结果，不管结果本身是成功状态还是失败状态</span>假设我们有一个播放视频的页面，为了确保用户的低延迟，一般都会有多个媒体数据源，进入页面时，让多个数据源进行竞赛，将那个速度最快，即延迟最低的数据源设置为用于用户播放视频的默认数据源。Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'res'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h5><pre class=" language-js"><code class="language-js">我们发现 <span class="token keyword">async</span> <span class="token keyword">await</span> 的编写⽅式与Generator函数结构很相似，提案中规定了我们可以使⽤<span class="token keyword">async</span>修饰⼀个函数，这样就能在该函数的直接⼦作⽤域中，使⽤<span class="token keyword">await</span>来⾃动的控制函数的流程，<span class="token keyword">await</span> 右侧可以编写任何变量或对象，当右侧是普通对象的时候函数会⾃动返回右侧的结果并向下执⾏，⽽当<span class="token keyword">await</span>右侧为Promise对象时，如果Promise对象状态没有变成完成，函数就会挂起等待，直到Promise对象变成fulfilled，程序再向下执⾏，并且Promise的值会⾃动返回给<span class="token keyword">await</span>左侧的变量中。<span class="token keyword">async</span>和<span class="token keyword">await</span>需要成对出现，<span class="token keyword">async</span>可以单独修饰函数，但是<span class="token keyword">await</span>只能在被<span class="token keyword">async</span>修饰的函数中使⽤。<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token operator">...</span>  <span class="token keyword">await</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">1</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 1 3 2</span>      <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token number">4</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">1</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1 3 2 4</span>  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><h5 id="try"><a href="#try" class="headerlink" title="try"></a>try</h5><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">MyPromise</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>promiseState <span class="token operator">=</span> <span class="token string">"pending"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>promiseValue <span class="token operator">=</span> undefined<span class="token punctuation">;</span>    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> reslove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>promiseState <span class="token operator">===</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _this<span class="token punctuation">.</span>promiseState <span class="token operator">=</span> <span class="token string">"fulfilled"</span><span class="token punctuation">;</span>        _this<span class="token punctuation">.</span>promiseValue <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 传入类型为promise对象时</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            _this<span class="token punctuation">.</span><span class="token function">thenCallback</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 传入的为基本数据类型时</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>thenCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>              _this<span class="token punctuation">.</span><span class="token function">thenCallback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> reject <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>promiseState <span class="token operator">===</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _this<span class="token punctuation">.</span>promiseState <span class="token operator">=</span> <span class="token string">"rejected"</span><span class="token punctuation">;</span>        _this<span class="token punctuation">.</span>promiseValue <span class="token operator">=</span> err<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// catch 跨对象监听</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>catchCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>          _this<span class="token punctuation">.</span><span class="token function">catchCallback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>thenCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>          _this<span class="token punctuation">.</span><span class="token function">thenCallback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token string">"this promise is reject, but can not get catch"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">fn</span><span class="token punctuation">(</span>reslove<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token string">"Init Error , Please use a function to init MyPromisr"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//   MyPromise.prototype.then = function (callback) {</span>  <span class="token comment" spellcheck="true">//     let _this = this;</span>  <span class="token comment" spellcheck="true">//     // return 一个promise对象 ---> 支持链式调用</span>  <span class="token comment" spellcheck="true">//     return new MyPromise((reslove, reject) => {</span>  <span class="token comment" spellcheck="true">//       _this.thenCallback = (value) => {</span>  <span class="token comment" spellcheck="true">//         let callbackRes = callback(value);</span>  <span class="token comment" spellcheck="true">//         reslove(callbackRes);</span>  <span class="token comment" spellcheck="true">//       };</span>  <span class="token comment" spellcheck="true">//     });</span>  <span class="token comment" spellcheck="true">//   };</span>  <span class="token comment" spellcheck="true">// 支持中断</span>  MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      _this<span class="token punctuation">.</span>thenCallback <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>promiseState <span class="token operator">===</span> <span class="token string">"rejected"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> callbackRes <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>callbackRes <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>callbackRes<span class="token punctuation">.</span>promiseState <span class="token operator">===</span> <span class="token string">"rejected"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              callbackRes<span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">reslove</span><span class="token punctuation">(</span>callbackRes<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">catch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      _this<span class="token punctuation">.</span>catchCallback <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> callbackRes <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>callbackRes<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  MyPromise<span class="token punctuation">.</span>reject <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// then</span>  <span class="token comment" spellcheck="true">//   const p = new MyPromise((reslove, reject) => {</span>  <span class="token comment" spellcheck="true">//     reslove("123");</span>  <span class="token comment" spellcheck="true">//   });</span>  <span class="token comment" spellcheck="true">//   console.log("p", p);</span>  <span class="token comment" spellcheck="true">//   p.then((res) => {</span>  <span class="token comment" spellcheck="true">//     console.log("res--->", res);</span>  <span class="token comment" spellcheck="true">//     return 'what'</span>  <span class="token comment" spellcheck="true">//   })</span>  <span class="token comment" spellcheck="true">//   .then(res => {</span>  <span class="token comment" spellcheck="true">//       console.log('第二次链式', res);</span>  <span class="token comment" spellcheck="true">//   })</span>  <span class="token comment" spellcheck="true">//   ;</span>  <span class="token comment" spellcheck="true">// catch</span>  <span class="token comment" spellcheck="true">//   const p = new MyPromise((reslove, reject) => {</span>  <span class="token comment" spellcheck="true">//     reject("出错了");</span>  <span class="token comment" spellcheck="true">//   });</span>  <span class="token comment" spellcheck="true">//   p.then((res) => {</span>  <span class="token comment" spellcheck="true">//     console.log("res--->", res);</span>  <span class="token comment" spellcheck="true">//     return 'what'</span>  <span class="token comment" spellcheck="true">//   })</span>  <span class="token comment" spellcheck="true">//   .catch(res => console.log('错误---》', res))</span>  <span class="token comment" spellcheck="true">// 中断</span>  <span class="token comment" spellcheck="true">//   var p = new MyPromise(function (resolve, reject) {</span>  <span class="token comment" spellcheck="true">//     resolve(123);</span>  <span class="token comment" spellcheck="true">//   });</span>  <span class="token comment" spellcheck="true">//   console.log(p);</span>  <span class="token comment" spellcheck="true">//   p.then(function (res) {</span>  <span class="token comment" spellcheck="true">//     console.log("then1执⾏");</span>  <span class="token comment" spellcheck="true">//     return 456;</span>  <span class="token comment" spellcheck="true">//   })</span>  <span class="token comment" spellcheck="true">//     .then(function (res) {</span>  <span class="token comment" spellcheck="true">//       console.log("then2执⾏");</span>  <span class="token comment" spellcheck="true">//       return MyPromise.reject("中断了");</span>  <span class="token comment" spellcheck="true">//     })</span>  <span class="token comment" spellcheck="true">//     .then(function (res) {</span>  <span class="token comment" spellcheck="true">//       console.log("then3执⾏");</span>  <span class="token comment" spellcheck="true">//       return 789;</span>  <span class="token comment" spellcheck="true">//     })</span>  <span class="token comment" spellcheck="true">//     .then(function (res) {</span>  <span class="token comment" spellcheck="true">//       console.log("then4执⾏");</span>  <span class="token comment" spellcheck="true">//       return 666;</span>  <span class="token comment" spellcheck="true">//     })</span>  <span class="token comment" spellcheck="true">//     .catch(function (err) {</span>  <span class="token comment" spellcheck="true">//       console.log("catch执⾏");</span>  <span class="token comment" spellcheck="true">//       console.log(err);</span>  <span class="token comment" spellcheck="true">//     });</span>  MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>all <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>promiseArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> resArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> errValue <span class="token operator">=</span> undefined<span class="token punctuation">;</span>    <span class="token keyword">let</span> isRejected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>reslove<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promiseArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>          promiseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              resArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>              <span class="token keyword">let</span> allDone <span class="token operator">=</span> promiseArr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> item<span class="token punctuation">.</span>promiseState <span class="token operator">===</span> <span class="token string">"fulfilled"</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>allDone<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">reslove</span><span class="token punctuation">(</span>resArr<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              isRejected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              errValue <span class="token operator">=</span> err<span class="token punctuation">;</span>              <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isRejected<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>promiseArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promiseArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            promiseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>end <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    end <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token function">reslove</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>end <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    end <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js单线程异步模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码正则</title>
      <link href="2022/01/09/mi-ma-zheng-ze/"/>
      <url>2022/01/09/mi-ma-zheng-ze/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="密码正则"><a href="#密码正则" class="headerlink" title="密码正则"></a>密码正则</h4><pre class=" language-js"><code class="language-js">     <span class="token comment" spellcheck="true">// 必须包含数字和字母 || 纯数字 || 纯字母， 1到50位</span>     REGEX_USER<span class="token punctuation">:</span> <span class="token regex">/^((?=.*\d)(?=.*[a-zA-Z])|(?=.*\d)|(?=.*[a-zA-Z])).{1,50}$/</span><span class="token punctuation">,</span>          REGEX_USER<span class="token punctuation">:</span> <span class="token regex">/^(?![\d]+$)(?![a-zA-Z]+$).{1,50}$/</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">// 必须包含数字、大写字母、小写字母、特殊字符 6 到 30位</span>              REGEX_PASS<span class="token punctuation">:</span> <span class="token regex">/^(?=.*[0-9])(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{6,30}$/</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">// 必须包含数字、大小写字母、特殊字符 三种， 6 到 30位 (大写和小写字母为一类型)   </span>              REGEX_PASS<span class="token punctuation">:</span> <span class="token regex">/^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[^a-zA-Z0-9]).{6,30}$/</span><span class="token punctuation">,</span>              REGEX_PASS<span class="token punctuation">:</span> <span class="token regex">/^(?![\d]+$)(?![a-z]+$)(?![A-Z]+$)(?![^a-zA-Z0-9]+$).{6,30}$/</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">//  必须包含数字、大小写字母、特殊字符 四种中的三种， 6 到 30位     </span>              REGEX_PASS<span class="token punctuation">:</span> <span class="token regex">/^(?![a-zA-Z]+$)(?![A-Z0-9]+$)(?![A-Z\W_]+$)(?![a-z0-9]+$)(?![a-z\W_]+$)(?![0-9\W_]+$)[a-zA-Z0-9\W_]{6,30}$/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必须包含其中三种</span></code></pre><pre class=" language-js"><code class="language-js">问题：     <span class="token operator">?</span><span class="token operator">=</span> 与 <span class="token operator">?</span><span class="token operator">!</span> 的区别    为什么必须加 <span class="token operator">^</span> 和 $ ，对于最少和最多位的限制才有效果？    <span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">}</span>$ 与  <span class="token number">9</span>\W_<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">}</span>$<span class="token punctuation">,</span> 加 <span class="token punctuation">.</span> 和不加的区别。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 密码正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue路由跳转引发父组件重渲问题</title>
      <link href="2022/01/09/vue-lu-you-tiao-zhuan-yin-fa-fu-zu-jian-chong-xuan-wen-ti/"/>
      <url>2022/01/09/vue-lu-you-tiao-zhuan-yin-fa-fu-zu-jian-chong-xuan-wen-ti/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="vue路由跳转引发父组件重渲问题"><a href="#vue路由跳转引发父组件重渲问题" class="headerlink" title="vue路由跳转引发父组件重渲问题"></a>vue路由跳转引发父组件重渲问题</h4><pre class=" language-js"><code class="language-js">描述：     在父级组件下，跳转不同的子级路由 ，$router<span class="token punctuation">.</span>push 在跳转到子级路由时，同样会触发父组件的渲染。带来的问题<span class="token punctuation">:</span>     父级路由中有一个el<span class="token operator">-</span>tabs ，点击不同的tab， 会动态切换下面的子级路由，在这些tabs的click时间中，        会判断el<span class="token operator">-</span>tab<span class="token operator">-</span>pane 的 name <span class="token punctuation">,</span> 以不同的name 来跳转（query <span class="token operator">||</span> name） <span class="token punctuation">,</span>            点击的一瞬间会显示tab已经切过去，但马上又会跳到初始状态。原因：         <span class="token operator">**</span><span class="token operator">*</span>路由的跳转引发了父组件的重渲，父组件重渲时将el<span class="token operator">-</span>tabs<span class="token operator">-</span>pane的值重置为初始值。解决：   <span class="token operator">**</span>计算属性似乎不能解决这个问题。    data中的默认值设为<span class="token string">''</span><span class="token punctuation">,</span>     路由跳转时添加路由参数，参数为el<span class="token operator">-</span>tab<span class="token operator">-</span>pane的name值，      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      tabActive<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token operator">...</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span>  <span class="token function">handelTabsChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/home/list'</span><span class="token punctuation">,</span>        query<span class="token punctuation">:</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> tab<span class="token punctuation">.</span>name        <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">...</span>    组件初始化时读 <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name <span class="token punctuation">,</span>赋值给el<span class="token operator">-</span>tabs的v<span class="token operator">-</span>model。    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tabActive <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">'one'</span>， <span class="token comment" spellcheck="true">// 路由参数没有值就读默认值, 用于第一次的赋值</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue路由跳转引发父组件重渲问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue面包屑</title>
      <link href="2022/01/09/vue-mian-bao-xie/"/>
      <url>2022/01/09/vue-mian-bao-xie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="vue面包屑"><a href="#vue面包屑" class="headerlink" title="vue面包屑"></a>vue面包屑</h4><pre class=" language-tex"><code class="language-tex">meta.$router.matched一个数组，包含当前路由所有嵌套路径的路由记录  （当前组件路由 的 包含嵌套关系的路由全称，可以以此来做面包屑导航）拿到这个数组后，再利用v-for 遍历出 el-breadcrumb-item 即可</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue面包屑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床使用</title>
      <link href="2021/12/26/tu-chuang-shi-yong/"/>
      <url>2021/12/26/tu-chuang-shi-yong/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="图床使用"><a href="#图床使用" class="headerlink" title="图床使用"></a>图床使用</h3><pre class=" language-tex"><code class="language-tex">使用图床能将我们的本地图片放在网上，类似于cdn。这样将会非常方便我们在博客中使用一些图片，来解释一些图片便于解释的例子或其他问题。</code></pre><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><pre class=" language-tex"><code class="language-tex">打开  https://imgurl.org/  网站，将想要放在网上的图片拖上去，然后就便捷的生成了各种使用的方式。由于这里因为hexo 不支持的问题，这里只展示生成的地址，</code></pre><h5 id="星空皓月"><a href="#星空皓月" class="headerlink" title="星空皓月"></a>星空皓月</h5><p><a href="https://s3.bmp.ovh/imgs/2021/12/591776577fa8c606.jpg">https://s3.bmp.ovh/imgs/2021/12/591776577fa8c606.jpg</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 图床使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>词法作用域与动态作用域</title>
      <link href="2021/12/26/ci-fa-zuo-yong-yu-yu-dong-tai-zuo-yong-yu/"/>
      <url>2021/12/26/ci-fa-zuo-yong-yu-yu-dong-tai-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="词法作用域与动态作用域"><a href="#词法作用域与动态作用域" class="headerlink" title="词法作用域与动态作用域"></a>词法作用域与动态作用域</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><pre class=" language-tex"><code class="language-tex">作用域是指程序源代码中定义变量的区域。作用域规定了如何查找变量，即当前执行代码对变量的访问权限。JavaScript采用词法作用域(lexical scoping)，即静态作用域。</code></pre><h4 id="静态作用域与动态作用域"><a href="#静态作用域与动态作用域" class="headerlink" title="静态作用域与动态作用域"></a>静态作用域与动态作用域</h4><pre class=" language-tex"><code class="language-tex">因为 JavaScript采用词法作用域，因此函数作用域在定义时就被决定了。而词法作用域相对的是动态作用域，即函数的作用域在调用的时候决定。</code></pre><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结果是 ???    1</span></code></pre><h5 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h5><pre class=" language-tex"><code class="language-tex">bash是动态作用域，将文件后缀改成bash,然后进入相应的目录，执行 bash ./***.bash</code></pre><pre class=" language-bash"><code class="language-bash">value<span class="token operator">=</span>1<span class="token keyword">function</span> foo <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$value</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> bar <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    local value<span class="token operator">=</span>2<span class="token punctuation">;</span>    foo<span class="token punctuation">;</span><span class="token punctuation">}</span>bar // 2</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 词法作用域与动态作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="2021/12/26/bi-bao/"/>
      <url>2021/12/26/bi-bao/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h4 id="理论上的闭包"><a href="#理论上的闭包" class="headerlink" title="理论上的闭包"></a>理论上的闭包</h4><p><strong>mdn对闭包的定义为：</strong></p><pre class=" language-tex"><code class="language-tex">可以访问自由变量的函数。</code></pre><p><strong>什么是自由变量？</strong></p><pre class=" language-tex"><code class="language-tex">自由变量指在函数中使用，但既不是函数参数，也不是函数的局部变量的变量。</code></pre><p>**由此可以看出，闭包由两部分组成： **</p><pre class=" language-tex"><code class="language-tex">函数 + 函数能访问到的自由变量。</code></pre><p>例如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-tex"><code class="language-tex">函数foo可以访问变量a，但变量a既不是函数参数，也不是函数的局部变量，所以a就是自由变量，那么，函数foo和函数foo能访问到的变量就构成了一个闭包。所以在《JavaScript权威指南》中就讲到：从技术的角度讲，所有的JavaScript函数都是闭包。</code></pre><h4 id="实践角度上的闭包"><a href="#实践角度上的闭包" class="headerlink" title="实践角度上的闭包"></a>实践角度上的闭包</h4><pre class=" language-tex"><code class="language-tex">ECMAScript中，闭包指的是：1. 从理论角度：    所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。    哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。2. 从实践角度：以下函数才算是闭包：    即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）    在代码中引用了自由变量</code></pre><h6 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h6><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"global scope"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"local scope"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> scope<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 执行过程&amp;* 进入全局代码，创建全局执行上下文，全局执行上下文被压入执行上下文栈。&amp; * 全局上下文初始化&amp;* 执行checkscope 函数，创建checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈。&amp;* checkscope 执行上下文初始化，创建 变量对象、作用域链，this等。&amp;* checkscope 函数执行完毕，checkscope 函数执行上下文从执行上下文栈中弹出。&amp;* 执行 f 函数，创建 f 函数执行上下文，f 函数执行上下文被压入执行上下文栈。&amp;* f 执行上下文初始化，创建 变量对象、作用域链，this等。&amp;* f 函数执行完毕，f 函数执行上下文从执行上下文栈中弹出。*/</span></code></pre><h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** 在f函数执行的时候，需要思考一个问题：&amp;* checkscope 的执行上下文已经被销毁了， f 函数怎么还能读取到 checkscope 作用域下的值呢？&amp;* 其他语言可能做不到这一点，但JavaScript 却可以！&amp;&amp;&amp;* 因为 javascript 是 词法作用域的原因，函数作用域 (链) 在声明时就被决定了。&amp;* 同时，函数在声明时会保存 ***对它上级执行上下文( 文本环境、作用域)的 引用 &amp;* (如果在自己的执行上下文找不到，就去自己内部的作用域链找)* */</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** 而现在的 f 函数内部就维护了这样的一个作用域链 (即 自己的执行上下文、checkscope 函数执行上下文，全局执行上下文)&amp;* 可以看到在 f 函数的scope 属性上，有自己的执行上下文、它上级的执行上下文，和全局执行上下文，&amp;* 这些不同的执行上下文，在函数声明时就被决定了。*/</span>fContext <span class="token operator">=</span> <span class="token punctuation">{</span>    Scope<span class="token punctuation">:</span> <span class="token punctuation">[</span>AO<span class="token punctuation">,</span> checkscopeContext<span class="token punctuation">.</span>AO<span class="token punctuation">,</span> globalContext<span class="token punctuation">.</span>VO<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h6 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h6><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** 就是因为这个作用域链的存在，即便 checkscope 的执行上下文 已经销毁，&amp;* 但 f函数依然可以读取到 checkscopeContext.AO (checkscope 执行上下文)的值。&amp;* 这样，即便 checkscopeContext 被销毁了， 但 JavaScript 依然会让 checkscopeContext  活在内存中，&amp; * f函数依然可以通过作用域链找到它，&amp; * 正是因为 JavaScript 做到了这一点，从而实现了闭包这个概念。(这句话还不是很理解)*/</span></code></pre><h6 id="返回理论角度上的闭包："><a href="#返回理论角度上的闭包：" class="headerlink" title="返回理论角度上的闭包："></a>返回理论角度上的闭包：</h6><pre class=" language-tex"><code class="language-tex">1. 即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）2. 在代码中引用了自由变量</code></pre><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://github.com/mqyqingfeng/Blog/issues/9">https://github.com/mqyqingfeng/Blog/issues/9</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>执行上下文</title>
      <link href="2021/12/19/zhi-xing-shang-xia-wen/"/>
      <url>2021/12/19/zhi-xing-shang-xia-wen/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><h4 id="var-function-let-const-class"><a href="#var-function-let-const-class" class="headerlink" title="var   function  ;   let   const   class"></a>var   function  ;   let   const   class</h4><pre class=" language-js"><code class="language-js">   <span class="token keyword">var</span> 与<span class="token keyword">function</span> 会在全局对象 <span class="token punctuation">(</span>window<span class="token punctuation">)</span> 申明 <span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">const</span>  <span class="token keyword">class</span> 在全局scope中申明 <span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 函数体</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">,</span> aaa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: aaa is not defined</span>    <span class="token comment" spellcheck="true">// 其实let  const  class </span>  <span class="token keyword">var</span> 申明时初始化为 undefined    <span class="token keyword">let</span> <span class="token keyword">const</span> <span class="token keyword">class</span> <span class="token punctuation">(</span>scope<span class="token punctuation">)</span> 只是登记，没有初始化，因此不可使用，也没有 “变量提升”  <span class="token comment" spellcheck="true">/** 函数创建时会初始化一个函数对象并赋值给这个变量名，  &amp;  * 函数在创建时会保留它创建时的文本环境，并保持对这个文本环境的引用  &amp;  * 也就是该函数能使用它创建时文本环境的 ***变量  */</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'foo'</span>   <span class="token punctuation">}</span>   <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">var</span> aaa <span class="token operator">=</span> <span class="token number">1</span>   <span class="token punctuation">}</span></code></pre><h4 id="函数作用域（-执行上下文-文本环境-）"><a href="#函数作用域（-执行上下文-文本环境-）" class="headerlink" title="函数作用域（ 执行上下文  | |  文本环境 ）"></a>函数作用域（ 执行上下文  | |  文本环境 ）</h4><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">//  ***函数作用域在创建时决定，不是调用时决定!；</span> <span class="token comment" spellcheck="true">//  在函数创建时，会保留创建时的执行上下文(可以引用)</span>  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 创建时在全局创建，所以foo的执行上下文也就被保留了，foo函数可以应用它的执行上下文的变量</span></code></pre><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> sss <span class="token operator">=</span> <span class="token string">'111'</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 此处执行完会效果，文本环境交给全局文本环境         不是特别理解</span>     <span class="token keyword">let</span> sss <span class="token operator">=</span> <span class="token string">'222'</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'块级'</span><span class="token punctuation">,</span> sss<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 块级 222</span>   <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'全局'</span><span class="token punctuation">,</span> sss<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全局 111</span>  <span class="token comment" spellcheck="true">// 块中的函数有变量提升吗？</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mmm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>  <span class="token comment" spellcheck="true">// 块中的函数声名是否与全局的var let const 是否重复，重复了就不对此函数做任何处理，</span>  <span class="token comment" spellcheck="true">// 若没有重复就在全局对象中创建一个与函数名同名的变量并初始化为undefined</span>  <span class="token comment" spellcheck="true">// 与全局声明的函数 的区别是，全局声明的函数可以马上调用，而块中的函数初始化是undefined</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 为 true 下面就可以调用</span>    <span class="token keyword">function</span> <span class="token function">mmm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'块中的函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// mmm()</span></code></pre><pre class=" language-js"><code class="language-js"> <span class="token keyword">let</span> ooo <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">ooo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sdsds'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token function">ooo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 报错：ooo is not a function！ 函数和var 都在全局对象中声明，</span> <span class="token comment" spellcheck="true">// let在全局scope中声明，块中的变量ooo在全局对象找不到ooo，无法替换</span></code></pre><pre class=" language-js"><code class="language-js">  <span class="token keyword">var</span> ooo  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里块中的函数与全局对象的变量var重名了，所以这里不会对这个函数做任何处理</span>    <span class="token keyword">function</span> <span class="token function">ooo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sdsds'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">ooo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// sdsds   不报错</span><span class="token comment" spellcheck="true">// 也是一个文本环境? 待定</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 执行上下文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目总结</title>
      <link href="2021/12/18/xiang-mu-zong-jie/"/>
      <url>2021/12/18/xiang-mu-zong-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-关于父子组件传值"><a href="#1-关于父子组件传值" class="headerlink" title="1.关于父子组件传值"></a>1.关于父子组件传值</h4><pre class=" language-js"><code class="language-js">在父组件定义好类型，给传递的值加上类型，子组件引入父组件定义的这个类型，直接用就好，不用再到子组件定义额外的类型了</code></pre><h4 id="2-Ant-design-Table-coloumn-属性的render-函数定义了两个可选值"><a href="#2-Ant-design-Table-coloumn-属性的render-函数定义了两个可选值" class="headerlink" title="2. Ant-design Table coloumn 属性的render 函数定义了两个可选值"></a>2. Ant-design Table coloumn 属性的render 函数定义了两个可选值</h4><pre class=" language-jsx"><code class="language-jsx">render<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">:</span> string<span class="token punctuation">,</span> record<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> ReactElement<span class="token comment" spellcheck="true">// 第一个默认为一个对象属性，第二个为这一行的对象，</span><span class="token comment" spellcheck="true">// 多数地方需要用到第一个参数，少数地方用到第二个参数（不用第一个参数）</span><span class="token comment" spellcheck="true">// 但如果不传第一个参数，第二个参数，这一行的对象回默认补位为第一个</span><span class="token comment" spellcheck="true">// 参数，***也就是我们拿不到 那一行的对象， 而如果传了第一个参数不用，</span><span class="token comment" spellcheck="true">// eslint会报错，出于代码规范也不能这样做？ 怎么办?</span><span class="token comment" spellcheck="true">// 这样写： 或 (record ，_)</span>render<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> record<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">renderTodo</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 使用 _ 站位， ts写法。</span></code></pre><h4 id="3-组件函数使用async-await-调用外部函数请求数据"><a href="#3-组件函数使用async-await-调用外部函数请求数据" class="headerlink" title="3. 组件函数使用async await 调用外部函数请求数据"></a>3. 组件函数使用async await 调用外部函数请求数据</h4><pre class=" language-jsx"><code class="language-jsx">在组件函数内取得值，就添加到useState 里或者将这个值使用dispach传给redux。组件使用 useSelecter取值。<span class="token operator">**</span><span class="token operator">*</span> 犯的错误点，组件定义了这个<span class="token keyword">async</span>函数，在useEffect调用，希望在useEffect获得它的结果。<span class="token operator">**</span> 结果就是pendding<span class="token punctuation">,</span> 因为 <span class="token keyword">async</span>的函数是promise对象，它的结果又怎么不会是pedding或者其他值呢？<span class="token operator">**</span><span class="token operator">*</span> 所以， 在这个<span class="token keyword">async</span>函数内获得值即赋值 或者转发 （redux）<span class="token punctuation">;</span></code></pre><h4 id="4-后端需要的参数传错，"><a href="#4-后端需要的参数传错，" class="headerlink" title="4. 后端需要的参数传错，"></a>4. 后端需要的参数传错，</h4><pre class=" language-jsx"><code class="language-jsx">后端需要的参数传错了的话，是无法操作数据库数据的相应的前端 效果也就不对。就比如这次后端需要的分页参数的当前页参数传错了，要的是pageNo 传的是curPage<span class="token punctuation">,</span> 返回的永远都是第一页的数据，修改过后就好了。</code></pre><h4 id="5-也可以用useCallback-，但只能是给usezCallback传参的方式"><a href="#5-也可以用useCallback-，但只能是给usezCallback传参的方式" class="headerlink" title="5.也可以用useCallback ，但只能是给usezCallback传参的方式"></a>5.也可以用useCallback ，但只能是给usezCallback传参的方式</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 就像useEffect里放一个函数，依赖项也写这个函数，然后这个外部函数使用</span><span class="token comment" spellcheck="true">// useCallback包裹。 依赖项可能不会变，因此useCallback 包裹的函数</span><span class="token comment" spellcheck="true">// 也不会变、不会更新，它内部所拿到的渲染值也不会变, </span><span class="token comment" spellcheck="true">// useEffect函数的依赖项也不变，它的第一个参数也不会重新调用。</span><span class="token comment" spellcheck="true">// ***但是我们并不会使用它内部那次渲染所对应的状态或者 props。</span>        <span class="token comment" spellcheck="true">// 我们使用 ***这个函数接收到的参数 和 **这个函数本身，去完成相应的数据驱动，</span><span class="token comment" spellcheck="true">// 因为不使用组件状态，所以并不会有值不变的问题。</span><span class="token comment" spellcheck="true">// 这种操作就好比，我们在以往的渲染函数中，传入本次渲染的值，</span><span class="token comment" spellcheck="true">// 让之前的渲染函数帮我们做事。</span><span class="token comment" spellcheck="true">// useCallback 需要依赖项就是因为useCallback所修饰的函数需要在</span><span class="token comment" spellcheck="true">// 组件状态发生改变时及时更新useCallback所修饰的函数，让该函数内部的</span><span class="token comment" spellcheck="true">// 组件状态值保持最新值，若useCallback依赖项传[]，那么它所修饰函数内部的</span><span class="token comment" spellcheck="true">// 状态值一直都不会更新，一直是第一次渲染的渲染状态。</span></code></pre><h4 id="6-redux-useSelect触发dispatch导致的整个组件重渲"><a href="#6-redux-useSelect触发dispatch导致的整个组件重渲" class="headerlink" title="6. redux useSelect触发dispatch导致的整个组件重渲"></a>6. redux useSelect触发dispatch导致的整个组件重渲</h4><pre class=" language-js"><code class="language-js">  redux useSelect触发dispatch导致的整个组件重渲，但并不是整个组件的重新加载。  组件重渲，整个组件会得到最新的 props和 state， 相应的，组件重渲后，组件的所有节点和函数都会得到最新的值，  <span class="token function">但组件的函数并未重新触发（即使这个函数已经获得了最新的渲染值），只是节点上的，视觉效果</span><span class="token punctuation">(</span>因为重渲导致值的改变<span class="token punctuation">)</span> 改变了。  这就是为什么，在子组件调用父组件的函数 <span class="token punctuation">(</span>此函数包含reudx useDispatch 的 dispatch触发器<span class="token punctuation">)</span>，仅仅会更新触发器触发后的   useSelsect所取出的值<span class="token punctuation">,</span> <span class="token function">并不会调用父组件的useEffect函数</span><span class="token punctuation">(</span>父组件在初始化时也调用了这个函数<span class="token punctuation">)</span>，导致子组件调用了父组件的函数，  effect再次在父组件这个函数导致数据混乱的问题。  <span class="token operator">**</span>重渲，是 state 和 props 重新赋值的问题！</code></pre><h4 id="8-使用-antd-的渲染父级，再使用-table-的-ellipsis-true-渲染就出问题"><a href="#8-使用-antd-的渲染父级，再使用-table-的-ellipsis-true-渲染就出问题" class="headerlink" title="8. 使用 antd 的渲染父级，再使用 table 的   ellipsis: true 渲染就出问题"></a>8. 使用 antd 的渲染父级，再使用 table 的   ellipsis: true 渲染就出问题</h4><pre class=" language-js"><code class="language-js">使用 antd 的渲染父级，再使用 table colmuns 的   ellipsis<span class="token punctuation">:</span> <span class="token boolean">true</span> 渲染就出问题了。下拉框会罩在父级。记住着两个不要一起使用。使用 getPopupContainer<span class="token operator">=</span><span class="token punctuation">{</span>triggerNode <span class="token operator">=</span><span class="token operator">></span> triggerNode<span class="token punctuation">.</span>parentNode <span class="token keyword">as</span> HTMLElement 绑定至父级 <span class="token punctuation">(</span>渲染父级<span class="token punctuation">)</span></code></pre><h4 id="9-列表循环时，key-‘ALL-TRANSLATE’-key无法识别中间像横线这样的"><a href="#9-列表循环时，key-‘ALL-TRANSLATE’-key无法识别中间像横线这样的" class="headerlink" title="9. 列表循环时，key: ‘ALL_TRANSLATE’  key无法识别中间像横线这样的"></a>9. 列表循环时，key: ‘ALL_TRANSLATE’  key无法识别中间像横线这样的</h4><pre class=" language-js"><code class="language-js"> 列表循环时，key<span class="token punctuation">:</span> <span class="token string">'ALL_TRANSLATE'</span>  key无法识别中间像横线这样的，  尽量取中间不会分开的。</code></pre><h4 id="10-项目中不要多次接收常量，增加理解成本。"><a href="#10-项目中不要多次接收常量，增加理解成本。" class="headerlink" title="10.项目中不要多次接收常量，增加理解成本。"></a>10.项目中不要多次接收常量，增加理解成本。</h4><pre><code>就像你在constants.js 定义了常量，然后组件内部再用个变量接收这个常量再去使用，这是不可取的，会增加理解成本和可维护性。</code></pre><h4 id="11-为什么给后端的入参为Null-时，这个字段就被忽略了？"><a href="#11-为什么给后端的入参为Null-时，这个字段就被忽略了？" class="headerlink" title="11. 为什么给后端的入参为Null 时，这个字段就被忽略了？"></a>11. 为什么给后端的入参为Null 时，这个字段就被忽略了？</h4><pre class=" language-js"><code class="language-js">为什么给后端的入参为Null 时，这个字段就被忽略了？</code></pre><h3 id="12-Type-无法指定函数参数"><a href="#12-Type-无法指定函数参数" class="headerlink" title="12. Type 无法指定函数参数"></a>12. Type 无法指定函数参数</h3><pre><code>Type 无法指定函数参数, 必须使用 interface。</code></pre><h4 id="13-常量对象、对象键、键值全部大写"><a href="#13-常量对象、对象键、键值全部大写" class="headerlink" title="13. 常量对象、对象键、键值全部大写"></a>13. 常量对象、对象键、键值全部大写</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> LIST <span class="token operator">=</span> <span class="token punctuation">{</span>    NAME<span class="token punctuation">:</span> <span class="token string">'NIU_HENG'</span><span class="token punctuation">,</span>    AGE<span class="token punctuation">:</span> <span class="token string">'AGE'</span><span class="token punctuation">,</span>    SEX<span class="token punctuation">:</span> <span class="token string">'SEX'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在组件中使用时也像上面所说的，不要再用一个变量接收， </span><span class="token comment" spellcheck="true">// 不变的常量用全部大写的方式更加容易理解, 不再用变量接收，降低复杂度。</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 项目总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>useCallbackuseMemo使用优化总结</title>
      <link href="2021/12/18/usecallbackusememo-shi-yong-you-hua-zong-jie/"/>
      <url>2021/12/18/usecallbackusememo-shi-yong-you-hua-zong-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="useCallback-与-useMemo优化总结"><a href="#useCallback-与-useMemo优化总结" class="headerlink" title="useCallback 与 useMemo优化总结"></a>useCallback 与 useMemo优化总结</h3><p><strong>是否能每一个方法都包裹一下useCallback？</strong></p><p><strong>答案是</strong>： <strong>不要把所有的方法都包上 useCallback</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// useCallback 用与缓存函数，但不可滥用！</span><span class="token keyword">const</span> <span class="token punctuation">[</span>count1<span class="token punctuation">,</span> setCount1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>count2<span class="token punctuation">,</span> setCount2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> handleClickButton1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setCount1</span><span class="token punctuation">(</span>count1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> handleClickButton2 <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setCount2</span><span class="token punctuation">(</span>count2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span><span class="token operator">></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleClickButton1<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>button1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleClickButton2<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>button2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 组件重新渲染时会重新创建 handleClickButton1 函数，&amp;*  handleClickButton2 里的 useCallback里也会重新创建一个函数，&amp;*  尽管这个函数可能因为依赖值一样，不会被赋予handleClickButton2变量上。&amp;  &amp;*  这种情况下，handleClickButton2会取之前的函数，&amp;*  但因为下面的button会被重新渲染，到handleClickButton2这里，&amp;*  useCallback 每次都需要对比 **依赖值是否变化，在加上还要缓存之前的值，&amp;*  性能开销反而更大。&amp;  *  这种情况建议不要再套一层 useCallback*/</span></code></pre><h4 id="useCallback-传空数组（不更新带来的问题）"><a href="#useCallback-传空数组（不更新带来的问题）" class="headerlink" title="useCallback 传空数组（不更新带来的问题）"></a>useCallback 传空数组（不更新带来的问题）</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 传空数组意味着当前方法没有依赖值，将不会被更新，</span><span class="token comment" spellcheck="true">// 另外因为js **静态作用域 将导致此函数内部count2永远都是0       不太懂，什么是静态作用域</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">'./Button'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count2<span class="token punctuation">,</span> setCount2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> handleClickButton2 <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setCount2</span><span class="token punctuation">(</span>count2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Button       count<span class="token operator">=</span><span class="token punctuation">{</span>count2<span class="token punctuation">}</span>      onClickButton<span class="token operator">=</span><span class="token punctuation">{</span>handleClickButton2<span class="token punctuation">}</span>    <span class="token operator">></span>Button2<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 由点击button随机数发生的变化判断，Button只被重渲了一次</span><span class="token comment" spellcheck="true">// Button.jsx</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> onClickButton<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClickButton<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="useCallback-频繁更新带来的问题（使用useRef优化）"><a href="#useCallback-频繁更新带来的问题（使用useRef优化）" class="headerlink" title="useCallback 频繁更新带来的问题（使用useRef优化）"></a>useCallback 频繁更新带来的问题（使用useRef优化）</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这里 handleSubmit 的缓存与否取决于 text， </span><span class="token comment" spellcheck="true">// 作为input 的value， text更新必然是相当频繁的，</span><span class="token comment" spellcheck="true">// 带来的问题就是，handleSubmit所对应的函数的频繁更新，</span><span class="token comment" spellcheck="true">// 导致了 OtherForm的频繁渲染</span><span class="token keyword">const</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span> setText<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> handleSubmit <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>text<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>form<span class="token operator">></span>    <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setText</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>OtherForm onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** useRef生成的对象在整个组件保持不变（引用不变），&amp;* 且在组件的任何地方都可以访问到最新的值，&amp; * 这里 textRef 由于引用不变， handleSubmit只会被创建一次，&amp;* 因为这个原因，OtherForm 也不会频繁渲染，节省了性能。&amp;* 虽然函数只被创建了一次，但useRef对象保存的值在此函数是可以实时拿到的？    ****待定*/</span><span class="token keyword">const</span> textRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span> setText<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> handleSubmit <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>textRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>textRef<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>form<span class="token operator">></span>    <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>      <span class="token function">setText</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>      textRef<span class="token punctuation">.</span>current <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>OtherForm onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="useCallback-一般使用最多场景"><a href="#useCallback-一般使用最多场景" class="headerlink" title="useCallback 一般使用最多场景"></a>useCallback 一般使用最多场景</h4><pre class=" language-tex"><code class="language-tex">useCallback 是要配合子组件的 shouldComponentUpdate 或者 React.memo 一起来使用的，否则就是反向优化。</code></pre><h4 id="useMemo-（使用场景广泛）"><a href="#useMemo-（使用场景广泛）" class="headerlink" title="useMemo  （使用场景广泛）"></a>useMemo  （使用场景广泛）</h4><h4 id="优化子组件"><a href="#优化子组件" class="headerlink" title="优化子组件"></a>优化子组件</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// ...</span>  age<span class="token punctuation">:</span> count<span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">'Jace'</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">&lt;</span>UserCard userInfo<span class="token operator">=</span><span class="token punctuation">{</span>userInfo<span class="token punctuation">}</span><span class="token operator">></span>   <span class="token comment" spellcheck="true">/** * 这里的 userInfo 每次都是一个新对象，无论count发生改变没有， * 都会导致子组件 UserCard 重新渲染 */</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    name<span class="token punctuation">:</span> <span class="token string">"Jace"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> count  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 这里的 userInfo 会在count 发生变化才返回新对象*/</span></code></pre><h4 id="优化自身"><a href="#优化自身" class="headerlink" title="优化自身"></a>优化自身</h4><pre class=" language-js"><code class="language-js">在组件内部有一些复杂的计算时，可以使用useMemo缓存这个值。</code></pre><h4 id="useMemo-更多的使用场景"><a href="#useMemo-更多的使用场景" class="headerlink" title="useMemo 更多的使用场景"></a>useMemo 更多的使用场景</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 可将useMemo 的返回值 定义为一个数组，这样就可以通过结构赋值的方式取值。</span><span class="token comment" spellcheck="true">// 若返回值数组的其中一项包含数组，那么也就变相的实现了useCallback,</span><span class="token comment" spellcheck="true">// 同时还实现了对多个数据的缓存。</span><span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> followUser<span class="token punctuation">]</span> <span class="token operator">=</span> u    <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> userInfo<span class="token punctuation">.</span>birth<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 根据生日计算年龄</span>    <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 关注用户</span>      <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'/follow'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> uid<span class="token punctuation">:</span> userInfo<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>userInfo<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span>name<span class="token punctuation">:</span> <span class="token punctuation">{</span>userInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span>age<span class="token punctuation">:</span> <span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>Card followUser<span class="token operator">=</span><span class="token punctuation">{</span>followUser<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token comment" spellcheck="true">// **更加新奇的用法！</span>    <span class="token punctuation">{</span>      <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">// 如果 Card1 组件内部没有使用 React.memo 函数，那还可以通过这种方式在父组件减少子组件的渲染</span>        <span class="token operator">&lt;</span>Card1 followUser<span class="token operator">=</span><span class="token punctuation">{</span>followUser<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>followUser<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> useCallback与useMemo优化总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>effect完全指南阅读心得</title>
      <link href="2021/12/12/effect-wan-quan-zhi-nan-yue-du-xin-de/"/>
      <url>2021/12/12/effect-wan-quan-zhi-nan-yue-du-xin-de/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="effect完全指南阅读心得"><a href="#effect完全指南阅读心得" class="headerlink" title="effect完全指南阅读心得"></a>effect完全指南阅读心得</h3><h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 每次渲染都有它的自己的props和state。</span><span class="token comment" spellcheck="true">/** 就像下面这样，每次节点和函数拿到的值都是渲染的props和state&amp;* 更新状态时，React会重新更新组件，每次渲染都能拿到独立的状态&amp;* 这个状态在此次渲染中是一个常量&amp; * 每次渲染都有它自己的事件处理函数*/</span><span class="token comment" spellcheck="true">// During first render  // Dan的事例</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Returned by useState()</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// After a click, our function is called again</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Returned by useState()</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在状态为3时点击alert ，再讲将状态加到5，几秒后alert的是3 </span><span class="token comment" spellcheck="true">// 这是因为我们在渲染值为3的那次渲染中触发handleAlertClick这个函数了</span><span class="token comment" spellcheck="true">// Dan 说，每一次渲染都有一个“新版本”的handleAlertClick。每一个版本的handleAlertClick“记住” 了它自己的 count</span><span class="token comment" spellcheck="true">// 在任意一次渲染中，props和state是始终保持不变的。</span><span class="token comment" spellcheck="true">// 如果props和state在不同的渲染中是相互独立的，那么使用到它们的任何值也是独立的（包括事件处理函数）。</span><span class="token comment" spellcheck="true">// 它们都“属于”一次特定的渲染。即便是事件处理中的异步函数调用“看到”的也是这次渲染中的count值。</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleAlertClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'You clicked on: '</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>        Click me      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleAlertClick<span class="token punctuation">}</span><span class="token operator">></span>        Show alert      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="每次渲染都有它自己的effect"><a href="#每次渲染都有它自己的effect" class="headerlink" title="每次渲染都有它自己的effect"></a>每次渲染都有它自己的effect</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** effect 函数在每次渲染中都不相同&amp; * 每一个effect看到的状态都它所属的那次渲染&amp; * effect会在每次更改dom并让浏览器绘制屏幕后去执行 （render后）&amp;* 每次渲染都有它自己的所有&amp; * effect 清除函数会在下一次渲染完成之后执行，再运行下一次渲染的effect函数&amp;* React.Hooks非常依赖JavaScript闭包*/</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** 在刚刚set完一个状态的函数里，立即log这个改变的值，&amp; * 你会发现它 "不是最新的 " ,&amp;* 因为打印的依然是上一次的值，这时你认为useState hook发生了异步。&amp; * 实际上并不是这样，&amp; * 如果你在其他地方打印，值一定是没有问题的，&amp; * 你只是不能在那个set完的函数里拿到最新的值，&amp; * 这是因为你在上一次的渲染函数里希望看到未来的state或props。*/</span></code></pre><h4 id="使用effect依赖项数组来决定是否执行effect"><a href="#使用effect依赖项数组来决定是否执行effect" class="headerlink" title="使用effect依赖项数组来决定是否执行effect"></a>使用effect依赖项数组来决定是否执行effect</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// effect中使用到的 状态 和 props 以及函数，都要放入依赖项数组，</span><span class="token comment" spellcheck="true">// 这样effect就能确保这些数据和函数发生变化时，同步数据到页面，</span><span class="token comment" spellcheck="true">// 而如果依赖项没有改变，那么就不会执行effect</span></code></pre><h4 id="对依赖项数组用到的state-、props-和函数用来就一定要写进去"><a href="#对依赖项数组用到的state-、props-和函数用来就一定要写进去" class="headerlink" title="对依赖项数组用到的state 、props 和函数用来就一定要写进去"></a>对依赖项数组用到的state 、props 和函数用来就一定要写进去</h4><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 有这样一个误解，就是函数不需要依赖项</span>  <span class="token comment" spellcheck="true">// 记住，即使是函数，依然也需要依赖项</span> <span class="token keyword">function</span> <span class="token function">SearchResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Imagine this function is long</span>  <span class="token keyword">function</span> <span class="token function">getFetchUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'https://hn.algolia.com/api/v1/search?query=react'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Imagine this function is also long</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token function">getFetchUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setData</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**  * Dan 说  * 需要明确的是，上面的代码可以正常工作。  * 但这样做在组件日渐复杂的迭代过程中我们很难确保它在各种情况下还能正常运行。 */</span>       <span class="token comment" spellcheck="true">/** * 虽然在effect里放一个函数，然后空数组，这样可以正常执行, &amp; * 但随着组件的迭代，代码量的增加，甚至我们对函数进行了抽离(将抽离的更多函数放于effect外面,就想以上的代码)， &amp; * 甚至在一些函数中使用了state, ( 而像这种情况依赖项数组并不会发出警告！) &amp; * 但若是我们没有在effect里设置这些函数的依赖项，那么effect就不会更新最新的props和state， &amp; * 所以这是一种隐患*/</span> <span class="token comment" spellcheck="true">/** * 所以如果某些函数仅在effect中调用， 你可以把这些函数移入effect中, &amp; * 这是一个简单的解决方案，Dan如是说 &amp; * 这样做有什么好处呢，把仅仅effect用到的函数移入effect， &amp; * 这样你不传函数用到的相关依赖项，effect的[]就会给出提示， &amp; * 而不是像即使放在外面，也不会报缺少依赖项这样的问题！*/</span><span class="token comment" spellcheck="true">/* effect的设计意图就是要强迫你去关注数据流的改变, &amp; * 然后决定effect如何去与react同步, &amp; * 而不是让我们的用户遇到了bug*/</span> <span class="token comment" spellcheck="true">/** 但如果你不想或也不能把代码放入effect（你想要逻辑复用）, &amp; * 但不管怎么复用，都不能对effect依赖项撒谎， &amp; *  ***用了组件内的state或props就必须写入依赖项！*/</span><span class="token comment" spellcheck="true">/** * 如果抽离的函数没有用到组件内的任何值，你应该把它提到外面去, &amp; * 然后就可以自由的在effect里使用, 就像下面的代码*/</span><span class="token comment" spellcheck="true">// ✅ Not affected by the data flow</span><span class="token keyword">function</span> <span class="token function">getFetchUrl</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'https://hn.algolia.com/api/v1/search?query='</span> <span class="token operator">+</span> query<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SearchResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">getFetchUrl</span><span class="token punctuation">(</span><span class="token string">'react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ... Fetch data and do something ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ✅ Deps are OK</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">getFetchUrl</span><span class="token punctuation">(</span><span class="token string">'redux'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ... Fetch data and do something ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ✅ Deps are OK</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 另一种写法</span><span class="token keyword">function</span> <span class="token function">SearchResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ✅ Preserves identity when its own deps are the same </span>  <span class="token keyword">const</span> getFetchUrl <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'https://hn.algolia.com/api/v1/search?query='</span> <span class="token operator">+</span> query<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ✅ Callback deps are OK 也不会报警告⚠️，因为没有依赖组件的值！，值是函数传参传入的</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">getFetchUrl</span><span class="token punctuation">(</span><span class="token string">'react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ... Fetch data and do something ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>getFetchUrl<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ✅ Effect deps are OK</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">getFetchUrl</span><span class="token punctuation">(</span><span class="token string">'redux'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ... Fetch data and do something ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>getFetchUrl<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ✅ Effect deps are OK</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 更加灵活的写法，使用useCallback。可以使用state或props * 一旦query改变 getFetchUrl也会改变, 因此会重新走effect，将数据同步*/</span><span class="token keyword">function</span> <span class="token function">SearchResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>query<span class="token punctuation">,</span> setQuery<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ✅ Preserves identity until query changes</span>  <span class="token keyword">const</span> getFetchUrl <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'https://hn.algolia.com/api/v1/search?query='</span> <span class="token operator">+</span> query<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>query<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ✅ Callback deps are OK</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">getFetchUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ... Fetch data and do something ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>getFetchUrl<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ✅ Effect deps are OK</span>  <span class="token comment" spellcheck="true">// ...</span> </code></pre><p>参考资料：<a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/">https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> effect完全指南阅读心得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生方法</title>
      <link href="2021/12/06/yuan-sheng-fang-fa/"/>
      <url>2021/12/06/yuan-sheng-fang-fa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="1-forEach"><a href="#1-forEach" class="headerlink" title="1.forEach"></a>1.forEach</h4><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Eric'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'男'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Mary'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'女'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Rose'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'女'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span></code></pre><pre class=" language-js"><code class="language-js">  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>xf_forEach <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 箭头函数不行？</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this是谁的'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  arr<span class="token punctuation">.</span><span class="token function">xf_forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> curarr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> curarr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="2-map-返回一个新数组"><a href="#2-map-返回一个新数组" class="headerlink" title="2.map 返回一个新数组"></a>2.map 返回一个新数组</h4><pre class=" language-js"><code class="language-js"> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>xf_map <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res  <span class="token punctuation">}</span>  arr<span class="token punctuation">.</span><span class="token function">xf_map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> curarr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> curarr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="3-filter"><a href="#3-filter" class="headerlink" title="3.filter"></a>3.filter</h4><pre class=" language-js"><code class="language-js">  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>xf_filter <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">xf_filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>age <span class="token operator">===</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ {name: 'Eric', age: 18, sex: '男'}]</span></code></pre><h4 id="4-every"><a href="#4-every" class="headerlink" title="4.every"></a>4.every</h4><pre class=" language-js"><code class="language-js">  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>xf_every <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      flag <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">xf_every</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>age <span class="token operator">>=</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h4 id="5-some"><a href="#5-some" class="headerlink" title="5.some"></a>5.some</h4><pre class=" language-js"><code class="language-js">  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>xf_some <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      flag <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">xf_some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h4 id="6-findIndex"><a href="#6-findIndex" class="headerlink" title="6.findIndex"></a>6.findIndex</h4><pre class=" language-js"><code class="language-js">  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>xf_findIndex <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// if()</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> i      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">xf_findIndex</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>age <span class="token operator">===</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span></code></pre><h4 id="7-find"><a href="#7-find" class="headerlink" title="7.find"></a>7.find</h4><pre class=" language-js"><code class="language-js">  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>xf_find <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> undefined  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">xf_find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>age <span class="token operator">===</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {name: 'Eric', age: 18, sex: '男'}</span></code></pre><h4 id="8-join"><a href="#8-join" class="headerlink" title="8.join"></a>8.join</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>xf_join <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      str <span class="token operator">=</span> i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>s<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> str  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">xf_join</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1+2+3</span></code></pre><h4 id="9-flat"><a href="#9-flat" class="headerlink" title="9.flat"></a>9.flat</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>xf_flat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">xf_flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  [1, 2, 3, 4, 5, 8, 9]</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js原生方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>211130随笔</title>
      <link href="2021/11/30/211130-sui-bi/"/>
      <url>2021/11/30/211130-sui-bi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="不想用return"><a href="#不想用return" class="headerlink" title="不想用return"></a>不想用return</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 一般我们render视图喜欢写无状态组件，一般需要return视图</span><span class="token comment" spellcheck="true">// 如果不想用return了，可以 () => () 简介写法</span>    <span class="token keyword">const</span> renderEmpty <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>textAlign<span class="token punctuation">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span> cursor<span class="token punctuation">:</span> <span class="token string">'pointer'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"image-style"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Image                    src<span class="token operator">=</span><span class="token punctuation">{</span>EmptyPng<span class="token punctuation">}</span>                    preview<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">false</span><span class="token punctuation">}</span>                    alt<span class="token operator">=</span><span class="token string">"当前还没有任务，请新建任务"</span>                    <span class="token comment" spellcheck="true">// fallback="http://..."</span>                <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"image-alt"</span><span class="token operator">></span>当前还没有任务，请新建任务<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="antd-typescript报错"><a href="#antd-typescript报错" class="headerlink" title="antd typescript报错"></a>antd typescript报错</h5><pre class=" language-typescript"><code class="language-typescript">   <span class="token comment" spellcheck="true">// 通过这种解构的方式给Table赋值，会报 属性“pagination”的类型不兼容。</span>  <span class="token comment" spellcheck="true">// 不能将类型“boolean”分配给类型“false | TablePaginationConfig | undefined”。</span>  <span class="token keyword">const</span> tableConfig <span class="token operator">=</span> <span class="token punctuation">{</span>        columns<span class="token punctuation">:</span> columns<span class="token punctuation">,</span>        dataSource<span class="token punctuation">:</span> data<span class="token punctuation">,</span>        pagination<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 改为 pagination: false as false 即可</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="如果不确定一个值的类型，用map、length怕报错的话"><a href="#如果不确定一个值的类型，用map、length怕报错的话" class="headerlink" title="如果不确定一个值的类型，用map、length怕报错的话"></a>如果不确定一个值的类型，用map、length怕报错的话</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 就用</span>data<span class="token operator">?</span><span class="token punctuation">.</span>length </code></pre><h5 id="好用的前端枫叶，不用给定初次调用的默认值"><a href="#好用的前端枫叶，不用给定初次调用的默认值" class="headerlink" title="好用的前端枫叶，不用给定初次调用的默认值"></a>好用的前端枫叶，不用给定初次调用的默认值</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 前端分页</span><span class="token comment" spellcheck="true">// effect 里就写 getPageData(1)</span><span class="token comment" spellcheck="true">// change里写 getPageData(page)</span><span class="token keyword">const</span> getPageData <span class="token operator">=</span> <span class="token punctuation">(</span>cur<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> copyData <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> showData <span class="token operator">=</span> copyData<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pagesize<span class="token punctuation">,</span> cur <span class="token operator">*</span> pagesize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ColoumnType</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 配置类型     定义</span>    title<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> ReactElement<span class="token punctuation">,</span>    dataIndex<span class="token punctuation">:</span> T<span class="token punctuation">,</span>    render<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> ReactElement<span class="token punctuation">}</span><span class="token keyword">const</span> columns <span class="token punctuation">:</span> ColoumnType<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 使用</span><span class="token comment" spellcheck="true">// 凡是使用到了ColoumnType接口的地方，都要为泛型指定类型。</span>                                         </code></pre><h5 id="useRef的妙用"><a href="#useRef的妙用" class="headerlink" title="useRef的妙用"></a>useRef的妙用</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/** * useState 在某种程度上来说是异步的，也就是说我们在改变状态后并不能拿到他最新的值(比如在同一个函数 * 中使用setState更新值，然后再打印这个值，打印的就会是上一次的值，而并非改变后的值。)， * 而有的时候我们又必须使用他改变后最新的值，以此最新的值为基本进行组件接下来的计算， * 如果这个值不能是最新的，那么计算就是错误的！***这时，我们需要useRef。 *  * useRef 生成的对象在组件整个生命周期内保持不变 * 用useRef来存储值，改变值，拿到的永远都是最新的值。*/</span><span class="token comment" spellcheck="true">// function</span><span class="token punctuation">{</span>    sortRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token operator">!</span>sortRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// creatCompare要求第二个参数的值必须是改变后最新的值</span>  <span class="token keyword">let</span> sortData <span class="token operator">=</span> copyAllTranslate<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>      <span class="token function">creatCompare</span><span class="token punctuation">(</span><span class="token string">'timer'</span><span class="token punctuation">,</span> sortRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// item 的 timer</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 另一个useState异步的案例</span><span class="token keyword">const</span> <span class="token punctuation">[</span>current<span class="token punctuation">,</span> setCurrent<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> getPageDatas <span class="token operator">=</span> <span class="token punctuation">(</span>cur<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// cur onchange函数传给 getPageDatas改变后的页码</span>    <span class="token keyword">const</span> copyDatas <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">const</span> showData <span class="token operator">=</span> copyDatas<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pagesize<span class="token punctuation">,</span> cur <span class="token operator">*</span> pagesize<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这里拿到的值一直是current = 1, 所以一直只会截取前10条</span>    <span class="token keyword">const</span> showData <span class="token operator">=</span> copyDatas<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">(</span>current <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pagesize<span class="token punctuation">,</span> current <span class="token operator">*</span> pagesize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解决方案 :去除不必要的代码，不再依赖于useState保存的状态来计算；页码改变的数据的计算，</span><span class="token comment" spellcheck="true">// ***全部依赖于onChange 传入的最新值！，</span><span class="token comment" spellcheck="true">// 见以上前端枫叶。</span><span class="token comment" spellcheck="true">// 在某些时候，state用来更新视图就好，至于精确的运算的依赖值，我们就使用useRef</span><span class="token comment" spellcheck="true">// useRef还可以配合forwrodRef获取函数组件实例</span><span class="token comment" spellcheck="true">// useRef和useState的区别，实现原理。</span></code></pre><h5 id="ReactElement"><a href="#ReactElement" class="headerlink" title="ReactElement"></a>ReactElement</h5><pre class=" language-typescript"><code class="language-typescript">ReactElement 是JSX<span class="token punctuation">.</span><span class="token function">Element的父级，可以相互赋值</span><span class="token punctuation">(</span>类型<span class="token punctuation">)</span>。</code></pre><h5 id="sort排序封装"><a href="#sort排序封装" class="headerlink" title="sort排序封装"></a>sort排序封装</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> sortData <span class="token operator">=</span> copyAllTranslate<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>    <span class="token function">creatCompare</span><span class="token punctuation">(</span><span class="token string">'timer'</span><span class="token punctuation">,</span> sortRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// item 的 timer</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> creatCompare <span class="token operator">=</span> <span class="token punctuation">(</span>propertyName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj1<span class="token punctuation">:</span> GetDataType<span class="token punctuation">,</span> obj2<span class="token punctuation">:</span> GetDataType<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> value1 <span class="token operator">=</span> obj1<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> value2 <span class="token operator">=</span> obj2<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> type <span class="token operator">?</span> value1 <span class="token operator">-</span> value2 <span class="token punctuation">:</span> value2 <span class="token operator">-</span> value1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// type 是true 就是升序，反之倒序</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 排序依赖值，见上一项useRef</span></code></pre><h5 id="antd组件的渲染父级别"><a href="#antd组件的渲染父级别" class="headerlink" title="antd组件的渲染父级别"></a>antd组件的渲染父级别</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/* 使用 as HTMLElement 为 triggerNode.parentNode 指定类型使其不报错 * 不写as 会报 ： 不能将类型“ParentNode | null”分配给类型“HTMLElement” * antd ts  getPopupContainer的返回类型就是 HTMLElement， * 以后若出现此类错误可借鉴次方法 * getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement; */</span>getPopupContainer<span class="token operator">=</span><span class="token punctuation">{</span>triggerNode <span class="token operator">=</span><span class="token operator">></span> triggerNode<span class="token punctuation">.</span>parentNode as HTMLElement<span class="token punctuation">}</span></code></pre><h5 id="自定义tab"><a href="#自定义tab" class="headerlink" title="自定义tab"></a>自定义tab</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/** * antd tab 调样式非常麻烦，自己写 * 首先准备一个数组，数组里每一个对象都有key 和title， * 然后在组件中渲染，在渲染的div上加一个onClick,  * 在事件函数里setChooseIndex ,这个 state的初始值取数组第一个对象的key * 在一个render里，写不同的if为key的情况下return 不同的无状态组件。 * 这样一个tab就写好了。*/</span></code></pre><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><pre class=" language-typescript"><code class="language-typescript">antd tabel 的colmuns只要最后传给tabel就好了，写在哪本身不重要。写在父组件传给子都没问题。表格th若是有特殊样式<span class="token punctuation">,</span>一些图标对应一些操作、下拉框什么的，可以在colmuns的title写一个函数 as ReactElement防止报错title<span class="token punctuation">:</span> <span class="token function">getTitleIcon</span><span class="token punctuation">(</span><span class="token string">'任务创建时间'</span><span class="token punctuation">)</span> as ReactElement<span class="token punctuation">,</span>  需要下拉框的，给一个 <span class="token function">Dropdown，节点会挂在th</span><span class="token punctuation">(</span>ant<span class="token operator">-</span>table<span class="token operator">-</span>cell<span class="token punctuation">)</span> 上，menu的父级会与 Dropdown包裹的div同级，而不是挂在body上，挂在body上像datav这样的框架是会出问题的。</code></pre><h5 id="判断数组类型"><a href="#判断数组类型" class="headerlink" title="判断数组类型"></a>判断数组类型</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 数组方法前面加判断最好用 Array.isArray()</span><span class="token comment" spellcheck="true">// 今天因为父组件传过来的是{}，导致使用slice方法报错了，几经排查，才排查到这里。</span><span class="token comment" spellcheck="true">// 问题： 太相信typescripe传过来的类型了</span><span class="token comment" spellcheck="true">// ***也要注音非空判断之外的数据类型，哪怕用了ts</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>undefinedobj<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>VM635410<span class="token punctuation">:</span><span class="token number">1</span> Uncaught TypeError<span class="token punctuation">:</span> obj<span class="token punctuation">.</span>slice is not a <span class="token keyword">function</span>at <span class="token operator">&lt;</span>anonymous<span class="token operator">></span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 211130随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript进阶2</title>
      <link href="2021/11/28/typescript-jin-jie-2/"/>
      <url>2021/11/28/typescript-jin-jie-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="typescript进阶2"><a href="#typescript进阶2" class="headerlink" title="typescript进阶2"></a>typescript进阶2</h4><h5 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> num <span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">// num的类型可以是string ， 也可以是number </span></code></pre><h5 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h5><pre class=" language-typescript"><code class="language-typescript">将一个属性的属性名全部提取出来当做联合类型<span class="token comment" spellcheck="true">// 1. 定义一个接口</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span>type PersonKeys <span class="token operator">=</span> keyof Person <span class="token comment" spellcheck="true">// 等同于 type PersonKeys = 'name' | 'age'</span><span class="token keyword">const</span> p1<span class="token punctuation">:</span> PersonKeys <span class="token operator">=</span> <span class="token string">'name'</span> <span class="token comment" spellcheck="true">// 可以</span><span class="token keyword">const</span> p2<span class="token punctuation">:</span> PersonKeys <span class="token operator">=</span> <span class="token string">'age'</span> <span class="token comment" spellcheck="true">// 可以</span><span class="token keyword">const</span> p3<span class="token punctuation">:</span> PersonKeys <span class="token operator">=</span> <span class="token string">'height'</span> <span class="token comment" spellcheck="true">// 不能将类型“"height"”分配给“name | age”</span></code></pre><h5 id="Record-lt-K-T-gt"><a href="#Record-lt-K-T-gt" class="headerlink" title="Record&lt;K, T&gt;"></a>Record&lt;K, T&gt;</h5><pre class=" language-typescript"><code class="language-typescript">将K中的所有属性的值转化为T类型type Record<span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token keyword">any</span><span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>P <span class="token keyword">in</span> K<span class="token punctuation">]</span><span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>type Methods <span class="token operator">=</span> <span class="token string">'POST'</span> <span class="token operator">|</span> <span class="token string">'GET'</span> <span class="token operator">|</span> <span class="token string">'DELETE'</span>type typeMetod <span class="token operator">=</span> Record<span class="token operator">&lt;</span>Methods<span class="token punctuation">,</span> <span class="token keyword">any</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// type typeMetod = {</span><span class="token comment" spellcheck="true">//   POST: any;</span><span class="token comment" spellcheck="true">//   GET: any;</span><span class="token comment" spellcheck="true">//   DELETE: any;</span><span class="token comment" spellcheck="true">// }</span></code></pre><h5 id="Partial"><a href="#Partial" class="headerlink" title="Partial "></a>Partial <T></h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// Partial 可选</span>type Partial<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>P <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 数据有可能是请求过来的，定义一个空对象</span><span class="token keyword">const</span> person1<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> person2<span class="token punctuation">:</span> Partial<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 可以</span><span class="token keyword">const</span> person3<span class="token punctuation">:</span> Partial<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xiaodu'</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 可以</span><span class="token keyword">const</span> person4<span class="token punctuation">:</span> Partial<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token number">1.88</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 报错 “height”不在类型“Partial&lt;Person>”中</span><span class="token comment" spellcheck="true">// Partial 还可用于props接收的值，使其变为可选</span></code></pre><h5 id="Required-必须的-必须有"><a href="#Required-必须的-必须有" class="headerlink" title="Required 必须的, 必须有"></a>Required<T> 必须的, 必须有</h5><pre class=" language-typescript"><code class="language-typescript">type Required<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>P <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Ren</span> <span class="token punctuation">{</span>  name<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span>type Rentype <span class="token operator">=</span> Required<span class="token operator">&lt;</span>Ren<span class="token operator">></span><span class="token comment" spellcheck="true">// 类型 "{ name: string; }" 中缺少属性 "age"，但类型 "Required&lt;Ren>" 中需要该属性。</span><span class="token keyword">const</span> niuheng <span class="token punctuation">:</span> Rentype <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'牛恒'</span><span class="token punctuation">}</span></code></pre><h5 id="Pick-lt-T-K-gt"><a href="#Pick-lt-T-K-gt" class="headerlink" title="Pick&lt;T, K&gt;"></a>Pick&lt;T, K&gt;</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 从T中取出一系列K的属性(两者都有的属性，从T中提取)</span>type Pick<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>P <span class="token keyword">in</span> K<span class="token punctuation">]</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 例如我们现在有一个接口拥有 name age sex属性， 但我们想生成一个新属性，只支持name ，age</span><span class="token keyword">interface</span> <span class="token class-name">Niuheng</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span><span class="token punctuation">}</span>  <span class="token keyword">let</span> person<span class="token punctuation">:</span> Pick<span class="token operator">&lt;</span>Niuheng<span class="token punctuation">,</span> <span class="token string">'name'</span> <span class="token operator">|</span> <span class="token string">'age'</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'牛恒'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h5 id="Readonly-将传入的属性变为只读-浅层的"><a href="#Readonly-将传入的属性变为只读-浅层的" class="headerlink" title="Readonly 将传入的属性变为只读  (浅层的)"></a>Readonly<T> 将传入的属性变为只读  (浅层的)</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Xiaohu</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  girlFriend<span class="token punctuation">:</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>type ReadOnlyXiaohu <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Xiaohu<span class="token operator">></span><span class="token keyword">const</span> XiaoHuA <span class="token punctuation">:</span> ReadOnlyXiaohu <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'xiaohu'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  girlFriend<span class="token punctuation">:</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'xiaomei'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// type ReadOnlyXiaohu = {</span><span class="token comment" spellcheck="true">//   readonly name: string;</span><span class="token comment" spellcheck="true">//   readonly age: number;</span><span class="token comment" spellcheck="true">//   readonly girlFriend: {</span><span class="token comment" spellcheck="true">//       name: string;</span><span class="token comment" spellcheck="true">//       age: number;</span><span class="token comment" spellcheck="true">//   };</span><span class="token comment" spellcheck="true">// }</span>XiaoHuA<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'sss'</span> <span class="token comment" spellcheck="true">// 无法分配到 "name" ，因为它是只读属性</span>XiaoHuA<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>     <span class="token comment" spellcheck="true">// 无法分配到 "name" ，因为它是只读属性</span>XiaoHuA<span class="token punctuation">.</span>girlFriend<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment" spellcheck="true">// 不报错，因此只读是浅层的</span></code></pre><h5 id="Exclude-lt-T-U-gt"><a href="#Exclude-lt-T-U-gt" class="headerlink" title="Exclude&lt;T,U&gt;"></a>Exclude&lt;T,U&gt;</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 从 T 中排除 U 类型 得到一个新类型</span>type Exclude<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> never <span class="token punctuation">:</span> T<span class="token punctuation">;</span>type T <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">4</span><span class="token operator">|</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">|</span><span class="token number">4</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">// T = 1|2|5 </span></code></pre><h5 id="Extract-lt-T-U-gt"><a href="#Extract-lt-T-U-gt" class="headerlink" title="Extract&lt;T,U&gt;"></a>Extract&lt;T,U&gt;</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 提取 T 和 U 都包含的部分，返回一个新类型</span>type Extract<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> T <span class="token punctuation">:</span> never<span class="token punctuation">;</span>type T <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">4</span><span class="token operator">|</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">|</span><span class="token number">4</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">// T = 3|4</span></code></pre><h5 id="Omit-lt-T-K-gt-没有内置"><a href="#Omit-lt-T-K-gt-没有内置" class="headerlink" title="Omit&lt;T,K &gt;没有内置"></a>Omit&lt;T,K &gt;没有内置</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 从对象 T 中排除 key是 K的属性</span><span class="token comment" spellcheck="true">// 由于TS中没有内置，需要使用Pick 和 Exclude 实现</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> person<span class="token punctuation">:</span> Omit<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span></code></pre><h5 id="NonNullable"><a href="#NonNullable" class="headerlink" title="NonNullable"></a>NonNullable<T></h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 排除 T 为 null 、undefined</span>type NonNullable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">null</span> <span class="token operator">|</span> undefined <span class="token operator">?</span> never <span class="token punctuation">:</span> T<span class="token punctuation">;</span>type T <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span><span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> undefined<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string | string[]</span></code></pre><h5 id="ReturnType"><a href="#ReturnType" class="headerlink" title="ReturnType"></a>ReturnType<T></h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 获取函数 T 的返回值类型</span>type ReturnType<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> infer R <span class="token operator">?</span> R <span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 暂时不懂</span>type T1 <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span>type T2 <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// void</span></code></pre><h5 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h5><pre class=" language-typescript"><code class="language-typescript">https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>dajuna<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">117958613</span>  <span class="token comment" spellcheck="true">// csdn</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>zhuanlan<span class="token punctuation">.</span>zhihu<span class="token punctuation">.</span>com<span class="token operator">/</span>p<span class="token operator">/</span><span class="token number">115428938</span>                  <span class="token comment" spellcheck="true">// 知乎</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>juejin<span class="token punctuation">.</span>cn<span class="token operator">/</span>post<span class="token operator">/</span><span class="token number">6844903684422254606</span>#heading<span class="token number">-28</span>   <span class="token comment" spellcheck="true">// 稀土掘金</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> typescript进阶2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript进阶</title>
      <link href="2021/11/28/typescript-jin-jie/"/>
      <url>2021/11/28/typescript-jin-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="typescript进阶"><a href="#typescript进阶" class="headerlink" title="typescript进阶"></a>typescript进阶</h4><h4 id="interface和type"><a href="#interface和type" class="headerlink" title="interface和type"></a>interface和type</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span>同名的<span class="token keyword">interface</span>自动聚合，也可跟同名的<span class="token keyword">class</span>自动聚合。只能表示 object <span class="token keyword">class</span> <span class="token class-name">function</span> 类型type 不仅仅能够表示  object <span class="token keyword">class</span> <span class="token class-name">function</span> 。不能重名，扩展已有的type 需要创建新的type支持复杂的类型操作。</code></pre><h5 id="都可以用来表示-object-或-function-只是语法略有不同。"><a href="#都可以用来表示-object-或-function-只是语法略有不同。" class="headerlink" title="都可以用来表示 object  或  function , 只是语法略有不同。"></a>都可以用来表示 object  或  function , 只是语法略有不同。</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>  x<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span>  y<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">SetPoint</span><span class="token punctuation">{</span>  <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type Point <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type SetPoint <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span></code></pre><h5 id="与interface不同的是"><a href="#与interface不同的是" class="headerlink" title="与interface不同的是"></a>与interface不同的是</h5><pre class=" language-typescript"><code class="language-typescript">与<span class="token keyword">interface</span>不同的是，type还可以来表示其他类型，比如基本数据类型、元素，并集等。type Name <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">;</span>type PartialPointX <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>type PartialPointY <span class="token operator">=</span> <span class="token punctuation">{</span>y<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>type PartialPoint <span class="token operator">=</span> PartialPointX <span class="token operator">|</span> PartialPointY<span class="token punctuation">;</span>type Data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">number</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">boolean</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h5 id="Extend"><a href="#Extend" class="headerlink" title="Extend"></a>Extend</h5><pre class=" language-typescript"><code class="language-typescript">都可以被继承，只是语法略有不同，<span class="token operator">**</span>注意<span class="token keyword">interface</span>与type并不互斥。<span class="token comment" spellcheck="true">// interface extends interface</span><span class="token keyword">interface</span> <span class="token class-name">PartialPointX</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token keyword">extends</span> <span class="token class-name">PartialPointX</span> <span class="token punctuation">{</span>y<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// type extends type</span>type PartialPointX <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>type Point <span class="token operator">=</span> PartialPointX <span class="token operator">&amp;</span> <span class="token punctuation">{</span>y<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// interface extends type</span>type PartialPointX <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token keyword">extends</span> <span class="token class-name">PartialPointX</span> <span class="token punctuation">{</span>y<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// type extends interface</span><span class="token keyword">interface</span> <span class="token class-name">ParticalPointX</span> <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>type Point <span class="token operator">=</span> ParticalPointX <span class="token operator">&amp;</span> <span class="token punctuation">{</span>y<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="only-interface-can"><a href="#only-interface-can" class="headerlink" title="only interface can"></a>only interface can</h5><pre class=" language-typescript"><code class="language-typescript">开发中有时会有<span class="token keyword">interface</span>能表达，但type做不到的情况 <span class="token operator">=</span><span class="token operator">></span> 给函数挂载属性。<span class="token keyword">interface</span> <span class="token class-name">FuncWithAttachment</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>param<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>  someProperty<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> testFunc<span class="token punctuation">:</span> FuncWithAttachment <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>param<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> param<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Neal"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="amp-和-操作符"><a href="#amp-和-操作符" class="headerlink" title="&amp; 和 | 操作符"></a>&amp; 和 | 操作符</h5><pre class=" language-typescript"><code class="language-typescript">这里 <span class="token operator">&amp;</span> 和 <span class="token operator">|</span>  并非位运算符，<span class="token operator">&amp;</span> 表示必须满足所有， <span class="token operator">|</span> 表示只需满足一个。<span class="token keyword">interface</span> <span class="token class-name">TA</span><span class="token punctuation">{</span>  a<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>  b<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type TB<span class="token punctuation">{</span>  b<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span>  c<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type TC <span class="token operator">=</span> TA <span class="token operator">|</span> TB<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TC 的 key，包含 ab 或者 bc 即可，当然，包含 bac 也可以</span>type TD <span class="token operator">=</span> TA <span class="token operator">&amp;</span> TB<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TD 的 可以,必须包含 abc</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> typescript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归深拷贝</title>
      <link href="2021/11/28/di-gui-shen-kao-bei/"/>
      <url>2021/11/28/di-gui-shen-kao-bei/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="递归深拷贝"><a href="#递归深拷贝" class="headerlink" title="递归深拷贝"></a>递归深拷贝</h4><h6 id="基础版本-，不兼容特殊对象、无法处理循环引用"><a href="#基础版本-，不兼容特殊对象、无法处理循环引用" class="headerlink" title="基础版本 ，不兼容特殊对象、无法处理循环引用"></a>基础版本 ，不兼容特殊对象、无法处理循环引用</h6><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> arrObj <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'登录'</span><span class="token punctuation">,</span>      exact<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token function">render</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// return (&lt;div>什么呢&lt;/div>)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 递归深拷贝</span>  <span class="token comment" spellcheck="true">/**   * typeof 判断 null array 对象 都是 object, 但可以准确判断出函数为 function  */</span>  <span class="token keyword">const</span> deepClone <span class="token operator">=</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>source <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> source <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> container <span class="token operator">=</span> source<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> source<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// window</span>        container<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// this.deepClone</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        container<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>item<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 函数这里是否是浅拷贝了？</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> container  <span class="token punctuation">}</span>  <span class="token keyword">let</span> copyObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>arrObj<span class="token punctuation">)</span>  <span class="token keyword">let</span> lightCopy <span class="token operator">=</span> arrObj  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copyObj <span class="token operator">===</span> arrObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lightCopy <span class="token operator">===</span> arrObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h6 id="升级版，兼容特殊对象、循环引用"><a href="#升级版，兼容特殊对象、循环引用" class="headerlink" title="升级版，兼容特殊对象、循环引用"></a>升级版，兼容特殊对象、循环引用</h6><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> deepClone <span class="token operator">=</span> <span class="token punctuation">(</span>source<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对拷贝的对象做个记录</span>        <span class="token comment" spellcheck="true">// typeof 判断数据类型 ，null , 对象，数组都是object</span>    <span class="token keyword">function</span> <span class="token function">deepContent</span><span class="token punctuation">(</span>source<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// typeof判断 null 也为object , 这里需要再做一次判断</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> source <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 去除可能为undefined 的值</span>            <span class="token keyword">return</span> source<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token keyword">constructor</span> <span class="token operator">===</span> Date<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 兼容特殊对象</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token keyword">constructor</span> <span class="token operator">===</span> RegExp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 如果存在 (之前做过记录)，不再拷贝，直接返回</span>            <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> currentItem <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token keyword">constructor</span> <span class="token operator">===</span> <span class="token keyword">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> currentItem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 其他情况才拷贝</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    currentItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepContent</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    currentItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> currentItem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">deepContent</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回值为一个函数的执行结果，结果是一个对象</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="九九乘法表-递归"><a href="#九九乘法表-递归" class="headerlink" title="九九乘法表(递归)"></a>九九乘法表(递归)</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> chengfa <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1111'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1X1=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">chengfa</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 这里递归会连续调9次</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'牛皮'</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 每次递归的for循环都会等待前面的递归函数执行完毕，才执行下面的for循环</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'323232323232'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 为什么会等待，函数要执行完毕！</span>      str <span class="token operator">+</span><span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">'x'</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> i <span class="token operator">*</span> num <span class="token operator">+</span> <span class="token string">' '</span>  <span class="token comment" spellcheck="true">// 9 会等待8的递归，8 会等待7 ...</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">chengfa</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1X1=1</span><span class="token comment" spellcheck="true">// 1x2=2 2x2=4 </span><span class="token comment" spellcheck="true">// 1x3=3 2x3=6 3x3=9</span><span class="token comment" spellcheck="true">// 1x4=4 2x4=8 3x4=12 4x4=16</span><span class="token comment" spellcheck="true">// 1x5=5 2x5=10 3x5=15 4x5=20 5x5=25</span><span class="token comment" spellcheck="true">// 1x6=6 2x6=12 3x6=18 4x6=24 5x6=30 6x6=36</span><span class="token comment" spellcheck="true">// 1x7=7 2x7=14 3x7=21 4x7=28 5x7=35 6x7=42 7x7=49</span><span class="token comment" spellcheck="true">// 1x8=8 2x8=16 3x8=24 4x8=32 5x8=40 6x8=48 7x8=56 8x8=64</span><span class="token comment" spellcheck="true">// 1x9=9 2x9=18 3x9=27 4x9=36 5x9=45 6x9=54 7x9=63 8x9=72 9x9=81</span><span class="token comment" spellcheck="true">// 1111111</span><span class="token comment" spellcheck="true">// 1111111</span><span class="token comment" spellcheck="true">// 1111111</span><span class="token comment" spellcheck="true">// 1111111</span><span class="token comment" spellcheck="true">// 1111111</span><span class="token comment" spellcheck="true">// 1111111</span><span class="token comment" spellcheck="true">// 1111111</span><span class="token comment" spellcheck="true">// 1111111</span><span class="token comment" spellcheck="true">// 1111111</span><span class="token comment" spellcheck="true">// 1X1=1</span><span class="token comment" spellcheck="true">// 牛皮 2</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 1x2=2 2x2=4 </span><span class="token comment" spellcheck="true">// 牛皮 3</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 1x3=3 2x3=6 3x3=9 </span><span class="token comment" spellcheck="true">// 牛皮 4</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 1x4=4 2x4=8 3x4=12 4x4=16         </span><span class="token comment" spellcheck="true">// 牛皮 5</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 1x5=5 2x5=10 3x5=15 4x5=20 5x5=25 </span><span class="token comment" spellcheck="true">// 牛皮 6</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 1x6=6 2x6=12 3x6=18 4x6=24 5x6=30 6x6=36</span><span class="token comment" spellcheck="true">// 牛皮 7</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 1x7=7 2x7=14 3x7=21 4x7=28 5x7=35 6x7=42 7x7=49</span><span class="token comment" spellcheck="true">// 牛皮 8</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 1x8=8 2x8=16 3x8=24 4x8=32 5x8=40 6x8=48 7x8=56 8x8=64</span><span class="token comment" spellcheck="true">// 牛皮 9</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 323232323232</span><span class="token comment" spellcheck="true">// 1x9=9 2x9=18 3x9=27 4x9=36 5x9=45 6x9=54 7x9=63 8x9=72 9x9=81</span><span class="token comment" spellcheck="true">// undefined</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 递归深拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js时间对象</title>
      <link href="2021/11/28/js-shi-jian-dui-xiang/"/>
      <url>2021/11/28/js-shi-jian-dui-xiang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="js时间对象"><a href="#js时间对象" class="headerlink" title="js时间对象"></a>js时间对象</h4><h5 id="将当前时间转化为时间戳"><a href="#将当前时间转化为时间戳" class="headerlink" title="将当前时间转化为时间戳"></a>将当前时间转化为时间戳</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 可转当前Data 对象， 或者是格式字符串</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2014-04-23 18:55:49:123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> time1 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1398250549123   // 精确到毫秒</span><span class="token keyword">var</span> time2 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1398250549123   // 精确到毫秒</span><span class="token keyword">var</span> time3 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1398250549000   不知为何，此处略有差异</span></code></pre><p>未完待续。。。</p><h4 id="moment-js-使用"><a href="#moment-js-使用" class="headerlink" title="moment.js 使用"></a>moment.js 使用</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 安装 引入moment.js</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取当前moment对象</span>moment<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// moment.js 转时间戳(精确到毫秒)</span><span class="token keyword">let</span> startTime <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>startTime<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取当前时间快照</span>startTime<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>timeCount <span class="token operator">*</span> ind<span class="token punctuation">,</span> <span class="token string">"hour"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 在当前时间增加 (时分秒、年 (number), 'year' | 'month' | 'hour')</span><span class="token keyword">const</span> nextYearDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 在当前年份增加一年</span></code></pre><p>未完待续。。。</p><h4 id="其他-antd-DatePicker-defaultPickerValue"><a href="#其他-antd-DatePicker-defaultPickerValue" class="headerlink" title="其他  antd   DatePicker   defaultPickerValue"></a>其他  antd   DatePicker   defaultPickerValue</h4><pre class=" language-js"><code class="language-js">defaultPickerValue    默认面板日期    moment ；antd 的 DatePicker 的 defaultPickerValue属性可以指定面板时间开始日期！可以基于当前时间往后推一年，<span class="token keyword">const</span> nextYearDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span>  ；若当年和次年的 useForm 表单域字段一致 <span class="token punctuation">(</span>为了当年和次年二选其一，故而只用一个字段<span class="token punctuation">)</span>，即便在回显时为次年 <span class="token punctuation">(</span><span class="token operator">**</span><span class="token operator">*</span>次年和当年为同一字段，因此都将被赋值！<span class="token punctuation">)</span>赋值后，虽然当前次年显示的 dateString 值一致 <span class="token punctuation">(</span>DatePicker 设置 format<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'MM-DD'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>， 但若是为当年设置了 defaultPickerValue<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                              <span class="token operator">**</span><span class="token operator">*</span>当年和次年的面板日期不会相互影响！</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js时间对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts5泛型</title>
      <link href="2021/11/21/ts5-fan-xing/"/>
      <url>2021/11/21/ts5-fan-xing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><h5 id="函数中的泛型"><a href="#函数中的泛型" class="headerlink" title="函数中的泛型"></a>函数中的泛型</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 泛型</span><span class="token comment" spellcheck="true">// 函数中要用到的类型 T ,类型不确定，泛指</span><span class="token keyword">const</span> join <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> P<span class="token operator">></span><span class="token punctuation">(</span>first<span class="token punctuation">:</span> T<span class="token punctuation">,</span> second<span class="token punctuation">:</span> P<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>first<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>second<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// join('1')  这样的写法ts自己也会推断</span>join<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">function</span> myFun<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>params<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 或者 function myFun&lt;T>(params: T[]) { 也可</span>  <span class="token keyword">return</span> params<span class="token punctuation">}</span>myFun<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h5 id="类中使用泛型"><a href="#类中使用泛型" class="headerlink" title="类中使用泛型"></a>类中使用泛型</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 类中使用泛型</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">number</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 泛型约束</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> per<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token function">choosePerson</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>per<span class="token punctuation">[</span>index<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> ren <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'牛恒'</span><span class="token punctuation">,</span> <span class="token string">'浩哥'</span><span class="token punctuation">,</span> <span class="token string">'巨哥'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ren'</span><span class="token punctuation">,</span> ren<span class="token punctuation">.</span><span class="token function">choosePerson</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ren 浩哥</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">RenA</span> <span class="token punctuation">{</span>  names<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">RenA</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 泛型约束</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> per<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token function">choosePerson</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义的返回值类型必须与实际的返回值类型所对应</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>per<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>names  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 为泛型指定类型时，可以是单一的类型，也可以是一个类型集合 (interface)</span><span class="token keyword">const</span> ren <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 也可以写为 const ren = new Person&lt;RenA>([</span>  <span class="token punctuation">{</span> names<span class="token punctuation">:</span> <span class="token string">'牛恒'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> names<span class="token punctuation">:</span> <span class="token string">'浩哥'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> names<span class="token punctuation">:</span> <span class="token string">'巨哥'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ren'</span><span class="token punctuation">,</span> ren<span class="token punctuation">.</span><span class="token function">choosePerson</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ren 浩哥</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 其他</span><span class="token keyword">interface</span> <span class="token class-name">AAA</span> <span class="token punctuation">{</span>  length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">function</span> fn<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">AAA</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// console.log(fn('123'));  // 3</span><span class="token comment" spellcheck="true">// console.log(fn({ length: 10 })); // 10</span></code></pre><h5 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  num<span class="token punctuation">:</span> T<span class="token punctuation">,</span>  config<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span>  <span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token keyword">extends</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>menuType<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><h5 id="as类型断言"><a href="#as类型断言" class="headerlink" title="as类型断言"></a>as类型断言</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">iconType</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>propsname<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> JSX<span class="token punctuation">.</span>Element<span class="token punctuation">}</span><span class="token keyword">const</span> iconList <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'/home'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>UserOutlined <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  <span class="token string">'/user-manage'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>UserOutlined <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  <span class="token string">'/user-manage/list'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>UserOutlined <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span> as iconType</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ts5泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts4抽象类</title>
      <link href="2021/11/20/ts4-chou-xiang-lei/"/>
      <url>2021/11/20/ts4-chou-xiang-lei/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="typesctipt抽象类"><a href="#typesctipt抽象类" class="headerlink" title="typesctipt抽象类"></a>typesctipt抽象类</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 抽象类</span>abstract <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 抽象类的内容并不确定，因此不写大括号</span>  abstract <span class="token function">hobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 所有继承自抽象类的派生类，必须包含抽象类的方法</span><span class="token keyword">class</span> <span class="token class-name">Juge</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token function">hobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'深渊疲劳'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Niuheng</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token function">hobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'代码使我快乐'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Haoge</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token function">hobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'螺蛳粉'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 有时我们会用不同的flag  区分在不同的时候拿不同的参数，调接口时用flag不同的值区分调用哪个接口 ，等等。。。</span><span class="token comment" spellcheck="true">// 我一般会用数组的形式,但这样要去一个一个订对，非常麻烦。</span><span class="token keyword">let</span> addOrEdit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token string">'edit'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 组件</span><span class="token comment" spellcheck="true">// ... await  </span><span class="token comment" spellcheck="true">// getinitData(addOrEdit[0])</span><span class="token comment" spellcheck="true">// request.js 接口请求文件</span><span class="token comment" spellcheck="true">// const getinitData = (flag) {</span><span class="token comment" spellcheck="true">// ...</span><span class="token comment" spellcheck="true">//   flag === addOrEdit[0] ? oneApi : twoApi</span><span class="token comment" spellcheck="true">// ..</span><span class="token comment" spellcheck="true">// }</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 据说这个是初级的写法</span><span class="token keyword">function</span> <span class="token function">getHobby</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'下象棋'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'画画'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'追剧'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'看纪录片'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getHobby</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token string">'下象棋'</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token string">'画画'</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token string">'追剧'</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token string">'看纪录片'</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 中级的写法</span><span class="token keyword">const</span> Hobbys <span class="token operator">=</span> <span class="token punctuation">{</span>  ChineseCheess<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  Draw<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  Moves<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  Documentary<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getHobby</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> Hobbys<span class="token punctuation">.</span>ChineseCheess<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'下象棋'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> Hobbys<span class="token punctuation">.</span>Draw<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'画画'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> Hobbys<span class="token punctuation">.</span>Moves<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'追剧'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> Hobbys<span class="token punctuation">.</span>Documentary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'看纪录片'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 高级的写法</span><span class="token keyword">enum</span> Hobbys <span class="token punctuation">{</span>  ChineseCheess<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 0  此处也可以改写 ChineseCheess = 1， 后面的值均会因为这个值的改变而改变</span>  Draw<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 1</span>  Moves<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// 2</span>  Documentary    <span class="token comment" spellcheck="true">// 3</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过下标反查</span><span class="token comment" spellcheck="true">// 也可以用这种方法判断 flag</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hobbys[0]'</span><span class="token punctuation">,</span> Hobbys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ChineseCheess</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span><span class="token keyword">typeof</span> Hobbys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span><span class="token keyword">function</span> <span class="token function">getHobby</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> Hobbys<span class="token punctuation">.</span>ChineseCheess<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'下象棋'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> Hobbys<span class="token punctuation">.</span>Draw<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'画画'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> Hobbys<span class="token punctuation">.</span>Moves<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'追剧'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> Hobbys<span class="token punctuation">.</span>Documentary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'看纪录片'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'getHobby(1)'</span><span class="token punctuation">,</span> <span class="token function">getHobby</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ts4抽象类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型原型链</title>
      <link href="2021/11/19/yuan-xing-yuan-xing-lian/"/>
      <url>2021/11/19/yuan-xing-yuan-xing-lian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><pre class=" language-js"><code class="language-js">    每一个函数都有一个prototype属性，指向原型对象，    prototype <span class="token punctuation">(</span>原型对象<span class="token punctuation">)</span>的所有属性和方法，都会被构造函数的实例对象所继承。    因此，我们可以把那些公用的（不变的）的属性和方法，定义在原型对象（prototype）上 。    构造函数 prototype 属性指向与 构造函数实例所创建的对象 的__proto__属性指向的是同一个对象。    原型对象可以向所有实例对象共享他的属性和方法，因此，不用在构造函数中定义对象信息，而是可以直接将这些信息添加到原型中。  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr.__proto__'</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Array.prototype</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr.__proto__ === Array.prototype'</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr.__proto__.__proto__'</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Object.prototype</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr.__proto__.__proto__ === Object.prototype'</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>  __proto__      <span class="token operator">=</span><span class="token operator">></span>      __proto__       <span class="token operator">=</span><span class="token operator">></span>        __proto__       <span class="token operator">=</span><span class="token operator">></span>    <span class="token keyword">null</span>     <span class="token punctuation">[</span><span class="token punctuation">]</span>               Array<span class="token punctuation">.</span>prototype          Object<span class="token punctuation">.</span>prototype      <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>    从 <span class="token keyword">instanceof</span> 能够判断出 <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>__proto__  指向 Array<span class="token punctuation">.</span>prototype，    而 Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ 又指向了Object<span class="token punctuation">.</span>prototype，    最终 Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ 指向了<span class="token keyword">null</span>，标志着原型链的结束。            <span class="token operator">**</span><span class="token operator">**</span>因此，<span class="token punctuation">[</span><span class="token punctuation">]</span>、Array、Object 就在内部形成了一条原型链</code></pre><pre class=" language-js"><code class="language-js">    <span class="token keyword">instanceof</span> 用来判断 A <span class="token punctuation">(</span>实例对象<span class="token punctuation">)</span> 是否 是 B <span class="token punctuation">(</span>构造函数<span class="token punctuation">)</span> 的实例。    <span class="token keyword">instanceof</span> 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型。    Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法用以确认某个对象本身是否为 Array 类型，而不区分该对象在哪个环境中创建。  </code></pre><pre class=" language-js"><code class="language-js">     <span class="token comment" spellcheck="true">// 自建构造函数的原型 、 原型链</span>    <span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> kitty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'kitty.__proto__'</span><span class="token punctuation">,</span> kitty<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Cat 原型对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'yuan xing lian one'</span><span class="token punctuation">,</span> kitty<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Object.prototype</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'yuan xing  liang two'</span><span class="token punctuation">,</span> kitty<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>    <span class="token comment" spellcheck="true">// 实例化后，原型上的构造器会传递到子类上，同样指向的是子类构造函数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子类的构造器'</span><span class="token punctuation">,</span> stud<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Student<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 原型链继承</span>    <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'I love you so much'</span>    <span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 子类的原型等于父类的实例</span>    <span class="token comment" spellcheck="true">// 如此继承时，也同样继承了父类的构造器 constructor（父类的构造函数）</span>    <span class="token comment" spellcheck="true">// new Person() 的实例对象，是一个构造函数 (Student) 的原型对象,</span>    <span class="token comment" spellcheck="true">// 而这个原型对象，同时也是构造函数及其实例对象的原型对象，</span>    <span class="token comment" spellcheck="true">// 而它又是另一个构造函数 (Person) 的实例对象</span>    Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 一般需要将子类的构造器 (构造函数) 重写回来</span>    <span class="token comment" spellcheck="true">// ***Student.prototype.constructor = Student</span>    <span class="token keyword">const</span> stud <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 找到 Person 的原型对象上了</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'stud name '</span><span class="token punctuation">,</span> stud<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'I love you so much'</span>    <span class="token comment" spellcheck="true">// ***以下两项，在重写 Student.prototype.constructor = Student 后为 false</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Student.prototype.constructor'</span><span class="token punctuation">,</span> Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'构造器'</span><span class="token punctuation">,</span> Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>    <span class="token comment" spellcheck="true">// 继承一次，就要比原来多一次， __proto__  (Student不重写constructor时)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'原型链继承后能够点几次'</span><span class="token punctuation">,</span>stud<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// true</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 原型原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript3</title>
      <link href="2021/11/16/typescript3/"/>
      <url>2021/11/16/typescript3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h4><h4 id="interface-接口"><a href="#interface-接口" class="headerlink" title="interface 接口"></a>interface 接口</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 接口 interface</span><span class="token comment" spellcheck="true">// 将组件中的重复注解做一个优化</span><span class="token comment" spellcheck="true">// interface 和类型别名的区别</span><span class="token comment" spellcheck="true">// interface name {} 必须是这种格式</span><span class="token comment" spellcheck="true">// 而类型别名  type Girl =  string 可以被赋予一种类型</span><span class="token keyword">interface</span> <span class="token class-name">Girl</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  bust<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  wastline<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span>  <span class="token comment" spellcheck="true">// 加？的作用 没有也不报错</span><span class="token punctuation">}</span><span class="token keyword">let</span> girl <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'洛璃'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  bust<span class="token punctuation">:</span> <span class="token number">88</span><span class="token punctuation">}</span><span class="token keyword">const</span> xuanba <span class="token operator">=</span> <span class="token punctuation">(</span>girl<span class="token punctuation">:</span> Girl<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  girl<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token number">24</span> <span class="token operator">&amp;&amp;</span> girl<span class="token punctuation">.</span>bust <span class="token operator">&lt;</span> <span class="token number">90</span> <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'可以面试'</span><span class="token punctuation">)</span>  girl<span class="token punctuation">.</span>age <span class="token operator">>=</span> <span class="token number">24</span> <span class="token operator">||</span> girl<span class="token punctuation">.</span>bust <span class="token operator">>=</span> <span class="token number">90</span> <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'被刷掉'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">(</span>girl<span class="token punctuation">:</span> Girl<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>name <span class="token operator">+</span> girl<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">'岁'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>name <span class="token operator">+</span> girl<span class="token punctuation">.</span>bust <span class="token operator">+</span> <span class="token string">'胸围'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>name <span class="token operator">+</span> girl<span class="token punctuation">.</span>wastline <span class="token operator">+</span> <span class="token string">'腰围'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 加？没有也不报错</span><span class="token punctuation">}</span><span class="token function">xuanba</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token function">info</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Girl</span> <span class="token punctuation">{</span>  names<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  bust<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  wastline<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>propnames<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 可加多个，键为字符串，值为任意类型 （不限制接口再增加其余的键名）</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span>             <span class="token comment" spellcheck="true">// 限定对象方法的返回值</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用接口限制类</span><span class="token comment" spellcheck="true">// class Jiejie implements Girl {</span><span class="token comment" spellcheck="true">//   constructor() {</span><span class="token comment" spellcheck="true">//     this.names = '大脚';</span><span class="token comment" spellcheck="true">//     this.age = 18;</span><span class="token comment" spellcheck="true">//     this.bust = 94</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">//   names: '大脚';</span><span class="token comment" spellcheck="true">//   age: 18;</span><span class="token comment" spellcheck="true">//   bust: 94;</span><span class="token comment" spellcheck="true">//   say() {</span><span class="token comment" spellcheck="true">//     return '你好呀'</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// 接口继承 //继承以往限制的同时再增加一些自己的</span><span class="token keyword">interface</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Girl</span> <span class="token punctuation">{</span>  <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">let</span> girl <span class="token operator">=</span> <span class="token punctuation">{</span>  names<span class="token punctuation">:</span> <span class="token string">'大脚'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  bust<span class="token punctuation">:</span> <span class="token number">88</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">,</span>  hobby<span class="token punctuation">:</span> <span class="token string">'羽毛球'</span><span class="token punctuation">,</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'你好呀'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'这学期我来教你们'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> xuanba <span class="token operator">=</span> <span class="token punctuation">(</span>girl<span class="token punctuation">:</span> Girl<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  girl<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token number">24</span> <span class="token operator">&amp;&amp;</span> girl<span class="token punctuation">.</span>bust <span class="token operator">&lt;</span> <span class="token number">90</span> <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>names <span class="token operator">+</span> <span class="token string">'可以面试'</span><span class="token punctuation">)</span>  girl<span class="token punctuation">.</span>age <span class="token operator">>=</span> <span class="token number">24</span> <span class="token operator">||</span> girl<span class="token punctuation">.</span>bust <span class="token operator">></span> <span class="token number">90</span> <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>names <span class="token operator">+</span> <span class="token string">'被刷掉'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">(</span>girl<span class="token punctuation">:</span> Teacher<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>names <span class="token operator">+</span> girl<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">'岁'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>names <span class="token operator">+</span> girl<span class="token punctuation">.</span>bust <span class="token operator">+</span> <span class="token string">'胸围'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>names <span class="token operator">+</span> girl<span class="token punctuation">.</span>bust <span class="token operator">+</span> <span class="token string">'腰围'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>names <span class="token operator">+</span> girl<span class="token punctuation">.</span>sex <span class="token operator">+</span> <span class="token string">'性别'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>names <span class="token operator">+</span> girl<span class="token punctuation">.</span>hobby <span class="token operator">+</span> <span class="token string">'爱好'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">xuanba</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token function">info</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span></code></pre><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 类</span><span class="token keyword">class</span> <span class="token class-name">Persons</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count  <span class="token punctuation">}</span>  count<span class="token punctuation">:</span> <span class="token keyword">string</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Childs</span> <span class="token keyword">extends</span> <span class="token class-name">Persons</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> love<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>love <span class="token operator">=</span> love  <span class="token punctuation">}</span>  love<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 对基类的方法进行重写</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Childcount'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>love  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> PerOne<span class="token punctuation">:</span> Persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Persons</span><span class="token punctuation">(</span><span class="token string">'handsome man'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'PerOne'</span><span class="token punctuation">,</span> PerOne<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Children<span class="token punctuation">:</span> Childs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Childs</span><span class="token punctuation">(</span><span class="token string">'girl '</span><span class="token punctuation">,</span> <span class="token string">'I Love You'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Children'</span><span class="token punctuation">,</span> Children<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'基类的方法'</span><span class="token punctuation">,</span> Children<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="类的访问类型"><a href="#类的访问类型" class="headerlink" title="类的访问类型"></a>类的访问类型</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// public 公共的，类的内部和外部都能使用</span><span class="token comment" spellcheck="true">// protected 受保护的，只能在基本类和它的子类内部访问</span><span class="token comment" spellcheck="true">// private 私有属性 ，只能在基本类的内部访问</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">''</span>  <span class="token punctuation">}</span>  <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span>  <span class="token keyword">public</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'hello'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> person<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// person.name = 'lll'</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token function">sayTeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// console.log(person.name);</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> learn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'learn.sayTeach()'</span><span class="token punctuation">,</span> learn<span class="token punctuation">.</span><span class="token function">sayTeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="类的构造器"><a href="#类的构造器" class="headerlink" title="类的构造器"></a>类的构造器</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 类的构造函数</span><span class="token keyword">class</span> <span class="token class-name">Aoteman</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// public name: string</span>  <span class="token comment" spellcheck="true">// constructor(name: string) {</span>  <span class="token comment" spellcheck="true">//   this.name = name</span>  <span class="token comment" spellcheck="true">// }</span>  <span class="token comment" spellcheck="true">// 等价于  (简写)</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DijiaAoteman</span> <span class="token keyword">extends</span> <span class="token class-name">Aoteman</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> type<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 派生类必须使用super</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// this.type = type</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> dijia <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DijiaAoteman</span><span class="token punctuation">(</span><span class="token string">'dijia'</span><span class="token punctuation">,</span> <span class="token string">'aoteman'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dijia<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// dijia</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dijia<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aoteman</span><span class="token keyword">const</span> aote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Aoteman</span><span class="token punctuation">(</span><span class="token string">'迪迦'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aote<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 迪迦</span></code></pre><h4 id="类的-get-、set-、static-readonly"><a href="#类的-get-、set-、static-readonly" class="headerlink" title="类的 get  、set  、static ,  readonly"></a>类的 get  、set  、static ,  readonly</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 类的get和set</span><span class="token keyword">class</span> <span class="token class-name">Niuheng</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token keyword">get</span> <span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获得'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> <span class="token number">10</span>  <span class="token punctuation">}</span>  <span class="token keyword">set</span> <span class="token function">sayAge</span><span class="token punctuation">(</span>sayAge<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sayAge'</span><span class="token punctuation">,</span>sayAge<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> sayAge <span class="token operator">+</span> <span class="token number">5</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> erqiu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Niuheng</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 修改时触发set， 再触发get</span>erqiu<span class="token punctuation">.</span>sayAge <span class="token operator">=</span> <span class="token number">28</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'erqiu'</span><span class="token punctuation">,</span> erqiu<span class="token punctuation">.</span>sayAge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 类的静态类型  static</span><span class="token keyword">class</span> <span class="token class-name">XiaoJiejie</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token function">sayLove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"I Love You"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> jiejie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoJiejie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 实例化对象无法访问静态类型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'jiejie'</span><span class="token punctuation">,</span>jiejie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// class静态类型直接通过类访问</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'静态类型'</span><span class="token punctuation">,</span>XiaoJiejie<span class="token punctuation">.</span><span class="token function">sayLove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 只读属性</span><span class="token keyword">class</span> <span class="token class-name">Niuheng</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> readonly _name<span class="token punctuation">:</span> <span class="token keyword">string</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> ren <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Niuheng</span><span class="token punctuation">(</span><span class="token string">'牛恒'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 不能修改： 无法分配到 "_name" ，因为它是只读属性。ts(2540)</span><span class="token comment" spellcheck="true">// ren._name = '牛哼'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ren'</span><span class="token punctuation">,</span> ren<span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript2</title>
      <link href="2021/11/16/typescript2/"/>
      <url>2021/11/16/typescript2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="typescript2"><a href="#typescript2" class="headerlink" title="typescript2"></a>typescript2</h4><h5 id="数组类型注解"><a href="#数组类型注解" class="headerlink" title="数组类型注解"></a>数组类型注解</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 数组注解</span><span class="token keyword">let</span> numberList<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> stringList<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'好的呀'</span><span class="token punctuation">,</span> <span class="token string">'是的呢'</span><span class="token punctuation">,</span> <span class="token string">'什么呢'</span><span class="token punctuation">]</span><span class="token keyword">let</span> undefinedList<span class="token punctuation">:</span> undefined<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 既有数字又有字符串</span><span class="token keyword">let</span> arr<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 对象数组</span><span class="token comment" spellcheck="true">// const xiaojiejie: {</span><span class="token comment" spellcheck="true">//   name: string,</span><span class="token comment" spellcheck="true">//   age: number</span><span class="token comment" spellcheck="true">// }[] = [</span><span class="token comment" spellcheck="true">//     {</span><span class="token comment" spellcheck="true">//       name: '超杰',</span><span class="token comment" spellcheck="true">//       age: 27</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">//   ]</span><span class="token comment" spellcheck="true">//  type alias 类型别名</span><span class="token comment" spellcheck="true">// type Lady = {</span><span class="token comment" spellcheck="true">//   name: string,</span><span class="token comment" spellcheck="true">//   age: number</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// const xiaojiejie: Lady[] = [</span><span class="token comment" spellcheck="true">//   {</span><span class="token comment" spellcheck="true">//     name: '超杰',</span><span class="token comment" spellcheck="true">//     age: 27</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">// ]</span><span class="token comment" spellcheck="true">// 类的方式</span><span class="token comment" spellcheck="true">// 给初始值</span><span class="token keyword">class</span> <span class="token class-name">Jiejie</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> xiaojiejie<span class="token punctuation">:</span> Jiejie<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'超杰'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">27</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'xiaojiejie'</span><span class="token punctuation">,</span> xiaojiejie<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 元组 ： 数组的加强版 （因为数组有一些弱点）</span><span class="token comment" spellcheck="true">// 若每一项的数据类型不对，就会报错</span><span class="token keyword">const</span> yuanList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'111'</span><span class="token punctuation">,</span> <span class="token string">'222'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 之前的CSV格式</span><span class="token keyword">const</span> csvList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">'111'</span><span class="token punctuation">,</span> <span class="token string">'2222'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'222'</span><span class="token punctuation">,</span> <span class="token string">'3333'</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'555'</span><span class="token punctuation">,</span> <span class="token string">'6666'</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// console.log('yuanList', yuanList);</span><span class="token comment" spellcheck="true">// console.log('csvList', csvList);</span><span class="token comment" spellcheck="true">// 先今以数组对象居多，元组已经非常少</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typesctipt1</title>
      <link href="2021/11/16/typesctipt1/"/>
      <url>2021/11/16/typesctipt1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="typesctipt"><a href="#typesctipt" class="headerlink" title="typesctipt"></a>typesctipt</h4><h5 id="基础静态类型和对象静态类型"><a href="#基础静态类型和对象静态类型" class="headerlink" title="基础静态类型和对象静态类型"></a>基础静态类型和对象静态类型</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 基础静态类型</span><span class="token keyword">let</span> myage<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">24</span>  <span class="token comment" spellcheck="true">// 此为类型注解</span><span class="token keyword">let</span> myname<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'fly'</span><span class="token comment" spellcheck="true">// 对象静态类型    以下都是</span><span class="token keyword">const</span> xiaojiejie1<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 定义类型</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 赋值</span>  name<span class="token punctuation">:</span> <span class="token string">'慕容兰洛'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 不为字符串数组，就会报错</span><span class="token keyword">const</span> xiaojiejies<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'洛璃'</span><span class="token punctuation">,</span> <span class="token string">'应欢欢'</span><span class="token punctuation">,</span> <span class="token string">'绫清竹'</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'xiaojiejies'</span><span class="token punctuation">,</span> xiaojiejies<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">const</span> ren<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 若返回值不是字符串，就会报错</span><span class="token keyword">const</span> nihaoxiaojiejie<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">'洛璃'</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nihaoxiaojiejie'</span><span class="token punctuation">,</span> nihaoxiaojiejie<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="类型注解和类型推断"><a href="#类型注解和类型推断" class="headerlink" title="类型注解和类型推断"></a>类型注解和类型推断</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">const</span> two <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">const</span> three <span class="token operator">=</span> one <span class="token operator">+</span> two  <span class="token comment" spellcheck="true">// ts 会自动推断类型 ** 类型推断  : const three: number</span><span class="token comment" spellcheck="true">/*** 如果ts能自动推断类型，就什么都不需要做了 （不为any时）&amp;* 如果ts无法分析变量类型的话，我们就需要使用类型注解*/</span> <span class="token comment" spellcheck="true">// 函数参数和返回类型的注解</span><span class="token comment" spellcheck="true">// 这种推断是有问题的</span><span class="token comment" spellcheck="true">// function jisuan(a: number, b: number) {</span><span class="token comment" spellcheck="true">//  return a + b + '' // 若这里不小心加上了''， 就出了 问题, 返回值的类型推断就不对了</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// let results = jisuan(1, 2) // </span><span class="token comment" spellcheck="true">// console.log(results);</span></code></pre><h5 id="函数参数和返回值的注解"><a href="#函数参数和返回值的注解" class="headerlink" title="函数参数和返回值的注解"></a>函数参数和返回值的注解</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">//  直接给返回值定义类型，若返回值有问题，下面的语句会直接报错</span> <span class="token keyword">function</span> <span class="token function">jisuan</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span> <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">jisuan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2 void 没有返回值</span><span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'22222'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 3 never 永远执行不完，一般是在抛出异常的时候</span><span class="token keyword">function</span> <span class="token function">errorFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 无法访问的代码</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  死循环也用never</span><span class="token keyword">function</span> <span class="token function">forNever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 无法访问的代码</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 为对象类型内部指定参数类型</span><span class="token keyword">function</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">{</span> one<span class="token punctuation">,</span> two <span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> one<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> two<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> one <span class="token operator">+</span> two<span class="token punctuation">}</span><span class="token keyword">let</span> res1 <span class="token operator">=</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">{</span> one<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> two<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> typesctipt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js四种数据类型判断</title>
      <link href="2021/11/16/js-si-chong-shu-ju-lei-xing-pan-duan/"/>
      <url>2021/11/16/js-si-chong-shu-ju-lei-xing-pan-duan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="js四种数据类型判断"><a href="#js四种数据类型判断" class="headerlink" title="js四种数据类型判断"></a>js四种数据类型判断</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 使用 constructor是不安全的，因为他的指向是可以改变的</span>  <span class="token comment" spellcheck="true">// undefined 和 null没有 constructor属性</span>  <span class="token keyword">let</span> bool <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment" spellcheck="true">// console.log('bool.constructor === Boolean', bool.constructor === Boolean); //true</span>    <span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">// console.log('number.constructor', nums.constructor === Number); // true</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'牛哼'</span>  <span class="token comment" spellcheck="true">// console.log('string.constructor', str.constructor === String);  // true</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'i love'</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// console.log('object.constructor', obj.constructor === Object); // true</span>    <span class="token comment" spellcheck="true">// let fn = () => {}</span>  <span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// console.log('function.constructor', fn.constructor === Function); // true</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// console.log('array.constructor',arr.constructor === Array); // true</span>  <span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> stuu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'niuheng'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'构造函数 Student.constructor'</span><span class="token punctuation">,</span> stuu<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Student<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>  <span class="token comment" spellcheck="true">// 2. typeof  判断 null 对象 数组 都是object ，不能静一步判断他们的类型</span>  <span class="token comment" spellcheck="true">// 3. instanceof 不能区分 null  和 undefined, 对于基本类型，如果不是用new声明的也测不出来</span>  <span class="token comment" spellcheck="true">// 对用使用了new声明的可以检测，而且还可以测出多种嵌套关系</span>  <span class="token comment" spellcheck="true">// 4. Object.prototype.toString.call 相对全能， 但它不能检测非原生构造函数的构造函数名</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js四种数据类型判断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PromiseAll与PromiseRace</title>
      <link href="2021/11/15/promiseall-yu-promiserace/"/>
      <url>2021/11/15/promiseall-yu-promiserace/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="PromiseAll与PromiseRace"><a href="#PromiseAll与PromiseRace" class="headerlink" title="PromiseAll与PromiseRace"></a>PromiseAll与PromiseRace</h4><pre class=" language-js"><code class="language-js">            <span class="token comment" spellcheck="true">/*            * Promise.all            * 将多个Promise实例包装成一个Promise实例，成功失败的返回值是不同的；            &amp;            * 成功的时候返回的是一个结果数组；            &amp;            * 失败是返回最先被reject失败状态的值；            &amp;            * ** 值得注意的是：            * Promise.all获得成功的结果数组里面的 ***数据顺序与接收到的数组顺序是一致的，            &amp;            * 这里有一个好处： ** 前端开发中偶尔会遇到发送多个请求，并根据请求顺序获取和使用数据的场景，            &amp;            * 使用 Promise.all无疑能解决这个问题。            */</span>            Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'res'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">// Promise.race</span>            <span class="token comment" spellcheck="true">// 顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，</span>            <span class="token comment" spellcheck="true">// 就返回那个结果，不管结果本身是成功状态还是失败状态</span>            Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'res'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="其他-async-await"><a href="#其他-async-await" class="headerlink" title="其他   async  await"></a>其他   async  await</h4><pre class=" language-js"><code class="language-js">        <span class="token comment" spellcheck="true">// async  await 让异步的程序有个先后顺序</span>        <span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'one函数是  2s'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'two函数的是 3s'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'three函数的是 1s'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// async   await 必须配合使用，  意义为用同步的表现方式展现异步，一定程度上延缓了异步刷新时间</span>        <span class="token comment" spellcheck="true">// ps异步太快也不是好事</span>        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//按照顺序1，2，3，而不是最快的先行</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> v2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> v3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 调用函数</span>        <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> PromiseAll与PromiseRace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组map的深浅拷贝问题</title>
      <link href="2021/11/15/shu-zu-map-de-shen-qian-kao-bei-wen-ti/"/>
      <url>2021/11/15/shu-zu-map-de-shen-qian-kao-bei-wen-ti/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="数组map的深浅拷贝问题"><a href="#数组map的深浅拷贝问题" class="headerlink" title="数组map的深浅拷贝问题"></a>数组map的深浅拷贝问题</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 基本数据类型</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token keyword">let</span> res <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> item <span class="token operator">*</span> <span class="token number">2</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// res</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 修改后的res</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 原数组a并未受影响</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 引用数据类型</span>type CommonObj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">let</span> aaa<span class="token punctuation">:</span> CommonObj<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'牛哼'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span> <span class="token string">'男'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'大脚'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span> <span class="token string">'女'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'翠花'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span> <span class="token string">'女'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'神魔恋'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span> <span class="token string">'男'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">let</span> result <span class="token operator">=</span> aaa<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> CommonObj<span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> CommonObj <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'牛哼'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    item<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'牛恒'</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>age <span class="token operator">===</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    item<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">17</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>sex <span class="token operator">===</span> <span class="token string">'男'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    item<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'女'</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> item<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// console.log('result', result);</span><span class="token comment" spellcheck="true">// console.log('aaa', aaa);</span><span class="token comment" spellcheck="true">// 两厢打印一致</span>    <span class="token comment" spellcheck="true">//result [</span>    <span class="token comment" spellcheck="true">//  { name: '牛恒', age: 23, sex: '女' },</span>    <span class="token comment" spellcheck="true">//  { name: '大脚', age: 22, sex: '女' },</span>    <span class="token comment" spellcheck="true">//  { name: '翠花', age: 17, sex: '女' },</span>    <span class="token comment" spellcheck="true">//  { name: '神魔恋', age: 25, sex: '女' }</span>    <span class="token comment" spellcheck="true">//]</span>    <span class="token comment" spellcheck="true">//aaa [</span>    <span class="token comment" spellcheck="true">//  { name: '牛恒', age: 23, sex: '女' },</span>    <span class="token comment" spellcheck="true">//  { name: '大脚', age: 22, sex: '女' },</span>    <span class="token comment" spellcheck="true">//  { name: '翠花', age: 17, sex: '女' },</span>    <span class="token comment" spellcheck="true">//  { name: '神魔恋', age: 25, sex: '女' }</span>    <span class="token comment" spellcheck="true">//]</span><span class="token comment" spellcheck="true">// aaa[0].name = 'niubiheng'</span><span class="token comment" spellcheck="true">// console.log('arr', aaa);</span><span class="token comment" spellcheck="true">// console.log('改变', result);</span>  <span class="token comment" spellcheck="true">//  arr第零项改变，result也被改变</span>    <span class="token comment" spellcheck="true">// arr [</span>    <span class="token comment" spellcheck="true">//   { name: 'niubiheng', age: 23, sex: '女' },</span>    <span class="token comment" spellcheck="true">//   { name: '大脚', age: 22, sex: '女' },</span>    <span class="token comment" spellcheck="true">//   { name: '翠花', age: 17, sex: '女' },</span>    <span class="token comment" spellcheck="true">//   { name: '神魔恋', age: 25, sex: '女' }</span>    <span class="token comment" spellcheck="true">// ]</span>    <span class="token comment" spellcheck="true">// 改变 [</span>    <span class="token comment" spellcheck="true">//   { name: 'niubiheng', age: 23, sex: '女' },</span>    <span class="token comment" spellcheck="true">//   { name: '大脚', age: 22, sex: '女' },</span>    <span class="token comment" spellcheck="true">//   { name: '翠花', age: 17, sex: '女' },</span>    <span class="token comment" spellcheck="true">//   { name: '神魔恋', age: 25, sex: '女' }</span>    <span class="token comment" spellcheck="true">// ]</span><span class="token comment" spellcheck="true">// console.log(aaa[0] === result[0]);  // true</span></code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><pre class=" language-js"><code class="language-js">map和filter最大的区别就是Map可以把每一项元素拦截，再做一些操作，改变每一个item中的属性值。filter 也会把每个item过一遍，但它必须根据item的某些条件，决定是否保留这个item。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数组map的深浅拷贝问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使得ts-node打印不报错</title>
      <link href="2021/11/15/shi-de-ts-node-da-yin-bu-bao-cuo/"/>
      <url>2021/11/15/shi-de-ts-node-da-yin-bu-bao-cuo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="ts-node打印不报错"><a href="#ts-node打印不报错" class="headerlink" title="ts-node打印不报错"></a>ts-node打印不报错</h4><pre class=" language-jsx"><code class="language-jsx">问题： html文件使用ts<span class="token operator">-</span>node 命令执行ts文件，console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 报错 <span class="token punctuation">;</span>解决： npm install <span class="token operator">-</span>D tslib @types<span class="token operator">/</span>node</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ts-node打印不报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github下载慢解决</title>
      <link href="2021/11/12/github-xia-zai-man-jie-jue/"/>
      <url>2021/11/12/github-xia-zai-man-jie-jue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="github下载慢解决"><a href="#github下载慢解决" class="headerlink" title="github下载慢解决"></a>github下载慢解决</h4><pre class=" language-js"><code class="language-js">谷歌浏览器Github加速插件<span class="token punctuation">.</span>crx 下载百度网盘<span class="token punctuation">:</span>链接：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>pan<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>s<span class="token operator">/</span>15sS0nu3vLyKHtNrGbfftgA提取码：be5z<span class="token operator">*</span>或在 我的网盘，最高层级中找到 github下载加速工具安装插件 ： https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>jingyan<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>article<span class="token operator">/</span>7f766daf63f7bb0000e1d03f<span class="token punctuation">.</span>html资料来源： https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>qq_33406883<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">109284871</span></code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><pre class=" language-js"><code class="language-js"><span class="token operator">**</span><span class="token operator">*</span>放弃使用管理员powershell <span class="token punctuation">,</span> 使用Gitbash 执行 hexo命令， 速度比powershell快。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> github下载慢解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react性能优化</title>
      <link href="2021/11/12/react-xing-neng-you-hua/"/>
      <url>2021/11/12/react-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="react性能优化"><a href="#react性能优化" class="headerlink" title="react性能优化"></a>react性能优化</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// useMemo 和 useCallback</span><span class="token keyword">import</span> React <span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">,</span>useMemo <span class="token punctuation">,</span> useCallback<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> Children <span class="token keyword">from</span> <span class="token string">'./Children'</span><span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token string">'ccc'</span><span class="token keyword">const</span> Test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* * setValue每次点击增加，都会重新触发此函数导致重新计算 ，* 导致不必要的性能开销，使用useMemo缓存计算的结果，* 在函数计算所依赖的值发生变化时，重新计算*/</span>    <span class="token comment" spellcheck="true">// const getCount = () => {</span>   <span class="token comment" spellcheck="true">// console.log('是否重新执行')</span>   <span class="token comment" spellcheck="true">// return type === 'ccc' ? count * 100 : count * 200</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// 此时， 若count不发生变化即不会重新触发此函数，节省了性能</span><span class="token keyword">const</span> getCount <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'是否重新执行'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> type <span class="token operator">===</span> <span class="token string">'ccc'</span> <span class="token operator">?</span> count <span class="token operator">*</span> <span class="token number">100</span> <span class="token punctuation">:</span> count <span class="token operator">*</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> getMethod <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token function">count的就算结果：getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>好的呀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Children</span> <span class="token attr-name">getMethod</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>getMethod<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// pureComponent memo</span><span class="token comment" spellcheck="true">/* *  使用 pureComponent 或使用 React.memo 可以避免父组件的任何状态发生变化，就重渲子组件的问题。*  但如果传入的值发生了改变，子组件（即使使用了 pureComponent，React.memo）依然也会重渲。*  useCallback 要与 React.memo 配合使用，才能避免父组件状态更新 => 导致传入子组件的函数被重新创建，*  子组件重新渲染的问题 。*/</span><span class="token keyword">import</span> React <span class="token punctuation">,</span> <span class="token punctuation">{</span> pureComponent<span class="token punctuation">,</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token comment" spellcheck="true">// class Children extends PureComponent {</span><span class="token comment" spellcheck="true">//    constructor(props) {</span><span class="token comment" spellcheck="true">//        super(props);</span><span class="token comment" spellcheck="true">//        this.state = {  }</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">//    render() {</span><span class="token comment" spellcheck="true">//        console.log('render')</span><span class="token comment" spellcheck="true">//        return (</span><span class="token comment" spellcheck="true">//           &lt;div>&lt;/div></span><span class="token comment" spellcheck="true">//        )</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//}</span> <span class="token keyword">const</span> Children <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render222'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">memo</span><span class="token punctuation">(</span>Children<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简易计算器</title>
      <link href="2021/11/12/jian-yi-ji-suan-qi/"/>
      <url>2021/11/12/jian-yi-ji-suan-qi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="简易计算器"><a href="#简易计算器" class="headerlink" title="简易计算器"></a>简易计算器</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useCallback<span class="token punctuation">,</span> useReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Input<span class="token punctuation">,</span> Card <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cx <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">const</span> numList <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'one'</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'two'</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'three'</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> beHavior <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'add'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'+'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'delete'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'ride'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'*'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'except'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'/'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'result'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'='</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'reset'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'del'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> Algorithm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> getResult <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'='</span><span class="token punctuation">:</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> inpValue <span class="token operator">&amp;&amp;</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>inpValue<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> beHavior<span class="token punctuation">)</span> <span class="token punctuation">{</span>          arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>title<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> resultArr        <span class="token keyword">let</span> getCalculationResult <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            resultArr <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>            getCalculationResult <span class="token operator">=</span> <span class="token function">getResult</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> resultArr<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// break</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">setInpValue</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> value <span class="token operator">=</span> getCalculationResult        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'del'</span><span class="token punctuation">:</span>        <span class="token function">setInpValue</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> initData <span class="token operator">=</span> <span class="token punctuation">{</span>    content<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>inpValue<span class="token punctuation">,</span> setInpValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispath<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initData<span class="token punctuation">)</span>  <span class="token keyword">const</span> getNums <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setInpValue</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> newVal <span class="token operator">=</span> val <span class="token operator">+</span> value      <span class="token keyword">return</span> newVal    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Algorithm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Card</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Default</span> <span class="token attr-name">size</span> <span class="token attr-name">card"</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token number">300</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span>numList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> item          <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>              children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>ele<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'ele-span'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getNums</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>ele<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span> <span class="token punctuation">></span></span>          <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>inpValue<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token punctuation">{</span>          beHavior<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> title <span class="token punctuation">}</span> <span class="token operator">=</span> item            <span class="token keyword">return</span> <span class="token punctuation">(</span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'ele-span'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> beHavior<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">dispath</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> title <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token function">getNums</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>              <span class="token punctuation">}</span></span><span class="token attr-name">}</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Card</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Algorithm</code></pre><pre class=" language-less"><code class="language-less"><span class="token variable">@purple<span class="token punctuation">:</span></span><span class="token hexcode">#7735b4</span><span class="token punctuation">;</span><span class="token selector">.ele-span</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid rosybrown<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.beHavior</span><span class="token punctuation">{</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token variable">@purple</span><span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 简易计算器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async和await的返回值</title>
      <link href="2021/11/04/async-he-await-de-fan-hui-zhi/"/>
      <url>2021/11/04/async-he-await-de-fan-hui-zhi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="await的返回值"><a href="#await的返回值" class="headerlink" title="await的返回值"></a>await的返回值</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// async和await是在es7中的内容，不过现在主流浏览器都支持</span><span class="token comment" spellcheck="true">// async 加在函数前面，自动返回的是一个 Promise</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> cc <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Promise {&lt;fulfilled>: undefined}</span> </code></pre><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">nums</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">3</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// await 是一个操作符， await 后面接 expression ???待续...</span>  <span class="token comment" spellcheck="true">// 在函数里面，可以使用 await 调用前面的async定义的函数 ??? 待续...</span>  <span class="token comment" spellcheck="true">// 全局环境，直接await 就可以， “局部”函数 里面，函数前面要加 async关键字  。</span>  <span class="token comment" spellcheck="true">// 全局是指，全局不需要写async吗？？待定.....</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">nums</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 局部函数前面要加async</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">nums</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'local'</span><span class="token punctuation">,</span> <span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// local △Promise</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// async和await是用来处理异步操作的，把异步变为同步的一种方法</span><span class="token comment" spellcheck="true">// async声明一个function来表示这个异步函数，await用于等待函数中某个异步操作执行完成。</span><span class="token comment" spellcheck="true">// async返回的是一个promise对象，返回值可在promise中的then方法中的第一个回调函数中使用。</span><span class="token comment" spellcheck="true">// await只能用于async的内部，await用于在一个异步操作之前，表示要等待这个异步操作的返回值。</span><span class="token comment" spellcheck="true">// 如果await得到不是一个promise对象，那么就不会等待这个异步操作。</span><span class="token comment" spellcheck="true">// 如果是一个promise对象，await就会等待promise对象的resolve，得到传入resolve的参数，作为返回值。(参数：传入reslove状态 的值)</span></code></pre><p>委婉待续…</p>]]></content>
      
      
      
        <tags>
            
            <tag> await的返回值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactJsx</title>
      <link href="2021/11/04/reactjsx/"/>
      <url>2021/11/04/reactjsx/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h4><h5 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// cra 入口 index.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建并渲染React元素</span><span class="token keyword">const</span> title <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'你好呀 React'</span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* jsx写法 &amp; * 推荐使用jsx语法 &amp; * 写jsx就跟写html一样，更直观、友好 &amp; * jsx更能体现react声明式的特点(描述ui长什么样子) * */</span> <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>这是p标签<span class="token operator">&lt;</span>span<span class="token operator">></span>p里边的span<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="jsx注意事项"><a href="#jsx注意事项" class="headerlink" title="jsx注意事项"></a>jsx注意事项</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// jsx使用注意事项</span><span class="token comment" spellcheck="true">/** * React元素的属性名使用驼峰命名法 &amp; * 特殊属性名：class => className 、 for => htmlFor 、tabindex => tabIndex &amp; * 没有子节点的react元素可以用 /> 结束  单 &lt;span/> 也是可以的，但不要和html弄混了 &amp; * 推荐使用小括号()包裹jsx, 从而避免js中的自动插入分号陷进。 结构也更加清晰 * */</span><span class="token comment" spellcheck="true">/**  *  其他..... *  基于javascript个xml的扩展语法    他可以作为值使用    他并不是字符串    他也不是html 他可以配合js表达式一起使用， 他不可以和js的 语句一起使用(for,if 等…)    所有的标签名必须小写，必须闭合，哪怕是单标签    class写成className    style 接收的是一个对象{}，并不是字符串    最外层只能有一个容器，    差值表达式{}    代码注释 尽量使用快捷键 Ctrl + /    dangerouslySetInnerHTML={{__html:item}} 解析html标签，在input框中输入html标签可用    点击label标签激活文本框，不能直接使用for 使用htmlFor    参考资料： https://blog.csdn.net/weixin_46146313/article/details/107025994 */</span><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// 使用小括号里面也可以换行了</span>  <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"abc"</span><span class="token operator">></span>这是p标签<span class="token operator">&lt;</span>span<span class="token operator">></span>    p里边的span  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>span <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="jsx中使用javascript"><a href="#jsx中使用javascript" class="headerlink" title="jsx中使用javascript"></a>jsx中使用javascript</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// jsx中使用javascript表达式</span><span class="token comment" spellcheck="true">// jsx中使用javascript表达式的注意事项  </span><span class="token comment" spellcheck="true">/*  * * 单花括号中可以使用任意的JavaScript表达式 &amp; * JSX本身也是一个js表达式 &amp; * JSX中不能使用对象，但是在style属性中可以使用 &amp; * 不能在单花括号中直接使用 if/for 等语句 * */</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'牛恒'</span><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">'23'</span><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"abc"</span><span class="token operator">></span>这是p标签  <span class="token operator">&lt;</span>span<span class="token operator">></span>    p里边的span  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>span <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    名字叫：<span class="token punctuation">{</span>name<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    年龄是：<span class="token punctuation">{</span>age<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="jsx条件渲染"><a href="#jsx条件渲染" class="headerlink" title="jsx条件渲染"></a>jsx条件渲染</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> isLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true">// jsx条件渲染  场景 loading效果</span><span class="token comment" spellcheck="true">// if else</span><span class="token comment" spellcheck="true">// const renderIf = () => {</span><span class="token comment" spellcheck="true">//   if (isLoading) {</span><span class="token comment" spellcheck="true">//     return (</span><span class="token comment" spellcheck="true">//       &lt;div>loading...&lt;/div></span><span class="token comment" spellcheck="true">//     )</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">//   return (</span><span class="token comment" spellcheck="true">//     &lt;div>数据加载完成显示&lt;/div></span><span class="token comment" spellcheck="true">//   )</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// 三木运算符</span><span class="token comment" spellcheck="true">// const renderIf = () => {</span><span class="token comment" spellcheck="true">//   return (</span><span class="token comment" spellcheck="true">//     isLoading</span><span class="token comment" spellcheck="true">//       ? &lt;div>loading...&lt;/div></span><span class="token comment" spellcheck="true">//       : &lt;div>数据加载完成显示&lt;/div></span><span class="token comment" spellcheck="true">//   )</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// 条件与</span><span class="token keyword">const</span> renderIf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    isLoading    <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"if"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>条件渲染<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token function">renderIf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="jsx列表渲染"><a href="#jsx列表渲染" class="headerlink" title="jsx列表渲染"></a>jsx列表渲染</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> songs <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'南山南'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'King'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'mc'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 列表渲染</span><span class="token comment" spellcheck="true">/** * 如果要渲染一组数据，应该使用数组的map方法 &amp; * 注意： 渲染列表时应该添加key属性，key属性的值要保证唯一 &amp; * 原则： map遍历谁，就给谁添加key属性 &amp; * 注意:  尽量避免使用索引号作为key *  */</span><span class="token keyword">const</span> renderMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token punctuation">{</span>songs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"if"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>列表渲染<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token function">renderMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="jsx样式处理"><a href="#jsx样式处理" class="headerlink" title="jsx样式处理"></a>jsx样式处理</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * * jsx样式处理 &amp; * 第一种  style = {{color: red , background :skyblue}}  style 中的是一个对象 &amp; * 第二种  使用className 起类名  引入外部样式 *  */</span></code></pre><h5 id="jsx总结"><a href="#jsx总结" class="headerlink" title="jsx总结"></a>jsx总结</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * * jsx 总结 * 1.jsx是React 的核心内容 &amp; * 2.jsx表示在js代码中写html结构，是React声明式的体现 &amp; * 3.使用jsx配合嵌入的表达式 、条件渲染、 列表渲染，可以描述任意ui结构 &amp; * 4.推荐使用className的方式给jsx添加样式 &amp; * 5.React完全利用js语言自身的能力来编写ui，而不是造轮子增强html功能（例如v-if、 vi-show）。 * */</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> jsx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react基本使用</title>
      <link href="2021/11/02/react-ji-ben-shi-yong/"/>
      <url>2021/11/02/react-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="react基本使用"><a href="#react基本使用" class="headerlink" title="react基本使用"></a>react基本使用</h4><pre class=" language-html"><code class="language-html">// 新建文件夹 使用npm init// cnpm i react react-dom<span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>      // 引入react react-dom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./node_modules/react/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./node_modules/react-dom/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">/**   * 创建react元素   * 参数1 元素名称   * 参数2 元素属性   * 参数3 元素的子节点  */</span>  <span class="token keyword">const</span> title <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'你好 react'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/**   * 渲染dom元素   * 参数1 要渲染的react元素   * 参数2 挂载点  */</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// open in browser 到浏览器即可看到 你好 react</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./node_modules/react/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./node_modules/react-dom/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">/**   * 创建react元素   * 参数1 元素名称   * 参数2 元素属性   * 第三个及以后的参数：元素的子节点， 可写多个  */</span>  <span class="token keyword">const</span> title <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'p标签'</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token string">'p1'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'我是span'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'div'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/**   * 渲染dom元素   * 参数1 要渲染的react元素   * 参数2 挂载点  */</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 这里无法直接使用jsx，脚手架可以直接使用</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react基本使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react无状态组件和纯组件</title>
      <link href="2021/11/02/react-wu-zhuang-tai-zu-jian-he-chun-zu-jian/"/>
      <url>2021/11/02/react-wu-zhuang-tai-zu-jian-he-chun-zu-jian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="react无状态组件和纯组件"><a href="#react无状态组件和纯组件" class="headerlink" title="react无状态组件和纯组件"></a>react无状态组件和纯组件</h4><h5 id="无状态组件和有状态组件"><a href="#无状态组件和有状态组件" class="headerlink" title="无状态组件和有状态组件"></a>无状态组件和有状态组件</h5><pre class=" language-tex"><code class="language-tex">函数组件又叫  ***无状态组件， 类组件又叫有状态组件 状态 (state) 即数据函数组件没有自己的状态，只负责数据展示 (静)类组件又自己的状态，负责更新UI, 让页面 “动” 起来other: 数据发生了变化，就是状态发生了变化，UI也要相应的更新，就要使用有状态组件来完成。--------------------------------------------------------------------------------1 无状态组件无状态组件可以通过减少继承Component而来的生命周期函数而达到性能优化的效果。从本质上来说，无状态组件就是一个单纯的render函数，所以无状态组件的缺点也是显而易见的。因为它没有shouldComponentUpdate生命周期函数，所以每次state更新，它都会重新绘制render函数。原则上，只要一个组件只具有render函数时，都可以封装成无状态组件参考资料： https://blog.csdn.net/r122555/article/details/82783944</code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 视图中的无状态组件</span><span class="token keyword">const</span> Layout <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>headerWidth<span class="token punctuation">,</span> setHeaderWidth<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>    match<span class="token punctuation">,</span>    allData<span class="token punctuation">,</span>    location  <span class="token punctuation">}</span> <span class="token operator">=</span> props       <span class="token comment" spellcheck="true">//  ....</span>  <span class="token keyword">const</span> renderSec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token punctuation">(</span>secondChildren <span class="token operator">&amp;&amp;</span> pathname <span class="token operator">!==</span> <span class="token string">'/layout'</span><span class="token punctuation">)</span>        <span class="token operator">?</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div style<span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> textAlign<span class="token punctuation">:</span> <span class="token string">'center'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Spin</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>large<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token operator">></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'rigth-content'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'content-border'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RouterView</span> <span class="token attr-name">routes</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>secondChildren<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>        <span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'love'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>I love Mountain wind <span class="token punctuation">,</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>          Summer rain <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>          And your smile <span class="token punctuation">.</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ....</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'layout'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'layouTop'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'lay-top-left'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> headerWidth <span class="token operator">?</span> <span class="token number">80</span> <span class="token punctuation">:</span> <span class="token number">226</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>xiaoU<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'lay-top-right'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'breade-left'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'user-info'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'layouBottom'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span><span class="token function">renderNav</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token function">renderSec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="纯组件-PureComponernt"><a href="#纯组件-PureComponernt" class="headerlink" title="纯组件 PureComponernt"></a>纯组件 PureComponernt</h5><pre class=" language-jsx"><code class="language-jsx">自动的帮我们编写shouldComponentUpdate方法<span class="token punctuation">,</span> 避免我们为每个组件都编写一次的麻烦</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react无状态组件和纯组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数组件使用useRef</title>
      <link href="2021/11/01/han-shu-zu-jian-shi-yong-useref/"/>
      <url>2021/11/01/han-shu-zu-jian-shi-yong-useref/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><h4 id="函数组件使用useRef"><a href="#函数组件使用useRef" class="headerlink" title="函数组件使用useRef"></a>函数组件使用useRef</h4><pre class=" language-js"><code class="language-js">useRef一般用于子组件为<span class="token keyword">class</span>的组件，因为函数组件没有实例，因此加给函数组件是无效的，这时我们就需要借助其他一些方法。</code></pre><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 子组件</span><span class="token comment" spellcheck="true">// 引入 forwardRef, useImperativeHandle</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> forwardRef<span class="token punctuation">,</span> useImperativeHandle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> PopUp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">// react规定，必须使用useImperativeHandle方法，来保存并抛出想要传递给父组件的方法或者数据，</span>  <span class="token comment" spellcheck="true">// 第一个参数是ref,第二个参数是函数，返回想要抛出的对象集合</span>  <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    modalData<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token operator">...</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//必须通过forwardRef方法抛出函数组件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>Popup<span class="token punctuation">)</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  useRef<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">const</span> Menu <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token operator">...</span>    <span class="token keyword">const</span> Modalref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> openModal <span class="token operator">=</span> <span class="token punctuation">(</span>record<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'record, type'</span><span class="token punctuation">,</span> record<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若传递了数据，就是点击修改，其他情况为新增</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'edit'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 父组件事件函数中调起子组件的方法，将数据传递给子组件</span>          Modalref<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">modalData</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> type<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'add'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          Modalref<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">modalData</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">setShow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token operator">...</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Popup</span>            <span class="token attr-name">show</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>show<span class="token punctuation">}</span></span>            <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Modalref<span class="token punctuation">}</span></span>            <span class="token attr-name">treeTitle</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>treeList<span class="token punctuation">}</span></span>            <span class="token attr-name">closeModal</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>closeModal<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 函数组件使用useRef </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为数组所有对象添加一个新属性</title>
      <link href="2021/11/01/wei-shu-zu-suo-you-dui-xiang-tian-jia-yi-ge-xin-shu-xing/"/>
      <url>2021/11/01/wei-shu-zu-suo-you-dui-xiang-tian-jia-yi-ge-xin-shu-xing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><h4 id="为数组所有对象添加一个新属性"><a href="#为数组所有对象添加一个新属性" class="headerlink" title="为数组所有对象添加一个新属性"></a>为数组所有对象添加一个新属性</h4></li></ol><pre class=" language-js"><code class="language-js">     <span class="token keyword">let</span> addKey <span class="token operator">=</span> copyList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>       obj<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span>id       <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>item<span class="token punctuation">,</span> <span class="token operator">...</span>obj <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ol start="2"><li><h4 id="合并两个数组索引所对应的对象"><a href="#合并两个数组索引所对应的对象" class="headerlink" title="合并两个数组索引所对应的对象"></a>合并两个数组索引所对应的对象</h4><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> youSay<span class="token punctuation">:</span> <span class="token string">'你说'</span><span class="token punctuation">,</span> <span class="token string">'doGO'</span><span class="token punctuation">:</span> <span class="token string">'go'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> youSay<span class="token punctuation">:</span> <span class="token string">'你说'</span><span class="token punctuation">,</span> <span class="token string">'doGO'</span><span class="token punctuation">:</span> <span class="token string">'go'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> youSay<span class="token punctuation">:</span> <span class="token string">'你说'</span><span class="token punctuation">,</span> <span class="token string">'doGO'</span><span class="token punctuation">:</span> <span class="token string">'go'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> what<span class="token punctuation">:</span> <span class="token string">'是的呀'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> how<span class="token punctuation">:</span> <span class="token string">'什么呢'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> why<span class="token punctuation">:</span> <span class="token string">'好的呀'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span>      <span class="token keyword">let</span> letMerge <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>item<span class="token punctuation">,</span> <span class="token operator">...</span>str<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'letMerge'</span><span class="token punctuation">,</span> letMerge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// log value</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>youSay<span class="token punctuation">:</span> <span class="token string">'你说'</span><span class="token punctuation">,</span> doGO<span class="token punctuation">:</span> <span class="token string">'go'</span><span class="token punctuation">,</span> what<span class="token punctuation">:</span> <span class="token string">'是的呀'</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>youSay<span class="token punctuation">:</span> <span class="token string">'你说'</span><span class="token punctuation">,</span> doGO<span class="token punctuation">:</span> <span class="token string">'go'</span><span class="token punctuation">,</span> how<span class="token punctuation">:</span> <span class="token string">'什么呢'</span><span class="token punctuation">}</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>youSay<span class="token punctuation">:</span> <span class="token string">'你说'</span><span class="token punctuation">,</span> doGO<span class="token punctuation">:</span> <span class="token string">'go'</span><span class="token punctuation">,</span> why<span class="token punctuation">:</span> <span class="token string">'好的呀'</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 为数组所有对象添加一个新属性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高阶组件之高亮关键词</title>
      <link href="2021/11/01/gao-jie-zu-jian-zhi-gao-liang-guan-jian-ci/"/>
      <url>2021/11/01/gao-jie-zu-jian-zhi-gao-liang-guan-jian-ci/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>高阶组件之高亮关键词</li></ol><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// KeywordHoc 高阶函数 (组件)</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> inp <span class="token operator">=</span> <span class="token string">"红包 返现 首充 权益"</span><span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">"参与活动，即有可能获得红包。首充还有机会获得更多权益哦!来一个红包吗？更有机会返现哦！"</span><span class="token comment" spellcheck="true">// 关键词高阶组件</span><span class="token keyword">const</span> KeywordHoc <span class="token operator">=</span> <span class="token punctuation">(</span>ComponentView<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> DisplayName <span class="token operator">=</span> <span class="token punctuation">(</span>ComponentName<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> ComponentName<span class="token punctuation">.</span>displayName <span class="token operator">||</span> ComponentName<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">'component'</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> KeyRender<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sliceKey <span class="token operator">=</span> inp<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> sliceKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 正则方法为什么能与字符串方法配合使用？</span>      <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>sliceKey<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'regex'</span><span class="token punctuation">,</span> regex<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      content <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`&lt;span class="light"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sliceKey<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        KeyRender<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hoc</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">DisplayName</span><span class="token punctuation">(</span>ComponentView<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token keyword">let</span> innerContent <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">dangerouslySetInnerHTML</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> __html<span class="token punctuation">:</span> content <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">// 组件首字母必须大写</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentView</span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>innerContent<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> KeyRender<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> KeywordHoc</code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// KeywodView 作为参数的组件</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">interface</span> <span class="token class-name">KeywodViewProps</span> <span class="token punctuation">{</span>  content<span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">const</span> KeywodView<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeywodViewProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  content<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>KeywodView<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>content<span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 效果 红包 返现 首充 权益   全部红色高亮</span><span class="token keyword">export</span> <span class="token keyword">default</span> KeywodView</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 父级组件 引入高阶组件和参数组件并组合调用</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> KeywordHoc <span class="token keyword">from</span> <span class="token string">'package/component/KeywordHoc'</span><span class="token keyword">import</span> KeywodView <span class="token keyword">from</span> <span class="token string">'package/component/KeywodView'</span><span class="token keyword">const</span> Keyword <span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 调用高阶组件，似乎必须在高阶函数内部再定义一个组件，外层return 这个组件，并在这个组件内部，return被包装的组件？？</span>  <span class="token keyword">const</span> KeyTags <span class="token operator">=</span> <span class="token function">KeywordHoc</span><span class="token punctuation">(</span>KeywodView<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>keyword<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>KeyTags <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Keyword</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 高阶组件之高亮关键词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>forIN和forOf的区别</title>
      <link href="2021/10/31/forin-he-forof-de-qu-bie/"/>
      <url>2021/10/31/forin-he-forof-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="for-in和for-of的区别"><a href="#for-in和for-of的区别" class="headerlink" title="for in和for of的区别"></a>for in和for of的区别</h4><h5 id="循环对象"><a href="#循环对象" class="headerlink" title="循环对象"></a>循环对象</h5><pre class=" language-typescript"><code class="language-typescript"> <span class="token keyword">let</span> objKey <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'牛恒'</span><span class="token punctuation">,</span> age <span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">,</span> sex<span class="token punctuation">:</span><span class="token string">'男'</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// for in 专门用来循环对象 ，key是对象的键， obj[key]是对象的值</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">in</span> objKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'objKey ----- value'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// objKey ----- value name</span>    <span class="token comment" spellcheck="true">// index.tsx:30 objKey ----- value age</span>    <span class="token comment" spellcheck="true">// index.tsx:30 objKey ----- value sex</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ***for of 循环对象会报错</span>  <span class="token comment" spellcheck="true">// 只能循环数组或者字符串类型</span>  <span class="token comment" spellcheck="true">// react-dom.development.js:11340 Uncaught TypeError: objKey is not iterable</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value of objKey<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// error ； 类型“{ name: string; age: number; sex: string; }”不是数组类型或字符串类型。</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>   <span class="token punctuation">}</span>  </code></pre><h5 id="循环数组"><a href="#循环数组" class="headerlink" title="循环数组"></a>循环数组</h5><pre class=" language-typescript"><code class="language-typescript">    <span class="token keyword">let</span> sliceKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'红包'</span><span class="token punctuation">,</span> <span class="token string">'返现'</span><span class="token punctuation">,</span> <span class="token string">'首充'</span><span class="token punctuation">,</span> <span class="token string">'权益'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">/** for in 和 for of 都可循环数组    *  其中 for in 循环的是数组的键， 即下标    *  同对象键值对取值 obj[key]    */</span>     <span class="token comment" spellcheck="true">// for in 功能强大，可循环对象和数组，(即使取值也可obj[key]) ,完全可替代for of </span>    <span class="token comment" spellcheck="true">// for of 循环的是数组的值， 即键值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> sliceKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arrKey'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// index.tsx: 39 arrKey 0</span>      <span class="token comment" spellcheck="true">// index.tsx: 39 arrKey 1</span>      <span class="token comment" spellcheck="true">// index.tsx: 39 arrKey 2</span>      <span class="token comment" spellcheck="true">// index.tsx: 39 arrKey 3</span>     <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value of sliceKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ValueKey'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// index.tsx:47 ValueKey 红包</span>    <span class="token comment" spellcheck="true">// index.tsx:47 ValueKey 返现</span>    <span class="token comment" spellcheck="true">// index.tsx:47 ValueKey 首充</span>    <span class="token comment" spellcheck="true">// index.tsx:47 ValueKey 权益</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> for in和for of的区别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单算法</title>
      <link href="2021/10/28/jian-dan-suan-fa/"/>
      <url>2021/10/28/jian-dan-suan-fa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="简单算法"><a href="#简单算法" class="headerlink" title="简单算法"></a>简单算法</h4><h5 id="传入字符串，返回不重复字符串的最长长度"><a href="#传入字符串，返回不重复字符串的最长长度" class="headerlink" title="传入字符串，返回不重复字符串的最长长度"></a>传入字符串，返回不重复字符串的最长长度</h5><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">mostStringLen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> newStr <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>      newStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>newStr <span class="token operator">+</span><span class="token operator">=</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> newStr<span class="token punctuation">.</span>length    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">'当前没有长度'</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不重复最长长度'</span><span class="token punctuation">,</span> <span class="token function">mostStringLen</span><span class="token punctuation">(</span><span class="token string">'abaaa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><h5 id="传入下标，返回斐波那契数列下标对应的一项"><a href="#传入下标，返回斐波那契数列下标对应的一项" class="headerlink" title="传入下标，返回斐波那契数列下标对应的一项"></a>传入下标，返回斐波那契数列下标对应的一项</h5><pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">feibonace</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> index <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      z <span class="token operator">=</span> x <span class="token operator">+</span> y      x <span class="token operator">=</span> y      y <span class="token operator">=</span> z    <span class="token punctuation">}</span>    <span class="token keyword">return</span> z  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 下标是 9 , 长度就是10 ， 我们就要至少加 8次， 也就是下标再减一次 ，或下标的 &lt;= 2次</span>  <span class="token comment" spellcheck="true">// 0  1  2  3  4  5  6   7   8   9   10  11</span>  <span class="token comment" spellcheck="true">// 0  1  1  2  3  5  8  13  21  34  55  89</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'feibonace'</span><span class="token punctuation">,</span> <span class="token function">feibonace</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 34</span></code></pre><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'换位'</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 换位 (8) [1, 5, 7, 12, 33, 88, 89, 123]</span></code></pre><h5 id="传入数组和目标值，返回和为目标值的两项的下标"><a href="#传入数组和目标值，返回和为目标值的两项的下标" class="headerlink" title="传入数组和目标值，返回和为目标值的两项的下标"></a>传入数组和目标值，返回和为目标值的两项的下标</h5><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token number">13</span>  <span class="token comment" spellcheck="true">// 找出数组中和为目标值的整数</span>  <span class="token keyword">function</span> <span class="token function">findArrIndex</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>target <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>obj<span class="token punctuation">[</span>target <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>      <span class="token punctuation">}</span>      obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'findArrIndex(arr,13)'</span><span class="token punctuation">,</span> <span class="token function">findArrIndex</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h5><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 一段字符正着读和反着读都一样，就叫回文数</span>  <span class="token keyword">let</span> strNum <span class="token operator">=</span> <span class="token string">'abccba'</span> <span class="token comment" spellcheck="true">// 传入123321都可以</span>    <span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>strNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    num2 <span class="token operator">=</span> strNum<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strNum <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      num2 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>    <span class="token punctuation">}</span>          istrue <span class="token operator">=</span> strNum <span class="token operator">===</span> num2 <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token keyword">return</span> istrue  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">reverse</span><span class="token punctuation">(</span>strNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h5 id="数组去重reduce方法"><a href="#数组去重reduce方法" class="headerlink" title="数组去重reduce方法"></a>数组去重reduce方法</h5><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 数组去重</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    prev<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> prev<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>    <span class="token keyword">return</span> prev  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// reduce方法不会影响原数组</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// result (5) ['a', 'b', 'c', 'v', 'r']</span></code></pre><h5 id="字符串去重"><a href="#字符串去重" class="headerlink" title="字符串去重"></a>字符串去重</h5><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'ffweuhfiowefjopxkopscmaicnweiyfgygdidbasdjaonvwiebvuwigasndjasncjasbceuihuaed'</span>  <span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>str1 <span class="token operator">+</span><span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str1--->'</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// str1---> fweuhiojpxkscmanygdbv</span></code></pre><h5 id="reduce累加"><a href="#reduce累加" class="headerlink" title="reduce累加"></a>reduce累加</h5><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> numArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> addNum <span class="token operator">=</span> numArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span><span class="token operator">=</span> cur  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'addNum'</span><span class="token punctuation">,</span> addNum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 60</span></code></pre><h5 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h5><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 数组扁平化。  递归方式实现</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> bianping <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> resArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      resArr <span class="token operator">=</span> resArr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">bianping</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">:</span> item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resArr  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bianping(arr)'</span><span class="token punctuation">,</span> <span class="token function">bianping</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  [1, 2, 3, 4, 5, 6, 1, 2, 100, 200, 7, 8, 3, 6, 9, 10]</span></code></pre><h5 id="查找多级嵌套的数组"><a href="#查找多级嵌套的数组" class="headerlink" title="查找多级嵌套的数组"></a>查找多级嵌套的数组</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 递归方式</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      label<span class="token punctuation">:</span> <span class="token string">"上海"</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>          label<span class="token punctuation">:</span> <span class="token string">"北京"</span><span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>              id<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>              label<span class="token punctuation">:</span> <span class="token string">'深圳'</span><span class="token punctuation">,</span>              children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                  id<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>                  label<span class="token punctuation">:</span> <span class="token string">"苏州"</span>                <span class="token punctuation">}</span>              <span class="token punctuation">]</span>            <span class="token punctuation">}</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>          label<span class="token punctuation">:</span> <span class="token string">"西安"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      label<span class="token punctuation">:</span> <span class="token string">"杭州"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">/*    * 注意undefined的使用    * 为undefined 表示未赋值， 不为undefined表示已赋值    * 避免后面值的覆盖    */</span>   <span class="token keyword">const</span> serch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">,</span> title <span class="token punctuation">}</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> undefined    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> item      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">!==</span> id <span class="token operator">&amp;&amp;</span> result <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> <span class="token punctuation">{</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> item          result <span class="token operator">=</span> <span class="token function">serch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">,</span> title <span class="token punctuation">}</span><span class="token punctuation">,</span> children<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          result <span class="token operator">=</span> <span class="token string">'have no'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'serch'</span><span class="token punctuation">,</span> <span class="token function">serch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">'北京'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {id: 4, label: '北京', children: Array(1)}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 简单算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd优化加载组件</title>
      <link href="2021/10/25/antd-you-hua-jia-zai-zu-jian/"/>
      <url>2021/10/25/antd-you-hua-jia-zai-zu-jian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="antd优化加载组件"><a href="#antd优化加载组件" class="headerlink" title="antd优化加载组件"></a>antd优化加载组件</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/** 问题 react使用路由、二级路由切换时页面会闪烁  *  而使用这个组件，就可以解决这个问题*/</span>   <span class="token keyword">const</span> renderSec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      secondChildren        <span class="token operator">?</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div style<span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> textAlign<span class="token punctuation">:</span> <span class="token string">'center'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Spin</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>large<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token operator">></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RouterView</span> <span class="token attr-name">routes</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>secondChildren<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>        <span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Empty</span> <span class="token attr-name">image</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Empty<span class="token punctuation">.</span>PRESENTED_IMAGE_SIMPLE<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> antd优化加载组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reactTypescript配置代理服务器</title>
      <link href="2021/10/24/reacttypescript-pei-zhi-dai-li-fu-wu-qi/"/>
      <url>2021/10/24/reacttypescript-pei-zhi-dai-li-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="react-Typescript-配置代理服务器"><a href="#react-Typescript-配置代理服务器" class="headerlink" title="react + Typescript 配置代理服务器"></a>react + Typescript 配置代理服务器</h4><h5 id="package-json-后面添加"><a href="#package-json-后面添加" class="headerlink" title="package.json 后面添加"></a>package.json 后面添加</h5><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    ..    ...  <span class="token property">"proxy"</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">}</span></code></pre><p>另一说 src下新增 setupProxy.js</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 但似乎 package.json 配置后就已经可行 了</span><span class="token comment" spellcheck="true">// 但另一说此二者需要配合使用 ?? </span><span class="token comment" spellcheck="true">// 但又似乎加入此文件，项目就会出问题？？ </span><span class="token comment" spellcheck="true">// 目前放于最外层</span><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// @ts-ignore</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">'http://localhost:3000'</span><span class="token punctuation">,</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        secure<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h5><p><a href="https://create-react-app.dev/docs/proxying-api-requests-in-development/#configuring-the-proxy-manually">https://create-react-app.dev/docs/proxying-api-requests-in-development/#configuring-the-proxy-manually</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> reactTypescript配置代理服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript取下级值</title>
      <link href="2021/10/24/typescript-qu-xia-ji-zhi/"/>
      <url>2021/10/24/typescript-qu-xia-ji-zhi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="typescript取下级值"><a href="#typescript取下级值" class="headerlink" title="typescript取下级值"></a>typescript取下级值</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// type1 返回函数返回值的下级</span><span class="token comment" spellcheck="true">// 定义接口类型</span><span class="token keyword">interface</span> <span class="token class-name">resType</span> <span class="token punctuation">{</span>   data<span class="token operator">?</span><span class="token punctuation">:</span> Object<span class="token punctuation">}</span>  <span class="token keyword">export</span> <span class="token keyword">const</span> baseApi <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> method <span class="token operator">=</span> <span class="token string">'get'</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>      url<span class="token punctuation">:</span> path<span class="token punctuation">,</span>      method<span class="token punctuation">,</span>      timeout<span class="token punctuation">:</span> <span class="token number">120000</span><span class="token punctuation">,</span>      params<span class="token punctuation">,</span>      headers    <span class="token punctuation">}</span>    <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">(</span>option as optionsType<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      options<span class="token punctuation">.</span>params <span class="token operator">=</span> params    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'put'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      options<span class="token punctuation">.</span>data <span class="token operator">=</span> params    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span>headers<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span>headers<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span>    <span class="token punctuation">}</span>    <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span>options<span class="token punctuation">)</span><span class="token punctuation">.</span>headers <span class="token operator">=</span> headers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>          <span class="token function">axios</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">:</span> resType<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若不定义接口类型（注释data），此处 会报 ：类型“resType”上不存在属性“data”。</span>        <span class="token comment" spellcheck="true">// 导致程序运行不下去</span>        <span class="token function">reslove</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> promise<span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// type 2 取得变量的值</span><span class="token keyword">interface</span> <span class="token class-name">resLogin</span> <span class="token punctuation">{</span>  code<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  data<span class="token operator">?</span><span class="token punctuation">:</span> object<span class="token punctuation">}</span>   <span class="token keyword">const</span> Login<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>username<span class="token punctuation">,</span> setUsername<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>password<span class="token punctuation">,</span> setPassword<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> history <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> onFinish <span class="token operator">=</span> async <span class="token punctuation">(</span>values<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Success:'</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> values    <span class="token keyword">let</span> result <span class="token operator">=</span> await <span class="token function">userLogin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> as resLogin        <span class="token comment" spellcheck="true">// 若不定义 resLogin 接口 ，此处会报错</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/layout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     </code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// type 3 定义将要赋值的对象</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">interface</span> <span class="token class-name">resType</span> <span class="token punctuation">{</span>  data<span class="token operator">?</span><span class="token punctuation">:</span> Object<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">optionsType</span> <span class="token punctuation">{</span>  url<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  method<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span>  timeout<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  params<span class="token punctuation">:</span> object<span class="token punctuation">,</span>  data<span class="token operator">?</span><span class="token punctuation">:</span> object<span class="token punctuation">,</span>  headers<span class="token operator">?</span><span class="token punctuation">:</span> object<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> baseApi <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> method <span class="token operator">=</span> <span class="token string">'get'</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>      url<span class="token punctuation">:</span> path<span class="token punctuation">,</span>      method<span class="token punctuation">,</span>      timeout<span class="token punctuation">:</span> <span class="token number">120000</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 类型断言</span>    <span class="token keyword">let</span> options <span class="token operator">=</span> option as optionsType    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      options<span class="token punctuation">.</span>params <span class="token operator">=</span> params    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'put'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      options<span class="token punctuation">.</span>data <span class="token operator">=</span> params    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 函数参数传入， 尚且不知如何定义类型 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span>headers<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span>headers<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span>    <span class="token punctuation">}</span>    options<span class="token punctuation">.</span>headers <span class="token operator">=</span> headers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">axios</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">:</span> resType<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">reslove</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> promise<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 补充： promise 存放的将来发生的事情， 在调用此封装函数时 ， </span><span class="token comment" spellcheck="true">// 可使用 async  await 获得promise 成功 (reslove) 失败 (reject) 状态的值 。</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> typescript取下级值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react函数组件路由跳转</title>
      <link href="2021/10/24/react-han-shu-zu-jian-lu-you-tiao-zhuan/"/>
      <url>2021/10/24/react-han-shu-zu-jian-lu-you-tiao-zhuan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="react函数组件路由跳转"><a href="#react函数组件路由跳转" class="headerlink" title="react函数组件路由跳转"></a>react函数组件路由跳转</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> cx <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">interface</span> <span class="token class-name">resLogin</span> <span class="token punctuation">{</span>  code<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">,</span>  data<span class="token operator">?</span><span class="token punctuation">:</span> object<span class="token punctuation">}</span><span class="token keyword">const</span> Login<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> history <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> onFinish <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>values<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> values    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">userLogin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> resLogin        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/layout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'loginCard'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token punctuation">{</span> <span class="token operator">...</span>  <span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Login</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react函数组件路由跳转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转化时间日期格式</title>
      <link href="2021/10/22/zhuan-hua-shi-jian-ri-qi-ge-shi/"/>
      <url>2021/10/22/zhuan-hua-shi-jian-ri-qi-ge-shi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="转化时间日期格式"><a href="#转化时间日期格式" class="headerlink" title="转化时间日期格式"></a>转化时间日期格式</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 转化时间日期格式 * 传入 new Date() * 返回值：2021-09-10 10:00:00 * */</span><span class="token keyword">export</span> <span class="token keyword">const</span> dateFamate <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> Y <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> M <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    M <span class="token operator">=</span> M <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> M <span class="token punctuation">:</span> M<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 不够两位补充0</span>    <span class="token keyword">let</span> D <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    D <span class="token operator">=</span> D <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> D <span class="token punctuation">:</span> D<span class="token punctuation">;</span>    <span class="token keyword">let</span> H <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    H <span class="token operator">=</span> H <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> H <span class="token punctuation">:</span> H<span class="token punctuation">;</span>    <span class="token keyword">let</span> Mi <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mi <span class="token operator">=</span> Mi <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> Mi <span class="token punctuation">:</span> Mi<span class="token punctuation">;</span>    <span class="token keyword">let</span> S <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    S <span class="token operator">=</span> S <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> S <span class="token punctuation">:</span> S<span class="token punctuation">;</span>    <span class="token keyword">return</span> Y <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> M <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> D <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> H <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> Mi <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> S<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 转化时间日期格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue路由传参</title>
      <link href="2021/10/22/vue-lu-you-chuan-can/"/>
      <url>2021/10/22/vue-lu-you-chuan-can/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Vue路由传参"><a href="#Vue路由传参" class="headerlink" title="Vue路由传参"></a>Vue路由传参</h4><ol><li><p>查询字符串</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`path:/menu/edit/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 路由配置</span> <span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/menu/edit/:id'</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> Edit <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子组件使用获取使用的参数值</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id</code></pre></li><li><p>query</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/menu/edit'</span><span class="token punctuation">,</span>    query<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> id    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/menu/edit'</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> Edit <span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id</code></pre><ol start="3"><li>params</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'/menu/edit'</span><span class="token punctuation">,</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> id    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 注 ： params传参，必须加name。</span> <span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/menu/edit'</span><span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">'/menu/edit'</span>  component<span class="token punctuation">:</span> Edit <span class="token punctuation">}</span></code></pre><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><pre class=" language-js"><code class="language-js">查询字符串 与 query传参页面数据不会消失， 而params传参数据会消失。这是因为， 查询字符串 与 query传参 在传参时将参数携带过去了，而params的参数保存在缓存，因此页面刷新数据会消失。</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue路由传参 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js的event中间件</title>
      <link href="2021/10/17/node-js-de-event-zhong-jian-jian/"/>
      <url>2021/10/17/node-js-de-event-zhong-jian-jian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-node-js的event中间件"><a href="#1-node-js的event中间件" class="headerlink" title="1.node.js的event中间件"></a>1.node.js的event中间件</h4><h5 id="event-js"><a href="#event-js" class="headerlink" title="event.js"></a>event.js</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> eventEmitter <span class="token operator">=</span> events<span class="token punctuation">.</span>EventEmitter<span class="token punctuation">;</span><span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">eventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用event 的on方法绑定事件，内置两个参数，第一个参数是事件名，第二个参数 是回调函数，是事件的执行体</span>event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'I_LOVE_YOU'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'终于等到你'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 触发事件使用emit 内置参数若干</span><span class="token comment" spellcheck="true">// 第一个参数是事件的名字，第二个参数开始依次是事件的参数</span>event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'I_LOVE_YOU'</span><span class="token punctuation">,</span><span class="token string">'Mary'</span><span class="token punctuation">)</span>event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'I_LOVE_YOU'</span><span class="token punctuation">,</span><span class="token string">'Anny'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> node.js的event中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生node登录注册</title>
      <link href="2021/10/17/yuan-sheng-node-deng-lu-zhu-ce/"/>
      <url>2021/10/17/yuan-sheng-node-deng-lu-zhu-ce/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-node登录注册"><a href="#1-node登录注册" class="headerlink" title="1.node登录注册"></a>1.node登录注册</h4><h5 id="from-js"><a href="#from-js" class="headerlink" title="from.js"></a>from.js</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> query <span class="token punctuation">}</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">' pathname, query'</span><span class="token punctuation">,</span> pathname<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">'/register'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'Content-type'</span><span class="token punctuation">:</span> <span class="token string">'text/html;charset=utf-8'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> newUserData <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newUserData'</span><span class="token punctuation">,</span> newUserData<span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/form.json'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你不要出来'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> newDataList <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">let</span> hasRegister <span class="token operator">=</span> newDataList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span> ele<span class="token punctuation">.</span>username <span class="token operator">===</span> newUserData<span class="token punctuation">.</span>username<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasRegister<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("用户名已存在,请登录");location.href="http://127.0.0.1:3000/dl"&lt;/script>'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          newUserData<span class="token punctuation">.</span>id <span class="token operator">=</span> newDataList<span class="token punctuation">[</span>newDataList<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token number">1</span>          newDataList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newUserData<span class="token punctuation">)</span>          fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./data/form.json'</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>newDataList<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> encoding<span class="token punctuation">:</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> flag<span class="token punctuation">:</span> <span class="token string">'w'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            err              <span class="token operator">?</span> response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("注册失败");location.href="http://127.0.0.1:3000/zc"&lt;/script>'</span><span class="token punctuation">)</span>              <span class="token punctuation">:</span> response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("注册成功,请登录");location.href="http://127.0.0.1:3000/dl"&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'Content-type'</span><span class="token punctuation">:</span> <span class="token string">'text/html;charset=utf-8'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> usetData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      usetData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>usetData<span class="token punctuation">)</span>      <span class="token keyword">const</span> qsData <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/form.json'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> jsonData <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> jsonData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span> ele<span class="token punctuation">.</span>username <span class="token operator">===</span> qsData<span class="token punctuation">.</span>username<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>password <span class="token operator">===</span> qsData<span class="token punctuation">.</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("登录成功");location.href="http://127.0.0.1:3000/index"&lt;/script>'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("密码错误");location.href="http://127.0.0.1:3000/dl"&lt;/script>'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;script>alert("用户名不存在,请先去注册！");location.href="http://127.0.0.1:3000/zc"&lt;/script>'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">'/zc'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./from/register.html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">'/dl'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./from/login.html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">'/index'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./from/index.html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'3000'</span><span class="token punctuation">,</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'serve is running'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="404-html"><a href="#404-html" class="headerlink" title="404.html"></a>404.html</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">*</span><span class="token punctuation">{</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">h1</span><span class="token punctuation">{</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#cccccc</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>哎呀亲  页面找不到了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">* </span><span class="token punctuation">{</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">div </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">p </span><span class="token punctuation">{</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">12</span>px <span class="token number">15</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>卡尔 · 弗兰兹<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    据说卡尔·弗兰兹是旧世界最伟大的政治家。同时他还是一位军事天才和英勇的将领。这位皇帝常独自带兵，挥舞着那把传说中西格玛留下的盖尔玛拉兹战锤，就如同旧世界的勇士之神一般重击着帝国的每个敌人。    卡尔·弗兰兹是上一任帝国皇帝路易伯德之子。在他父亲死后他顺理成章的成为了帝国皇帝候选人之一。然而在帝国皇位并不是世袭继承的，而是要通过帝国选帝议会的选举决定。    虽然确切的细节和准确的原因都已无人知晓，但是看上去卡尔·弗兰兹被认为太过于年轻且缺乏经验。他自己也并不相信自己能胜过另一位候选人，米登兰伯爵鲍里斯·托德布林格。最初的结果是鲍里斯8票，卡尔·弗兰兹仅获4票，剩下3名选帝侯弃权。然而卡尔·弗兰兹家族的老友，奥斯特兰伯爵马克西米连·冯·科宁格斯瓦德，成功的说服了其中2位转向投票给卡尔·弗兰兹。西格玛议会的3张选票也全部投给了卡尔·弗兰兹。最终卡尔·弗兰兹赢得了选举。    作为皇帝，卡尔同时也是帝国军队的领袖，指挥过一系列的战斗（其中最著名的是对阵巴托尼亚人的诺度因之战，对阵血堡吸血鬼的血堡之战和最近的混沌风暴）。在战斗中卡尔经常携带西格玛之锤和银色圣徽。他经常骑在自己忠实的狮鹫死爪上面。有时候卡尔·弗兰兹还会以瑞克领亲王的身份挥舞瑞克领符文剑进入战场。    卡尔·弗兰兹已婚并有2子女：他的大儿子路易伯德，显然是以卡尔·弗兰兹自己的父亲名字命名，而小女儿的名字未知。卡尔·弗兰兹还有个姐妹，也已婚配。    卡尔·弗兰兹有一系列的正式头衔，比如帝国的保护者，黑暗的对抗者，皇帝本尊和诸皇帝之子，瑞克领选帝侯和阿尔道夫亲王。    ==================================================================================================    诺度因之战是人类帝国和巴托尼亚之间的一场冲突。战斗爆发的确切时间已经无可考证，只能推算大概是在2502年之后的某个时间，因为这是帝国皇帝卡尔·弗兰兹带领帝国军队打的战斗。在战斗中卡尔·弗兰兹带领瑞克近卫骑士团以一次完美的冲锋彻底击垮了巴托尼亚骑士们。    ==================================================================================================    帝国继承法并不是世袭继承，新皇帝是选举产生而并非是直接从父亲手里继承。    在皇帝死后帝国议会聚集开会，选帝侯——整个帝国最有影响力，最强大，最重要的人——将在那时选出新皇帝。    选帝侯事实上也可以废黜一名虚君（虽然造成的后果多半是三皇之战这种结果）。    最初帝国有12位选帝侯，由各行省的统治者世袭继承。今日则有15位选举人，其中仅有10位是选帝侯。2个行省和他们的受尊敬的统治家族一起都已完蛋了。    尤里克教会主教渐渐的也成为了一名选举人，而最成功的例子是西格玛教会，除了西格玛教会的总主教本人外，还有另外2位西格玛大主教也成为了选举人，因此西格玛教会一共有3票。    这一发展加深了2个教会之间因为不同的政治追求而产生的天然对立，这一对立也成为了如今大部分皇帝选举中的重要因素。    在通常情况下西格玛教会的3票总是会投给住在阿尔道夫的瑞克领伯爵，因为阿尔道夫也是西格玛教会的中心。    而尤里克主教则总是会投票给米登兰伯爵，因为米登兰伯爵都是虔诚的尤里克信徒，同时也住在作为尤里克教会老家的米登海姆。    在帝国历1010年皇帝胖子卢德维格将一张选举票奖励给了穆特长者，他代表的是穆特半身人自治领的半身人们。    目前的10位选帝侯：阿瓦兰选帝伯爵，霍克兰选帝伯爵，米登兰选帝伯爵，诺德兰选帝伯爵，奥斯特兰选帝伯爵，奥斯特马克选帝伯爵，瑞克领选帝伯爵，斯特兰选帝伯爵，塔拉贝克领选帝伯爵，维森兰选帝伯爵。    5位新晋选帝侯：尤里克主教，西格玛总主教，2位西格玛大主教，穆特长者。    失去地位的选帝侯：    索尔兰选帝伯爵：在选帝伯爵家被兽人军阀入侵杀光后行省被维森兰吞并。    德拉克瓦尔德选帝伯爵：这个行省被米登兰和诺德兰瓜分。    玛丽恩堡选帝伯爵：这个行省现在变成了独立的威斯特兰亲王国。  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">* </span><span class="token punctuation">{</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#cccccc</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">30</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">30</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> div </span><span class="token punctuation">{</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> div input </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">22</span>px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">11</span>px<span class="token punctuation">;</span>            <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> div <span class="token id">#sub</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">380</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">78</span>, <span class="token number">123</span>, <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://127.0.0.1:3000/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名 ： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密 <span class="token entity" title="&nbsp;">&amp;nbsp;</span> 码 ： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="register-html"><a href="#register-html" class="headerlink" title="register.html"></a>register.html</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">* </span><span class="token punctuation">{</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#cccccc</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">30</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">30</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> div </span><span class="token punctuation">{</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> div input </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">22</span>px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">11</span>px<span class="token punctuation">;</span>            <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#app</span> div <span class="token id">#sub</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">380</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://127.0.0.1:3000/register<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名 ： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密 <span class="token entity" title="&nbsp;">&amp;nbsp;</span> 码 ： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><pre class=" language-tex"><code class="language-tex">1. nodemon 启动2. 在浏览器输入localhost:3000/zc</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> node登录注册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用node的http创建服务器读取网站</title>
      <link href="2021/10/17/shi-yong-node-de-http-chuang-jian-fu-wu-qi-du-qu-wang-zhan/"/>
      <url>2021/10/17/shi-yong-node-de-http-chuang-jian-fu-wu-qi-du-qu-wang-zhan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><h4 id="使用node的http创建服务器读取网站"><a href="#使用node的http创建服务器读取网站" class="headerlink" title="使用node的http创建服务器读取网站"></a>使用node的http创建服务器读取网站</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token keyword">const</span> getMime <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'.html'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token string">'text/html'</span>   <span class="token comment" spellcheck="true">// html</span>    <span class="token keyword">case</span> <span class="token string">'.css'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token string">'text/css'</span>   <span class="token comment" spellcheck="true">// 样式文件</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token string">'text/plain'</span> <span class="token comment" spellcheck="true">// 图片文本</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 读取整个网站</span><span class="token comment" spellcheck="true">// 使用 热更新 nodemon， 必须 npm init 初始化http文件夹，生成package.json ，将main指向当前正在运行的文件</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> requestUrl <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname  <span class="token keyword">if</span> <span class="token punctuation">(</span>requestUrl <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    requestUrl <span class="token operator">=</span> <span class="token string">'/index.html'</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 图片css等会发起多次请求</span>  <span class="token comment" spellcheck="true">// 取出文件后缀名字 ！important</span>  <span class="token keyword">let</span> extname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>requestUrl<span class="token punctuation">)</span>  <span class="token keyword">let</span> mime <span class="token operator">=</span> <span class="token function">getMime</span><span class="token punctuation">(</span>extname<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// path.resolve(__dirname) 获取当前文件夹前的绝对路径</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../xiaou'</span><span class="token punctuation">)</span> <span class="token operator">+</span> requestUrl<span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'Content-type'</span><span class="token punctuation">:</span> mime <span class="token punctuation">}</span><span class="token punctuation">)</span>      response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'3000'</span><span class="token punctuation">,</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is running...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 使用node的http创建服务器读取网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd默认渲染节点为body的解决方法</title>
      <link href="2021/10/17/antd-mo-ren-xuan-ran-jie-dian-wei-body-de-jie-jue-fang-fa/"/>
      <url>2021/10/17/antd-mo-ren-xuan-ran-jie-dian-wei-body-de-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><h4 id="antd默认渲染节点为body的解决方法"><a href="#antd默认渲染节点为body的解决方法" class="headerlink" title="antd默认渲染节点为body的解决方法"></a>antd默认渲染节点为body的解决方法</h4><pre class=" language-js"><code class="language-js">通常使用antd组件是没有什么问题的，但你在用datav时，可能会出现样式错乱的问题，这是因为antd有些组件 的默认渲染节点位于body，因此，需要使用getPopupContainer属性，改变默认渲染父节点，并配合相对、绝对定位，使子节点位于父节点附近。父标签可以是div也可以是其他标签 。</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> antd默认渲染节点为body的解决方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node中的path和url模块</title>
      <link href="2021/10/09/node-zhong-de-path-he-url-mo-kuai/"/>
      <url>2021/10/09/node-zhong-de-path-he-url-mo-kuai/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="node中的path和url模块"><a href="#node中的path和url模块" class="headerlink" title="node中的path和url模块"></a>node中的path和url模块</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// path.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'https://www.baidu.com:443/xiagao/index.html?name=Eric&amp;age=18'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// url模块多使用parse方法，一般与path模块的extname 配合使用</span><span class="token comment" spellcheck="true">// basename 取出路径中最后一部分</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// index.html?name=Eric&amp;age=18</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结束符 ；</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// extname 取出访问路径的后缀名</span><span class="token comment" spellcheck="true">// extname并不智能，需要借助url</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'后缀名'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// .html?name=Eric&amp;age=18 ，只需要.html</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Url {  protocol: 'https:',  slashes: true,  auth: null,  host: 'www.baidu.com:443',  port: '443',  hostname: 'www.baidu.com',  hash: null,  search: '?name=Eric&amp;age=18',  query: 'name=Eric&amp;age=18',  pathname: '/xiagao/index.html',  path: '/xiagao/index.html?name=Eric&amp;age=18',  href: 'https://www.baidu.com:443/xiagao/index.html?name=Eric&amp;age=18'} */</span><span class="token comment" spellcheck="true">// 借助url</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// .html</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断是否是绝对路径</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'绝对'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// 只要以盘符开头的，它都是绝对路径，不管他存不存在</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">'C:/user/admin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// parse 格式化路径</span><span class="token comment" spellcheck="true">// 这就好比根下的各级文件</span><span class="token comment" spellcheck="true">/** * {  root: '', 根  dir: 'https://www.baidu.com:443/xiagao', 文件夹  base: 'index.html?name=Eric&amp;age=18',   下的  ext: '.html?name=Eric&amp;age=18',  ..  name: 'index'} */</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 连接相对路径join</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'a/b'</span><span class="token punctuation">,</span> <span class="token string">'c/d'</span><span class="token punctuation">,</span> <span class="token string">'d/f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a\b\c\d\d\f</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'a/b'</span><span class="token punctuation">,</span> <span class="token string">'./c/d'</span><span class="token punctuation">,</span> <span class="token string">'./d/f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a\b\c\d\d\f</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'a/b'</span><span class="token punctuation">,</span> <span class="token string">'../c/d'</span><span class="token punctuation">,</span> <span class="token string">'../e/f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a\c\e\f ??? 为什么</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'a/b'</span><span class="token punctuation">,</span> <span class="token string">'../c/d'</span><span class="token punctuation">,</span> <span class="token string">'../e/f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// D:\DrillNode\path\a\c\e\f 绝对路径</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// resolve 连接后直接就是绝对路径</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a/b'</span><span class="token punctuation">,</span> <span class="token string">'../c/d'</span><span class="token punctuation">,</span> <span class="token string">'../e/f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// D:\DrillNode\path\a\c\e\f</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> node中的path和url模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启用nodemon热更新</title>
      <link href="2021/10/09/qi-yong-nodemon-re-geng-xin/"/>
      <url>2021/10/09/qi-yong-nodemon-re-geng-xin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="启用nodemon热更新"><a href="#启用nodemon热更新" class="headerlink" title="启用nodemon热更新"></a>启用nodemon热更新</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// npm init 初始化当前文件夹</span><span class="token comment" spellcheck="true">// npm install nodemon -g 全局安装nodemon </span><span class="token comment" spellcheck="true">// 修改文件夹下的   main 的指向， 使用哪个文件就指向哪个文件</span></code></pre><pre class=" language-json"><code class="language-json">// http/package.json<span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"server"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"from.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 启用nodemon热更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node写入文件的几种方式</title>
      <link href="2021/10/09/node-xie-ru-wen-jian-de-ji-chong-fang-shi/"/>
      <url>2021/10/09/node-xie-ru-wen-jian-de-ji-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="node写入文件的几种方式"><a href="#node写入文件的几种方式" class="headerlink" title="node写入文件的几种方式"></a>node写入文件的几种方式</h4><pre class=" language-tex"><code class="language-tex">R  ：  只读方式打开  W  ：  写入方式打开  覆盖写A  ：  写入方式打开  追加写</code></pre><h5 id="同步写入"><a href="#同步写入" class="headerlink" title="同步写入"></a>同步写入</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// sync.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 同步写入</span><span class="token comment" spellcheck="true">// 打开文件</span><span class="token keyword">const</span> fd <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">openSync</span><span class="token punctuation">(</span><span class="token string">'./json/sync.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 准备写入的数据</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'我爱你 塞北的雪\n'</span><span class="token comment" spellcheck="true">// 写入</span>fs<span class="token punctuation">.</span><span class="token function">writeSync</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 关闭资源</span>fs<span class="token punctuation">.</span><span class="token function">closeSync</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// node ... 便被写入sync.txt</span></code></pre><p>sync.txt （追加写）</p><pre class=" language-txt"><code class="language-txt">我爱你 塞北的雪我爱你 塞北的雪</code></pre><h5 id="异步写入"><a href="#异步写入" class="headerlink" title="异步写入"></a>异步写入</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// async.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 写入的资源</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'曾经沧海难为水，除却巫山不是云。复次花丛懒回顾，边缘修道半缘君。'</span>fs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'./json/async.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> fd<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写入文件</span>    fs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> str<span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      error <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入失败'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      error <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'关闭失败'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'关闭成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>async.txt （覆盖写）</p><pre class=" language-txt"><code class="language-txt">曾经沧海难为水，除却巫山不是云。复次花丛懒回顾，边缘修道半缘君。</code></pre><h5 id="简单写入"><a href="#简单写入" class="headerlink" title="简单写入"></a>简单写入</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// easy.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// * 读取json 和存入 json都一定要序列化和反序列化</span><span class="token keyword">const</span> bookObj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"book_name"</span><span class="token punctuation">:</span> <span class="token string">"我当阴阳先生的那几年"</span><span class="token punctuation">,</span>  <span class="token string">"book_price"</span><span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span>  <span class="token string">"book_page"</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">,</span>  <span class="token string">"book_author"</span><span class="token punctuation">:</span> <span class="token string">"崔走召"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 简单写入</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./json/1.json'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> newData <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    bookObj<span class="token punctuation">.</span>book_id <span class="token operator">=</span> newData<span class="token punctuation">[</span>newData<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>book_id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newData<span class="token punctuation">,</span> bookObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    newData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>bookObj<span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./json/1.json'</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>newData<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> encoding<span class="token punctuation">:</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> flag<span class="token punctuation">:</span> <span class="token string">'w'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      e <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'添加失败'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'添加成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>1.json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token property">"book_id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"book_name"</span><span class="token operator">:</span> <span class="token string">"我当道士那些年"</span><span class="token punctuation">,</span>    <span class="token property">"book_price"</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>    <span class="token property">"book_page"</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>    <span class="token property">"book_author"</span><span class="token operator">:</span> <span class="token string">"仐三"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token property">"book_name"</span><span class="token operator">:</span> <span class="token string">"我当阴阳先生的那几年"</span><span class="token punctuation">,</span>    <span class="token property">"book_price"</span><span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>    <span class="token property">"book_page"</span><span class="token operator">:</span> <span class="token number">700</span><span class="token punctuation">,</span>    <span class="token property">"book_author"</span><span class="token operator">:</span> <span class="token string">"崔走召"</span><span class="token punctuation">,</span>    <span class="token property">"book_id"</span><span class="token operator">:</span> <span class="token number">2</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h5 id="流式写入"><a href="#流式写入" class="headerlink" title="流式写入"></a>流式写入</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// strame.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 流式写入适合写入大批量的数据</span><span class="token comment" spellcheck="true">// 创建一个可写的流，流式操作一般都是使用a方式进行写入</span><span class="token keyword">let</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'./json/stream.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> flags<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token punctuation">:</span> <span class="token string">'utf-8'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'流已经打开'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'你好 世界\n'</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'流关闭了...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 结束操作</span>ws<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>strame.txt</p><pre class=" language-txt"><code class="language-txt">你好 世界你好 世界你好 世界你好 世界你好 世界</code></pre><h5 id="other"><a href="#other" class="headerlink" title="other"></a>other</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// dataOpera.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">,</span> fs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// readFileSync 写入的似乎是 buffer数据类型， 需要使用toString 方法转换</span><span class="token keyword">let</span> result <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./json/snow.text'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> node写入文件的几种方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode使用git命令行</title>
      <link href="2021/10/09/vscode-shi-yong-git-ming-ling-xing/"/>
      <url>2021/10/09/vscode-shi-yong-git-ming-ling-xing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="vscode使用git命令行"><a href="#vscode使用git命令行" class="headerlink" title="vscode使用git命令行"></a>vscode使用git命令行</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 打开settings.json </span><span class="token comment" spellcheck="true">// 加入</span><span class="token string">"terminal.integrated.shell.windows"</span><span class="token punctuation">:</span> <span class="token string">"C:\\Program Files\\Git\\bin\\bash.exe"</span><span class="token punctuation">,</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vscode使用git命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object.assign深浅拷贝</title>
      <link href="2021/10/09/object-assign-shen-qian-kao-bei/"/>
      <url>2021/10/09/object-assign-shen-qian-kao-bei/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Object-assign深浅拷贝"><a href="#Object-assign深浅拷贝" class="headerlink" title="Object.assign深浅拷贝"></a>Object.assign深浅拷贝</h4><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span>assign拷贝的 <span class="token operator">**</span><span class="token operator">*</span>属性值为简单类型时为深拷贝、拷贝的 <span class="token operator">**</span><span class="token operator">*</span>属性值为对象时，为浅拷贝。  <span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Eric'</span> <span class="token punctuation">}</span>  <span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>  <span class="token keyword">let</span> obj3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj3'</span><span class="token punctuation">,</span> obj3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// obj3 {name: 'Eric', list: Array(2)}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  obj3<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Lucy'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'push后'</span><span class="token punctuation">,</span> obj3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// list: (3) ['Rose', 'Jack', 'Lucy']</span>                              <span class="token comment" spellcheck="true">// name: "666"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'push后obj2变没变'</span><span class="token punctuation">,</span> obj2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// list: (3) ['Rose', 'Jack', 'Lucy'] 发现obj2也变了</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  obj3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'666'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'看第一个name改变后的obj3'</span><span class="token punctuation">,</span> obj3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name: "666"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'看第一个name改变后的obj1'</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name: "Eric" 简单数据类型没变！</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> obj4 <span class="token operator">=</span> <span class="token punctuation">{</span> one<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'牛恒'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">let</span> obj5 <span class="token operator">=</span> <span class="token punctuation">{</span> two<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'nnn'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">let</span> obj6 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj4<span class="token punctuation">,</span> obj5<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj6'</span><span class="token punctuation">,</span> obj6<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {one: {…}, two: {…}}</span>  obj6<span class="token punctuation">.</span>one<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'牛逼'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> obj6<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// one: {name: '牛逼'}</span>                              <span class="token comment" spellcheck="true">// two: {name: 'nnn'}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'看是否对obj4有影像'</span><span class="token punctuation">,</span> obj4<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// one: {name: '牛逼'}  发现obj6 改变， obj4也改变了</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Object.assign深浅拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac查看ip</title>
      <link href="2021/10/05/mac-cha-kan-ip/"/>
      <url>2021/10/05/mac-cha-kan-ip/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="在开发中，我们可能需要配置本地的ip、端口-而mac在每次关机后，会重新分配ip。"><a href="#在开发中，我们可能需要配置本地的ip、端口-而mac在每次关机后，会重新分配ip。" class="headerlink" title="在开发中，我们可能需要配置本地的ip、端口, 而mac在每次关机后，会重新分配ip。"></a>在开发中，我们可能需要配置本地的ip、端口, 而mac在每次关机后，会重新分配ip。</h4><p>这时我们就需要重新查看当前的ip了。</p><pre class=" language-js"><code class="language-js">ifconfig <span class="token operator">|</span> grep <span class="token string">"inet "</span> <span class="token operator">|</span> grep <span class="token operator">-</span>v <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span></code></pre><h4 id="mac更改时间日期"><a href="#mac更改时间日期" class="headerlink" title="mac更改时间日期"></a>mac更改时间日期</h4><pre class=" language-js"><code class="language-js">sudo date <span class="token number">0827102121</span>月日时分年最后的<span class="token number">21</span>是年</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> mac查看ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cra引入文件非全称</title>
      <link href="2021/09/29/cra-yin-ru-wen-jian-fei-quan-cheng/"/>
      <url>2021/09/29/cra-yin-ru-wen-jian-fei-quan-cheng/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>配置webpack.config.js</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 找到extensions</span> extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.mjs'</span><span class="token punctuation">,</span> <span class="token string">'.jsx'</span><span class="token punctuation">,</span> <span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.tsx'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 在前面加 .</span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> cra引入文件非全称 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cra中使用相对路径</title>
      <link href="2021/09/28/cra-zhong-shi-yong-xiang-dui-lu-jing/"/>
      <url>2021/09/28/cra-zhong-shi-yong-xiang-dui-lu-jing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h4><p>tsconfig.json中加入如下配置</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"src"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="2-而后便可以相对于src路径引入"><a href="#2-而后便可以相对于src路径引入" class="headerlink" title="2.而后便可以相对于src路径引入"></a>2.而后便可以相对于src路径引入</h4><p>不再需要 ../../../繁琐模式</p><pre class=" language-tsx"><code class="language-tsx">import { modulList, commonKeyList, secondTable, list } from 'package/constant'</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> cra使用相对路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hoc高阶组件</title>
      <link href="2021/09/28/hoc-gao-jie-zu-jian/"/>
      <url>2021/09/28/hoc-gao-jie-zu-jian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><pre class=" language-tsx"><code class="language-tsx">高阶组件实际上是一个高阶函数，它接收一个组件作为参数，返回被包装的组件(这个传入的参数)，并携带一些参数。高阶组件内部往往会做一些逻辑处理，然后把这些处理后的逻辑数据传递出去。由此实现了组件逻辑的复用。传入的参数组件来写不同的外部组件样式，实现了组件样式的多样化，逻辑的复用。</code></pre><h4 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// WithCommonHoc 高阶组件</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> getDisplayName <span class="token operator">=</span> <span class="token punctuation">(</span>differentComponent<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> differentComponent<span class="token punctuation">.</span>displayName <span class="token operator">||</span> differentComponent<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">'component'</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">MouseProps</span> <span class="token punctuation">{</span>  status<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">const</span> WithCommonHoc <span class="token operator">=</span> <span class="token punctuation">(</span>WarppedComponend<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WarppedComponensssssssssssd'</span><span class="token punctuation">,</span> WarppedComponend<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'status'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> Mouse<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MouseProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'niuheng'</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>posX<span class="token punctuation">,</span> setPosX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">260</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>posY<span class="token punctuation">,</span> setPosY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// console.log('state',state)</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> handelMouseDown<span class="token punctuation">)</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>button <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> handelMouseMove<span class="token punctuation">)</span>          window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> handelMouseMove<span class="token punctuation">)</span>          window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> handelMouseMove<span class="token punctuation">)</span>        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> handelMouseDown<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> handelMouseMove <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setPosX</span><span class="token punctuation">(</span><span class="token punctuation">(</span>posX<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> posX <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token function">setPosY</span><span class="token punctuation">(</span><span class="token punctuation">(</span>posY<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> posY <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> handelMouseDown <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>button <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> handelMouseMove<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调用高阶组件时.创建出的组件名字一样，使用隐藏名字来区分</span>    <span class="token comment" spellcheck="true">// 这样调用后，分次调用的组件不会重名</span>    Mouse<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`WidthMouse</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getDisplayName</span><span class="token punctuation">(</span>WarppedComponend<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token comment" spellcheck="true">// 使用高阶组件，会出现props丢失的情况，因此建议在渲染被包装组建时，将state和props一起传递给被包装组件</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WarppedComponend</span> <span class="token attr-name">x</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>posX<span class="token punctuation">}</span></span> <span class="token attr-name">y</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>posY<span class="token punctuation">}</span></span> <span class="token attr-name">{...props}</span> <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Mouse<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> WithCommonHoc</code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 参数组件1 MouseMove</span><span class="token comment" spellcheck="true">// 参数组件可以定义样式</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">mouseProps</span> <span class="token punctuation">{</span>  x<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">,</span>  y<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">MouseMoveComponent</span> <span class="token punctuation">{</span>  prefer<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">const</span> MouseMove <span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mouseProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token punctuation">{</span>  x<span class="token punctuation">,</span>  y<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token function">当前鼠标位置：</span><span class="token punctuation">(</span>x <span class="token punctuation">:</span> <span class="token punctuation">{</span>x<span class="token punctuation">}</span> <span class="token punctuation">,</span> y <span class="token punctuation">:</span> <span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> MouseMove</code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 参数组件2  Kaer</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> imgList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../constant'</span><span class="token keyword">import</span> cx <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">interface</span> <span class="token class-name">KaerProps</span> <span class="token punctuation">{</span>  x<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">,</span>  y<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">,</span>  status<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">}</span><span class="token keyword">const</span> Kaer<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KaerProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  x<span class="token punctuation">,</span>  y<span class="token punctuation">,</span>  status<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'status'</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'打印定时器'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'先来后到'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>x <span class="token operator">&amp;&amp;</span> y <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'imgstyle'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>imgList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> left<span class="token punctuation">:</span> x<span class="token punctuation">,</span> top<span class="token punctuation">:</span> y <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Kaer</code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// Hoc 调用组件</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> MouseMove <span class="token keyword">from</span> <span class="token string">'../component/MouseMove/index'</span><span class="token keyword">import</span> WithCommonHoc <span class="token keyword">from</span> <span class="token string">'../component/WithCommonHoc/index'</span><span class="token keyword">import</span> Kaer <span class="token keyword">from</span> <span class="token string">"../component/Kaer"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Hoc<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>testStatus<span class="token punctuation">,</span> setTestStatus<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'niuheng'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> MousePosipotion <span class="token operator">=</span> <span class="token function">WithCommonHoc</span><span class="token punctuation">(</span>MouseMove<span class="token punctuation">)</span>  <span class="token keyword">const</span> MouseKaer <span class="token operator">=</span> <span class="token function">WithCommonHoc</span><span class="token punctuation">(</span>Kaer<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WithCommonHoc'</span><span class="token punctuation">,</span> WithCommonHoc<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MousePosipotion</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MouseKaer</span> <span class="token attr-name">status</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>testStatus<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">export</span> <span class="token keyword">default</span> Hoc</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 高阶组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-redux</title>
      <link href="2021/09/28/react-redux/"/>
      <url>2021/09/28/react-redux/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-为什么用redux"><a href="#1-为什么用redux" class="headerlink" title="1.为什么用redux"></a>1.为什么用redux</h4><pre class=" language-react"><code class="language-react">React中 ，组件的数据是单向流动的，即数据从一个方向(父组件)流向子组件(通过props)。因此，两个非父子组件的通信就相对麻烦，redux的出现就是state数据问题。数据存放于全局，便于统一的配置、管理和维护。</code></pre><h4 id="2-redux原理"><a href="#2-redux原理" class="headerlink" title="2.redux原理"></a>2.redux原理</h4><pre class=" language-react"><code class="language-react">触发action改变state。state的改变均通过action来改变。（ 为reducer函数传入 state 和 action，并得到新的NewState返回给store, store再把数据传回组 ）件。</code></pre><h4 id="3-redux三大原则"><a href="#3-redux三大原则" class="headerlink" title="3.redux三大原则"></a>3.redux三大原则</h4><pre class=" language-react"><code class="language-react">1. 单一的数据源   redux思想中，一个应用永远只有一个唯一的数据源。  待续..。2. 状态只读   state是只读的，唯一改变state的方法就是触发action。 待续...3. 数据改变只能通过纯函数来执行   在redux中，通过定义reducer来确定状态的修改，而每一个reducer都是纯函数，   这意味着它没有副作用，即接收一定的输入，一定会得到一定的输出。                                          待续...</code></pre><h4 id="4-代码"><a href="#4-代码" class="headerlink" title="4.代码"></a>4.代码</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// index.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token keyword">import</span> reduce <span class="token keyword">from</span> <span class="token string">'./reduce'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'reduce'</span><span class="token punctuation">,</span> reduce<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reduce<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// reducer.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token keyword">const</span> initdata<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> arr<span class="token punctuation">:</span> <span class="token punctuation">{</span>  item<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      item<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      item<span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token keyword">const</span> oneState <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> initdata<span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'init'</span><span class="token punctuation">:</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'初始化了吗'</span><span class="token punctuation">,</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">=</span> action      <span class="token keyword">return</span> data    <span class="token comment" spellcheck="true">// case 'add':</span>    <span class="token comment" spellcheck="true">//   return</span>    <span class="token comment" spellcheck="true">// case 'del':</span>    <span class="token comment" spellcheck="true">// return</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> secondState <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> arr<span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'first'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  oneState<span class="token punctuation">,</span>  secondState<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// actions.ts</span><span class="token keyword">const</span> initMethod <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'init'</span><span class="token punctuation">,</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> aggreGate <span class="token operator">=</span> <span class="token punctuation">{</span>  initMethod<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>  aggreGate<span class="token punctuation">}</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// testone</span><span class="token keyword">interface</span> <span class="token class-name">IndexProps</span> <span class="token punctuation">{</span>  changeState<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">,</span>  initMethod<span class="token operator">?</span><span class="token punctuation">:</span> any  <span class="token comment" spellcheck="true">// 这里应该是函数的</span><span class="token punctuation">}</span><span class="token keyword">const</span> Index<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IndexProps</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  changeState <span class="token punctuation">,</span>  initMethod<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 初始化redux中的状态数据</span>      initMethod <span class="token operator">&amp;&amp;</span> <span class="token function">initMethod</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 注意redux状态变化后的程序执行顺序</span><span class="token comment" spellcheck="true">// redux 状态改变 首先整个connect高价组件会先执行，然后被他包裹的组价重渲 按顺序逐行解析  父先子后</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'高阶组件的状态'</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      changeState<span class="token punctuation">:</span> state    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token operator">...</span>aggreGate  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Index<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 这个return 的对象的键值会绑定到被修饰组件的props上</span>  <span class="token comment" spellcheck="true">// 第二个参数 的所有方法也会绑定到被修饰组件的props上</span></code></pre><p>未完待续…</p>]]></content>
      
      
      
        <tags>
            
            <tag> react-redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组方法reduce</title>
      <link href="2021/09/24/shu-zu-fang-fa-reduce/"/>
      <url>2021/09/24/shu-zu-fang-fa-reduce/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre class=" language-js"><code class="language-js">   arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token operator">...</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 其中，</span>  <span class="token comment" spellcheck="true">// prev 表示上一次调用回调时的返回值，或者初始值 init;</span>  <span class="token comment" spellcheck="true">// cur 表示当前正在处理的数组元素；</span>  <span class="token comment" spellcheck="true">// index 表示当前正在处理的数组元素的索引，若提供 init 值( [] )，则索引为0，否则索引为1；</span>  <span class="token comment" spellcheck="true">// arr 表示原数组；</span>         <span class="token comment" spellcheck="true">// init 表示初始值。可为[] ，也可以为 0 或其他初始值</span>         <span class="token comment" spellcheck="true">// 计算数组项之和</span>   <span class="token keyword">let</span> bigarr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigarr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 56</span>         <span class="token comment" spellcheck="true">// 求最大值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'max'</span><span class="token punctuation">,</span> bigarr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 9</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 数组去重</span>    <span class="token keyword">let</span> newArr <span class="token operator">=</span> bigarr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'prev'</span><span class="token punctuation">,</span> prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span>    prev<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> prev<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>    <span class="token keyword">return</span> prev  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// prev [] 1</span>  <span class="token comment" spellcheck="true">// style.html:78 prev [1] 3</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (2) [1, 3] 7</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (3) [1, 3, 7] 9</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (4) [1, 3, 7, 9] 8</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (5) [1, 3, 7, 9, 8] 7</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (5) [1, 3, 7, 9, 8] 6</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (6) [1, 3, 7, 9, 8, 6] 2</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (7) [1, 3, 7, 9, 8, 6, 2] 9</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (7) [1, 3, 7, 9, 8, 6, 2] 1</span>  <span class="token comment" spellcheck="true">// style.html:78 prev (7) [1, 3, 7, 9, 8, 6, 2] 3 </span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> newArr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 3, 7, 9, 8, 6, 2]</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数组reduce方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6promise对象</title>
      <link href="2021/09/17/es6promise-dui-xiang/"/>
      <url>2021/09/17/es6promise-dui-xiang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 将异步程序放入promise实例</span><span class="token comment" spellcheck="true">// promise.js</span><span class="token keyword">const</span> Ajaxs <span class="token operator">=</span> <span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ****</span>    <span class="token keyword">let</span> ajax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> data<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      ajax<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ajax<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ***</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise<span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./promise.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 接收一个promise对象</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">Ajaxs</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'./3.json'</span><span class="token punctuation">,</span> <span class="token string">'666'</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'result for 24 line'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// result for 24 line Promise {&lt;pending>}</span>  <span class="token comment" spellcheck="true">// 没有then和then之后的都是promise对象</span>  <span class="token keyword">let</span> type1 <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'res'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正常输出</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// .then 之后</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'type1'</span><span class="token punctuation">,</span> type1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// type1 Promise {&lt;pending>} </span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react引入antd</title>
      <link href="2021/09/17/react-yin-ru-antd/"/>
      <url>2021/09/17/react-yin-ru-antd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 安装</span>npm install antd <span class="token operator">--</span>save<span class="token comment" spellcheck="true">// 入口文件引入样式文件(注意，必须引入，否则样式无效果) </span><span class="token comment" spellcheck="true">// src/index.ts || src/index.js</span><span class="token keyword">import</span> <span class="token string">'antd/dist/antd.css'</span>  <span class="token comment" spellcheck="true">// 必须引入antd样式文件</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react引入antd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建react脚手架</title>
      <link href="2021/09/17/chuang-jian-react-jiao-shou-jia/"/>
      <url>2021/09/17/chuang-jian-react-jiao-shou-jia/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// cra 创建react 脚手架 (javascript)</span>npx create<span class="token operator">-</span>react<span class="token operator">-</span>app myapp<span class="token comment" spellcheck="true">// cra 创建手脚架 (typescript)</span>npx create<span class="token operator">-</span>react<span class="token operator">-</span>app antd<span class="token operator">-</span>demo<span class="token operator">-</span>ts <span class="token operator">--</span>template typescript</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 创建react脚手架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生轮播图</title>
      <link href="2021/09/13/yuan-sheng-lun-bo-tu/"/>
      <url>2021/09/13/yuan-sheng-lun-bo-tu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><pre class=" language-css"><code class="language-css">    <span class="token selector">* </span><span class="token punctuation">{</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.you</span> </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1920</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.you</span> ul </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">11520</span><span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.you</span> ul li </span><span class="token punctuation">{</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">img </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1920</span>px<span class="token punctuation">;</span>            <span class="token property">visibility</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>you<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--> 先画出静态样式，让 ul 中的 li 浮动，给ul外的父盒子给宽度,再把li注释掉，后面动态添加--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ou<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- &lt;li>                &lt;img src="./img/banner-2.jpg" alt="">            &lt;/li>            &lt;li>                &lt;img src="./img/banner-3.jpg" alt="">            &lt;/li>            &lt;li>                &lt;img src="./img/banner-4.jpg" alt="">            &lt;/li>            &lt;li>                &lt;img src="./img/banner-5.jpg" alt="">            &lt;/li>            &lt;li>                &lt;img src="./img/banner-6.jpg" alt="">            &lt;/li> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//**&lt;script src="./utils.js">&lt;/script></span>    <span class="token comment" spellcheck="true">// &lt;script></span>            <span class="token keyword">let</span> youWrap <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'you'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">var</span> oul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'ou'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        U<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'./banner.json'</span><span class="token punctuation">,</span> <span class="token string">'name=李四'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 取出you图</span>            <span class="token keyword">let</span> you <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>you            <span class="token comment" spellcheck="true">// 给ul设宽</span>            <span class="token keyword">let</span> youwidth <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">getStyle</span><span class="token punctuation">(</span>youWrap<span class="token punctuation">,</span> <span class="token string">'width'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// console.log(youwidth)</span>             <span class="token comment" spellcheck="true">// oul的宽度多加一项</span>            <span class="token keyword">let</span> oulWidth <span class="token operator">=</span> youwidth <span class="token operator">*</span> <span class="token punctuation">(</span>you<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            oul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> oulWidth <span class="token operator">+</span> <span class="token string">'px'</span>            <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> you<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                str <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;li>&lt;img src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>you<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" alt="">&lt;/li>`</span></span>            <span class="token punctuation">}</span>            oul<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> str            <span class="token keyword">let</span> oli <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">let</span> firstLi <span class="token operator">=</span> oli<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 将第一项克隆追加到oul最后面</span>            oul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>firstLi<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 获取一个li的宽度</span>            <span class="token keyword">let</span> oliWidth <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">getStyle</span><span class="token punctuation">(</span>oli<span class="token punctuation">,</span> <span class="token string">'width'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">0</span>            <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                n<span class="token operator">++</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> you<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    n <span class="token operator">=</span> <span class="token number">0</span>                <span class="token punctuation">}</span>                U<span class="token punctuation">.</span><span class="token function">buffermove</span><span class="token punctuation">(</span>oul<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'left'</span><span class="token punctuation">:</span> <span class="token operator">-</span>n <span class="token operator">*</span> oliWidth <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="utils-js"><a href="#utils-js" class="headerlink" title="utils.js"></a>utils.js</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> U <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*  getStyle获取非行间样式   * param  obj  元素  (object)   * param  attr 属性  (string)   */</span>  <span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>getComputedStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//如果window存在getComputedStyle 就为真</span>      <span class="token keyword">return</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">[</span>attr<span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//IE</span>      <span class="token keyword">return</span> obj<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>attr<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*    *buffermove(obj,json,callback) 多属性同时运动   * params obj {object} 元素  必须是绝对定位的   * params json {'width':500}}     * params  callback {Function}} 可选    */</span>  <span class="token keyword">function</span> <span class="token function">buffermove</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//(obj,target,attr)  callback 形参</span>    <span class="token comment" spellcheck="true">// 频繁触发定时器时也要进行清除定时器</span>    <span class="token comment" spellcheck="true">// console.log('obj,json', obj, json, ' obj.timer', obj.timer);</span>    <span class="token comment" spellcheck="true">// 注意自定义属性</span>    <span class="token comment" spellcheck="true">// 直接定义的自定义属性 不论元素还是函数，都是undefined</span>    <span class="token comment" spellcheck="true">// 为什么要加入一个自定义属性？</span>    <span class="token comment" spellcheck="true">// 封装之后，如果外部调用此函数，还必须定义一个为null的timer，加入自定义属性后，外部不再需要传入timer</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span>    obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 转为number</span>        <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> speed <span class="token operator">=</span> <span class="token punctuation">(</span>json<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-</span> current<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span>         speed <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span> <span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> json<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        obj<span class="token punctuation">.</span>style<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> current <span class="token operator">+</span> speed <span class="token operator">+</span> <span class="token string">'px'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1、创建ajax 对象</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果data有参数</span>        <span class="token comment" spellcheck="true">// 2、建立连接</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> data<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//post</span>      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 设置请求头</span>      xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果data有参数</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4、注册监听事件</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//服务器响应完毕 并且 数据请求成功</span>        <span class="token comment" spellcheck="true">// 调用回调函数</span>        <span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 对象属性名和属性值相同的情况下可以省略属性名</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    getStyle<span class="token punctuation">,</span>    buffermove<span class="token punctuation">,</span>    ajax  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span></code></pre><h4 id="banner-json"><a href="#banner-json" class="headerlink" title="banner.json"></a>banner.json</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"you"</span><span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token string">"./img/banner-2.jpg"</span><span class="token punctuation">,</span>    <span class="token string">"./img/banner-3.jpg"</span><span class="token punctuation">,</span>    <span class="token string">"./img/banner-4.jpg"</span><span class="token punctuation">,</span>    <span class="token string">"./img/banner-5.jpg"</span><span class="token punctuation">,</span>    <span class="token string">"./img/banner-6.jpg"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 原生轮播图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化</title>
      <link href="2021/09/13/qian-duan-xing-neng-you-hua/"/>
      <url>2021/09/13/qian-duan-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 为避免一个函数的执行频率过高， 使用防抖。</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//进入该分支语句，说明当前正在一个计时过程中，并且又触发了相同事件。所以要取消当前的计时，重新开始计时</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自定义属性，外部不用再定义一个timer传进来 (timer初始为undefined)</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>timer<span class="token punctuation">)</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 其他情况，说明当前并没有在计时，那么就开始一个计时</span>        fn<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 一种类似控制阀门一样定期开放的函数，也就是让函数执行一次后，在某个时间段内暂时失效，过了这段时间后再重新激活（类似于技能冷却时间） </span><span class="token comment" spellcheck="true">// 取自思否</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> valid <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>valid<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//休息时间 暂不接客</span>           <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span>        valid <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            valid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="视频流"><a href="#视频流" class="headerlink" title="视频流"></a>视频流</h4><pre class=" language-tex"><code class="language-tex">有时组件内部会嵌套视频，而在组件将要卸载时，必须断掉这些视频流，不断掉视频流不会自动停止，会对性能产生严重影响！有些场景，需要在组件卸载前，将定时器也清除掉。</code></pre><h4 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h4><pre class=" language-tex"><code class="language-tex">游戏开发一般对性能、内存有严格要求。 拿移动端举例， 有的游戏从始至终只会请求一次接口，任何页面数据变化 ，全部由前端计算并更新页面数据。 也就是说在点某个具体的按钮时，数据发生变化，会传一个流程Id给后端，后端根据这个流程Id 更新数据库数据，而前端展示数据由前端更新。（注意：这里只是传了流程Id给后端，并没有重新请求接口渲染页面！），但在下次重新请求数据时，使用数据库数据！**前端更新数据，子组件将需要更新的数据传回父组件，由父组件完成更新再传递给子组件。</code></pre><h4 id="尽量少调接口"><a href="#尽量少调接口" class="headerlink" title="尽量少调接口"></a>尽量少调接口</h4><pre class=" language-tex"><code class="language-tex">若非必要情况，尽量少调用接口。 接口的调用一定意义上会消耗性能，因此，减少非必要接口的调用，移动端游戏开发正是这种思想。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件命令行操作</title>
      <link href="2021/09/12/wen-jian-ming-ling-xing-cao-zuo/"/>
      <url>2021/09/12/wen-jian-ming-ling-xing-cao-zuo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><pre class=" language-js"><code class="language-js">cd 文件名  <span class="token comment" spellcheck="true">// 切到下级目录</span>cd <span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment" spellcheck="true">// 返回上一级</span>mkdir 文件夹名 <span class="token comment" spellcheck="true">// 创建文件夹</span>rmdir 文件夹名 <span class="token comment" spellcheck="true">// 删除文件夹 ，必须是空文件夹</span>rmdir 文件夹名 <span class="token operator">/</span>s <span class="token comment" spellcheck="true">// 强制删除， 加/q 静默删除</span>dir<span class="token punctuation">.</span><span class="token operator">></span> 文件名 <span class="token comment" spellcheck="true">// 创建文件， 例如dir.> 1.html 、dir.> 8.json 、6.js</span><span class="token keyword">delete</span> 文件名 <span class="token comment" spellcheck="true">// 删除文件</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 文件命令行操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装ajax</title>
      <link href="2021/09/10/feng-zhuang-ajax/"/>
      <url>2021/09/10/feng-zhuang-ajax/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// http.js</span><span class="token keyword">const</span> Ajaxs <span class="token operator">=</span> <span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> ajax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> data<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    ajax<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  ajax<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> ajax<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">success</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./http.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token comment" spellcheck="true">/*   左侧为同步，右侧为异步，同步先执行，log s  为udefined  *   解决此问题只需再多传一个回调，在回调里log,此时就不是同步了  */</span>   <span class="token comment" spellcheck="true">//  let s = Ajaxs('post', './3.json', '继而')</span> <span class="token comment" spellcheck="true">//  console.log('s',s); // s undefined</span>  <span class="token function">Ajaxs</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'./3.json'</span><span class="token punctuation">,</span> <span class="token string">'666'</span><span class="token punctuation">,</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'res---->'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// {</span>      <span class="token comment" spellcheck="true">//  "name":"Eric",</span>      <span class="token comment" spellcheck="true">//  "hobby":"read"</span>      <span class="token comment" spellcheck="true">//  }</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>3.json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Eric"</span><span class="token punctuation">,</span>  <span class="token property">"hobby"</span><span class="token operator">:</span><span class="token string">"read"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 封装ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript</title>
      <link href="2021/09/06/typescript/"/>
      <url>2021/09/06/typescript/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 在安装了一些插件后，建议在 ***src目录下新建  *.d.ts文件声明引入的插件，否则会报错!</span> <span class="token comment" spellcheck="true">// 例如在入口index.ts 引入了 morgan</span> <span class="token keyword">import</span> morgan <span class="token keyword">from</span> <span class="token string">'morgan'</span>    <span class="token comment" spellcheck="true">// 安装了依然报错</span>Could not find a declaration file <span class="token keyword">for</span> <span class="token keyword">module</span> <span class="token string">'morgan'</span><span class="token punctuation">.</span> <span class="token string">'D:/React/antd-demo-ts/node_modules/_morgan@1.10.0@morgan/index.js'</span> implicitly has an <span class="token string">'any'</span> type<span class="token punctuation">.</span>  Try <span class="token template-string"><span class="token string">`npm i --save-dev @types/morgan`</span></span> <span class="token keyword">if</span> it exists or add a <span class="token keyword">new</span> <span class="token class-name">declaration</span> <span class="token punctuation">(</span><span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts<span class="token punctuation">)</span> file containing <span class="token template-string"><span class="token string">`declare module 'morgan';`</span></span>  </code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// src/declaration.d.ts</span><span class="token comment" spellcheck="true">// 添加如下声明 ，报错消失</span><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'morgan'</span><span class="token punctuation">;</span></code></pre><h4 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/* 与javascript相比 ，typescript 增加了类型， 使javascript变得强类型了。typescript 声明的变量 、函数和参数， 甚至外部的props，都可以定义变量的类型。虽然javascript非常灵活，使用起来很自由，但是这种自由会在项目变得很大时称为一种隐患，例如因为你可以随意的将一个number类型的变量变为其他类型，如果出错可能将是很难排查的。与javascript 相比， typescript定义类型的好处是 ： 在大型项目中更易于维护，且在编码阶段就能发现错误。*/</span><span class="token comment" spellcheck="true">// 定义变量</span><span class="token keyword">let</span> num <span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> str <span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'卡尔'</span><span class="token keyword">let</span> bool <span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token comment" spellcheck="true">// 定义字符串数组</span><span class="token keyword">export</span> <span class="token keyword">const</span> test<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'可领取'</span><span class="token punctuation">,</span> <span class="token string">'已领取'</span><span class="token punctuation">,</span> <span class="token string">'未领取'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 定义函数参数和返回值</span><span class="token keyword">const</span> dataMethod <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b <span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span>a <span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> b <span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义外部props</span> <span class="token comment" spellcheck="true">// index.tsx</span><span class="token keyword">interface</span> <span class="token class-name">SignProps</span> <span class="token punctuation">{</span>  status<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  signState<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>object<span class="token operator">></span><span class="token punctuation">,</span>  signUpdateMethod<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> SignPage<span class="token punctuation">:</span> React<span class="token punctuation">.</span>FC<span class="token operator">&lt;</span>SignProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  status<span class="token punctuation">,</span>  signState<span class="token punctuation">,</span>  signUpdateMethod<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 泛型</span>  泛型指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。  未完待续<span class="token operator">...</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2021/09/06/zheng-ze-biao-da-shi/"/>
      <url>2021/09/06/zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><pre class=" language-js"><code class="language-js"> <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'regex'</span><span class="token punctuation">,</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token regex">/(?:)/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'ig'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* 正则实例对象， 第一个参数为检索的字符， 第二个参数是修饰符, 注意修饰符必须加''（不加为变量） ； *  i 为不区分大小写， g为全局匹配(匹配多个而不是只匹配第一个)  */</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hello people hello world hello country hello army'</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 你好 people 你好 world 你好 country 你好 aramy</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">// 正则字面量</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/youSay/ig</span><span class="token comment" spellcheck="true">// 正则字面量的修饰符位于最后面，i和g不分先后次序</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'youSay 天这么蓝 yousay 空气这么清新 YouSay 你真的好开心'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">'你说'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 你说 天这么蓝 你说 空气这么清新 你说 你真的好开心</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">/* test  * 检索字符串中是否包含正则规定的内容，包含返回true，不包含返回false */</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'五杀超神'</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span>  <span class="token regex">/五杀/</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">// exec</span>  <span class="token keyword">let</span> str <span class="token operator">=</span>  <span class="token string">'uiuiuiui'</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span>  <span class="token regex">/u/</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回一个数组， 似乎不能全局匹配，只会返回第一个</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">// 字符串和正则匹配 配合使用</span>  <span class="token comment" spellcheck="true">// 替换</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'急急复急急，木兰当户织'</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/急急/g</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">'唧唧'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// match</span>  <span class="token comment" spellcheck="true">// 返回匹配的字符，组成一个新数组</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/急/g</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//  ["急", "急", "急", "急"]</span>  <span class="token comment" spellcheck="true">// split </span>  <span class="token comment" spellcheck="true">// 返回分隔后的数组</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/复/</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["急急", "急急，木兰当户织"]</span>  <span class="token comment" spellcheck="true">// serch</span>  <span class="token comment" spellcheck="true">// 返回正则匹配到的第一个字符的下标</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/复/</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 元字符  * . 表示除换行符外的任意字符 ( \n为换行符 )  * \ 表示转义字符  */</span>    <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/./</span>   <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'\n123'</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>      <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'1215204550@qq.com'</span>   <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\.c/</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>   <span class="token comment" spellcheck="true">// []匹配字符集中的任意字符</span>   <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/[0-9]/</span>   <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abc'</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>      <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/[0-9a-z]/</span>   <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'123zzz'</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>   </code></pre><pre class=" language-js"><code class="language-js">   <span class="token comment" spellcheck="true">// 密码</span>   <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/[0-9][0-9][0-9][0-9][0-9][0-9]/</span>   <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'23456'</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  </code></pre><pre class=" language-js"><code class="language-js">   <span class="token comment" spellcheck="true">// ^ 以什么开头</span>   <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/^[a-z]/</span>   <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'123acc'</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>   <span class="token comment" spellcheck="true">// $ 以什么结尾</span>   <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/m$/</span>   <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'1215204550@qq.com'</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span> </code></pre><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// \d 匹配数字</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\d\d\d/</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'123'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  <span class="token comment" spellcheck="true">// \D 匹配非数字 (字母 + 字符)</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\D\D\D/</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'A._'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// \w 匹配字母、数字，下划线</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\w\w\w\w\w\w/</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'qq_com'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  <span class="token comment" spellcheck="true">// \W 匹配非数字、字母，下划线</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\W\W\W/</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'@ -'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>   <span class="token comment" spellcheck="true">// 匹配空白字符(空格)</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\W\s\W/</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// \b 匹配单词边界</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\b/g</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hello for world'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 你好hello你好 你好for你好 你好world你好</span>    <span class="token comment" spellcheck="true">// \B 匹配非单词边界</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\B/g</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hello for world'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// h你好e你好l你好l你好o f你好o你好r w你好o你好r你好l你好d</span></code></pre><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 正则量词</span>  <span class="token comment" spellcheck="true">// ? 匹配0个或1个</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/4?/</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'123'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  <span class="token comment" spellcheck="true">// * 匹配0个或多个</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/a*/</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'aaaBaaaaaa'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["aaa", index: 0, input: "aaaBaaaaaa", groups: undefined]</span>  <span class="token comment" spellcheck="true">// + 匹配1个或多个</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\d+/</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'4567aaaaaaaaaaaaaa'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// helloaaaaaaaaaaaaaa</span>  <span class="token comment" spellcheck="true">// {6} 六位  {2, 6} 最少两位， 最多六位</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\d{11}/</span>  <span class="token keyword">let</span> phone <span class="token operator">=</span> <span class="token string">'17393845392'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  </code></pre><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 其他</span>  <span class="token comment" spellcheck="true">// | 或</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/^http:\/\/www\.\w+(.com|.cn|.gov|.net)/</span>  <span class="token keyword">let</span> net <span class="token operator">=</span> <span class="token string">'http://www.baidu.net'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>    <span class="token comment" spellcheck="true">// ()分组</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/(\d{3})(\d{4})(\d{4})/</span>  <span class="token keyword">let</span> ipone <span class="token operator">=</span> <span class="token string">'17393845392'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ipone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 173</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 9384</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5392</span>  <span class="token comment" spellcheck="true">// 替换</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ipone<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">'$1****$3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 173****5392</span>    <span class="token comment" spellcheck="true">// 邮箱正则</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\d+(@qq.com|@163.com)/</span>  <span class="token keyword">let</span> mail <span class="token operator">=</span> <span class="token string">'1215204550@163.com'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>mail<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// $1 是分组，有几个分组，就有几个$几</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// @163.com</span>    <span class="token comment" spellcheck="true">// 密码六位</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/\d{6}/</span>  <span class="token comment" spellcheck="true">// 手机号</span>  <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/^1[3, 5, 7 ,8 , 9]\d{9}/</span>  <span class="token comment" spellcheck="true">/*   * qq密码，必须有字母数字   *  ***这样有一个缺点，就是字母必须在前！***   */</span>     <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/[a-z]{2,6}[0-9]{6,10}/</span>  <span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token string">'wa124567'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件循环机制-宏任务微任务</title>
      <link href="2021/08/01/shi-jian-xun-huan-ji-zhi-hong-ren-wu-wei-ren-wu/"/>
      <url>2021/08/01/shi-jian-xun-huan-ji-zhi-hong-ren-wu-wei-ren-wu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="代码执行顺序"><a href="#代码执行顺序" class="headerlink" title="代码执行顺序"></a>代码执行顺序</h4><ul><li><input checked="" disabled="" type="checkbox"> <pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 先执行同步的代码<span class="token number">2</span><span class="token punctuation">.</span> 再执行process<span class="token punctuation">.</span>nextTick<span class="token number">3</span><span class="token punctuation">.</span> 执行异步代码   <span class="token number">3.1</span> 异步分为宏任务和微任务， 计时器 、ajax 、读取文件都是宏任务，Promise的then方法是微任务，微任务先执行   <span class="token number">3.2</span> 异步的代码放在任务队列里执行<span class="token number">4</span><span class="token punctuation">.</span> <span class="token operator">**</span><span class="token operator">*</span> setImmediate 会在本次事件循环结束之后  、下次事件循环开始之前执行 ！    <span class="token number">4.1</span> 事件循环，一次事件循环找到多少个任务此次就执行多少个任务，没有就不执行。每次事件循环都可能找到任务或找不到任务，不管找到找不到，本次事件循环都会结束，结束之后重新开始新一次的事件循环，重新开始查找任务，找到执行，找不到不执行！setImmediate就是第一次事件循环结束后，下一次事件循环之前执行的。    事件循环会不断的检测任务队列有没有任务可执行。process<span class="token punctuation">.</span>nextTick 与 setImmediate 都是在node使用场景多。这两个方法在node的才能运行，在浏览器运行不了。</code></pre></li></ul><pre class=" language-js"><code class="language-js"><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'本轮事件循环结束，下次事件循环未开始之前执行（setImmediate）'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步宏任务后执行，若无其他任务，本轮事件循环结束'</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'下一轮事件循环开始执行(宏任务)'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步执行（运行栈）'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步执行'</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这里也是同步的</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步微任务先执行（then）'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步之后执行（process.nextTick）'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 以上代码执行顺序</span>同步执行（运行栈） <span class="token number">2</span>同步执行 <span class="token number">6</span>同步之后执行（process<span class="token punctuation">.</span>nextTick） <span class="token number">5</span>异步微任务先执行（then） <span class="token number">8</span>异步宏任务后执行，若无其他任务，本轮事件循环结束 <span class="token number">9</span>本轮事件循环结束，下次事件循环未开始之前执行（setImmediate） <span class="token number">1</span><span class="token function">下一轮事件循环开始执行</span><span class="token punctuation">(</span>宏任务<span class="token punctuation">)</span> <span class="token number">3</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 事件循环  宏任务 微任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="2021/07/25/mian-xiang-dui-xiang/"/>
      <url>2021/07/25/mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建一个类</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> <span class="token string">"Eric"</span>  <span class="token comment" spellcheck="true">// 类的属性</span>    age <span class="token operator">=</span> <span class="token number">18</span>    hobby <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 类的方法</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'make a teacher'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 一个类可以创建多个对象</span><span class="token comment" spellcheck="true">// 因此可以说类  是 对象的模具 ， 对象是 类的铸件。</span><span class="token comment" spellcheck="true">// 实例化一个类</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 使用关键字 new 实例化， 实例化出来的是一个对象，该对象有类的属性和方法，方法位于原型上。</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 构造器 constructor (主要的作用是初始化数据)</span><span class="token keyword">class</span> <span class="token class-name">Persons</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age <span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex    <span class="token punctuation">}</span>        <span class="token function">hobbys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">的爱好是...`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 给要实例化的类传入参数， 类中的构造器（constructor）可以接收到参数</span><span class="token operator">**</span><span class="token operator">*</span> <span class="token comment" spellcheck="true">// 至于为什么类的 constructor 能接收到 参数，以后再谈。</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Eric"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 派生类  （用于继承基类的属性 和 方法）</span><span class="token keyword">class</span> <span class="token class-name">Children</span> <span class="token keyword">extends</span> <span class="token class-name">Persons</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当基类的方法不能满足派生类的需求的时候，派生类可以在自己内部 重写基类方法。</span>        <span class="token comment" spellcheck="true">// hobbys</span>        <span class="token comment" spellcheck="true">// console.log('玩游戏')</span>    <span class="token comment" spellcheck="true">//  }</span>    <span class="token punctuation">}</span><span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token string">'xiaoJun'</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 派生类可访问基类的属性和方法， 也可以重写基类的方法</span>child<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">// xiaoJun</span>child<span class="token punctuation">.</span><span class="token function">hobbys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// xiaoJun的爱好是...</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 继承构造器 （当基类的数据不能满足派生类的需求的时候，可继承构造器(相当于super调用了constructor函数),再添加自己需要的）</span><span class="token keyword">class</span> <span class="token class-name">Children</span> <span class="token keyword">extends</span> <span class="token class-name">Persons</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span> eat<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age <span class="token punctuation">,</span> sex<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 继承</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> eat    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 面向对象静态方法</span><span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> user <span class="token operator">=</span> <span class="token string">"Eric"</span>        <span class="token keyword">static</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Worker<span class="token punctuation">.</span>user <span class="token operator">+</span> <span class="token string">'说他的工作是教书'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Worker<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Eric说他的工作是教书</span><span class="token comment" spellcheck="true">// 使用静态方法不需要实例化，因此不用开辟堆栈空间，速度比对象方法快55%。</span><span class="token operator">**</span><span class="token comment" spellcheck="true">// 静态成员不能使用非静态成员，因为使用非静态成员 ，必须实例化！</span><span class="token operator">**</span><span class="token comment" spellcheck="true">// 若要使用，把方法或属性也改成静态的。</span></code></pre><h4 id="暴露和导出的方式"><a href="#暴露和导出的方式" class="headerlink" title="暴露和导出的方式"></a>暴露和导出的方式</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 第一种方式  exports</span><span class="token comment" spellcheck="true">// public1.js </span>exports<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">'admin'</span>exports<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">'123'</span>exports<span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>login <span class="token operator">=</span> <span class="token punctuation">{</span>  username <span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span>  password <span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>fun <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是public1中的fun方法'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// module.js</span><span class="token keyword">const</span> <span class="token keyword">public</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./public1'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">public</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cmd 命令行  node  module<span class="token punctuation">.</span>js 运行 ，可以看到暴露成功</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 第二种方式   module.exports</span><span class="token comment" spellcheck="true">// public2.js </span><span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token string">'123'</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">let</span> login <span class="token operator">=</span> <span class="token punctuation">{</span>  username <span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span>  password <span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">}</span><span class="token keyword">let</span> fun <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是public1中的fun方法'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span>  <span class="token punctuation">{</span>  username<span class="token punctuation">,</span>  password<span class="token punctuation">,</span>  obj<span class="token punctuation">,</span>  login<span class="token punctuation">,</span>  fun<span class="token punctuation">}</span>同module<span class="token punctuation">.</span>js 运行文件，也可以看到运行成功。</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 第三种方式  export 导出，import  失败？？</span><span class="token comment" spellcheck="true">// public3.js</span><span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">'123'</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token punctuation">{</span>  username <span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span>  password <span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">}</span><span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是public1中的fun方法'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>  username<span class="token punctuation">,</span>  password<span class="token punctuation">,</span>  obj<span class="token punctuation">,</span>  login<span class="token punctuation">,</span>  fun<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// module1.js</span><span class="token keyword">import</span> a <span class="token keyword">from</span> <span class="token string">'./public3'</span><span class="token comment" spellcheck="true">// 为什么无法引入</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">**</span><span class="token comment" spellcheck="true">// 在react框架下是可以这样导出并引入的，但这里写demo却失败了，待定...</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 第四种方式</span><span class="token comment" spellcheck="true">// default.js</span><span class="token keyword">const</span> rect <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>  y<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>  fill<span class="token punctuation">:</span><span class="token string">'red'</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> rect<span class="token comment" spellcheck="true">// import.js</span><span class="token keyword">import</span> rect <span class="token keyword">from</span> <span class="token string">'./default'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rect'</span><span class="token punctuation">,</span>rect<span class="token punctuation">)</span><span class="token operator">**</span><span class="token operator">*</span><span class="token comment" spellcheck="true">// 这种方式运行也不行，但在框架中是可行的。因此后面两种无法运行应该是其他原因。</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 面向对象、 文件操作，导出和暴露的方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>严格模式与es5对象的两种扩展</title>
      <link href="2021/07/21/yan-ge-mo-shi-yu-es5-dui-xiang-de-liang-chong-kuo-zhan/"/>
      <url>2021/07/21/yan-ge-mo-shi-yu-es5-dui-xiang-de-liang-chong-kuo-zhan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**严格模式与混杂模式对立，  要尽量避免混杂模式混杂模式(即常规模式)'use strict'使用严格模式后：  1. 声明变量  必须使用变量修饰符  如  var  let  const  , 直接  i = 100 , console.log(i) 会报错，非严格模式不会报错；    2. 八进制必须以0o开头， (如console.log(034) 就是八进制数据，以0开头的，就是八进制数据，javascript默认为八进制数据)；    3. eval函数只能进行简单的数值运算。(而不使用严格模式， eval函数是可以识别多种运算符、和 var,let 等)    4. 严格模式不能删除变量， 而非严格模式可以删除 (var age = 18 , delete age 在非严格模式中可以使用)。    5. 严格模式没有this, 普通函数的this 指向window对象，而启用了严格模式后，this变为undefined。    */</span></code></pre><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><pre class=" language-j"><code class="language-j">JSON 是字符串，独立于语言和平台。具有 高度辨识？ 、体积小、速度快的优点。序列化 ： JSON<span class="token conjunction variable">.</span>stringify<span class="token punctuation">(</span><span class="token punctuation">)</span>  ，内置一个参数<span class="token punctuation">(</span>对象<span class="token punctuation">)</span>反序列化： JSON<span class="token conjunction variable">.</span>parse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token verb keyword">,</span> <span class="token conjunction variable">..</span><span class="token conjunction variable">..</span><span class="token conjunction variable">..</span><span class="token verb keyword">,</span>参数是json串</code></pre><h4 id="es5扩展-新建对象-和-给对象添加属性值-（不常用，只在特定场景下使用）"><a href="#es5扩展-新建对象-和-给对象添加属性值-（不常用，只在特定场景下使用）" class="headerlink" title="es5扩展    新建对象    和   给对象添加属性值 （不常用，只在特定场景下使用）"></a>es5扩展    新建对象    和   给对象添加属性值 （不常用，只在特定场景下使用）</h4><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'Eric'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span><span class="token string">'男'</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    es5 创建对象的方式    包含两个参数，第一个是原型对象，第二个是一个描述    描述是一个对象，对象中属性名所对应的属性值是一个对象，包含四个属性。    这样也是继承了原型对象的属性和方法；可以在新建对象的_proto_看到继承的属性和方法。  */</span>    <span class="token keyword">let</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 四个属性值默认均为false</span>    address<span class="token punctuation">:</span><span class="token punctuation">{</span>      value<span class="token punctuation">:</span><span class="token string">'吉林'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 属性名所对应的值</span>      writable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 是否可修改</span>      configurable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 是否可以删除</span>      enumerable<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// 是否可以枚举</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">.</span>age<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// age 位于原型对象</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">.</span>sex<span class="token punctuation">)</span>  <span class="token keyword">delete</span> newObj<span class="token punctuation">.</span>address  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">.</span>address<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 添加属性， 给obj2 新增 fullName 属性</span>  <span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    firstName <span class="token punctuation">:</span> <span class="token string">'关'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'羽'</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// defineProperties 包含两个参数， 第一个参数为原型对象，第二个为描述。</span>  <span class="token comment" spellcheck="true">// 描述中的键 对应一个对象，对象中有两个方法，分别是get 和 set, 在不同的时机触发。</span>  <span class="token keyword">let</span> addObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token punctuation">{</span>    fullName <span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log('修改了')</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 调用fullName 时触发get方法</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'全名'</span><span class="token punctuation">,</span>addObj<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 关羽  （修改前）</span>    <span class="token comment" spellcheck="true">// 修改时调用set ，set方法支持传入一个参数，这个参数就是新赋的值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>addObj<span class="token punctuation">)</span>  addObj<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">'张飞'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'全名2'</span><span class="token punctuation">,</span>addObj<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 张飞 （修改后）</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 严格模式  对象es5两种扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21-july-18report</title>
      <link href="2021/07/18/21-july-18report/"/>
      <url>2021/07/18/21-july-18report/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Object的三种方法"><a href="#Object的三种方法" class="headerlink" title="Object的三种方法"></a>Object的三种方法</h4><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span>keys 会返回一个数组，数字组中的元素全部为字符串，是对象的键。Object<span class="token punctuation">.</span>values <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>，数组中的元素皆为对象的键所对应的值。Object<span class="token punctuation">.</span>entries 返回一个二维数组，其中的每一个元素为数组，元素数组中包含键名和值两个元素。</code></pre><h4 id="React-Props-类型校验-和默认值指定"><a href="#React-Props-类型校验-和默认值指定" class="headerlink" title="React Props 类型校验 和默认值指定"></a>React Props 类型校验 和默认值指定</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> propTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SvgEditor</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 指定外部传入的数据类型，若不符合指定的数据类型，则给出精确的报错！</span>SvgEditor<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> propTypes<span class="token punctuation">.</span>string<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义默认的props，防止当外部未传入该变量时发生报错。</span>SvgEditor<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>  height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">}</span></code></pre><h4 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 防抖：防止多次触发函数，在一定时间内只能触发一次。</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">//借助闭包</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果正在计时，取消之前的计时(清除定时器)，重新开始计时。</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>         <span class="token punctuation">}</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 其他情况，说明当前并没有在计时，那么就开始一个计时</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 类似于技能冷却   * 在一定时间内已经触发过函数，在该时间段内再次点击或多次点击不能触发函数；   * 除非等事件结束方可再点击   * 但有一个问题，第一次执行函数是有延迟的。  */</span>  btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 点过了就不能再点了</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没点过的情况下，允许点击（触发函数）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        status <span class="token operator">=</span> <span class="token boolean">false</span>   <span class="token comment" spellcheck="true">// 点过后就不能再点了</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'间隔执行'</span><span class="token punctuation">)</span>           status <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment" spellcheck="true">// 在一定时间后，允许点击</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>June20</title>
      <link href="2021/06/20/june20/"/>
      <url>2021/06/20/june20/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-css文字隐藏，hover上去显示全部。"><a href="#1-css文字隐藏，hover上去显示全部。" class="headerlink" title="1. css文字隐藏，hover上去显示全部。"></a>1. css文字隐藏，hover上去显示全部。</h4><p>有些时候文字太长，但布局规定的范围可能给不了那么长，因此需要值显示一部分，hover的时候再显示全部。</p><p>其实这个操作已经有了，不需要我们再操作的，通过下面的代码就能实现，不需要写多余的代码。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我爱夏天的风，冬天的雪，夏天的雨，和你的眼眸。<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我爱夏天的风，冬天的雪，夏天的雨，和你的眼眸。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-CSS"><code class="language-CSS">p{    width:40px;    text-overflow: ellipsis;    white-space: nowrap;    overflow: hidden;    background: brown;    font-size: 12px;    color: white;}</code></pre><p>补充： 其实也可以自己写，但这样就会有两个hover显示全部文字了。</p><p>利用属性选自器和伪元素，为伪元素的content设置 attr(title)。</p><pre class=" language-css"><code class="language-css"><span class="token selector">p<span class="token attribute">[title]</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p<span class="token attribute">[title]</span><span class="token pseudo-element">::before</span></span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#F2F2F2</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#E5E5E5</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">2</span>px <span class="token number">4</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">56</span>,<span class="token number">62</span>,<span class="token number">71</span>,<span class="token number">0.10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">2</span>px <span class="token number">6</span>px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">13</span>px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#202332</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">106</span>px<span class="token punctuation">;</span> // 设置位置  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span> // 设置位置  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">90%</span><span class="token punctuation">;</span>  <span class="token property">word-break</span><span class="token punctuation">:</span> break-word<span class="token punctuation">;</span> // 如果一个单词太长，则截断  CSS 属性 word-break 指定了怎样在单词内断行。  <span class="token property">white-space</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>// 可以换行  white-space CSS 属性是用来设置如何处理元素中的空白。<span class="token punctuation">}</span></code></pre><h4 id="2-amp-amp-与-条件-if"><a href="#2-amp-amp-与-条件-if" class="headerlink" title="2.  &amp;&amp; 与 条件 if"></a>2.  &amp;&amp; 与 条件 if</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**从接口拿到的数据，一般要判断指针，避免空指针异常。在渲染时  list &amp;&amp; list.map( v => {} ) 如果list的值为 undefined 、 null 、 '' ,false, 后面的语句不会map。也可以这么写。 */</span><span class="token punctuation">(</span> list  <span class="token operator">?</span> list <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/**上面这种方式会在list的值为空时( undefined 、 null 、 '' ,false),取空数组。空数组map,map中的回调函数不会执行！ map和foreach一样，被遍历数组有几个元素，回调执行几次，反之一个元素都没有，那么回调一次都不执行。在if判断时，   如果list的值为undefined 、 null 、 '' ,false, 则不执行该条件语句*/</span><span class="token keyword">if</span><span class="token punctuation">(</span> list <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**无论是 list &amp;&amp; list.map 或是 ( list  ? list : []).map( v => {}) 都只能判断值不为 undefined 、 null 、 '' ,false 的情况。如果数据是一个空对象，是满足不为四种情况的，因此都会map，而此时空对象map就会报错，因为对象没有map方法。ps : 一般遍历数据，基本上对数据结构很清楚，因此不需要做过多限制，而有时在没数据或其他情况下，对一个数据进行map， 即使有了 list &amp;&amp; list.map 或是 ( list  ? list : []).map( v => {}) 这样的操作也是会报错的，因为数据格式不是一个数组，而我们又没有对遍历数据做遍历前的限制。*/</span><span class="token comment" spellcheck="true">// 当map 不是一个数组时可能会报的错</span>xx<span class="token punctuation">.</span>map is not defined xx<span class="token punctuation">.</span>map is not a <span class="token keyword">function</span><span class="token comment" spellcheck="true">// 限制遍历数据的  限制(一定为一个数组时遍历，其他情况不遍历)</span><span class="token comment" spellcheck="true">// Array.isArray(list) 检测数据是否为数组，若是，返回true（包含空数组）</span>list <span class="token operator">&amp;&amp;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="3-Ant-Design-Table-可设置最大高度"><a href="#3-Ant-Design-Table-可设置最大高度" class="headerlink" title="3. Ant-Design     Table 可设置最大高度"></a>3. Ant-Design     Table 可设置最大高度</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 经这样一操作， table 有了一个最大高maxHeight 和overflowY</span><span class="token comment" spellcheck="true">// x ,y (横向、纵向滚动，也可用于指定滚动区域的宽、高)</span><span class="token keyword">const</span> getHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> heights <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">queruSelect</span><span class="token punctuation">(</span><span class="token string">'.abc'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> heights<span class="token punctuation">.</span>offsetHeight <span class="token operator">?</span> heights<span class="token punctuation">.</span>offsetHeight  <span class="token operator">-</span> <span class="token number">150</span> <span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>Table<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">...</span><span class="token operator">...</span>scroll<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> y <span class="token punctuation">:</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        待续<span class="token operator">...</span></code></pre><h4 id="4-mobx-使用心得"><a href="#4-mobx-使用心得" class="headerlink" title="4. mobx 使用心得"></a>4. mobx 使用心得</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**组件通信通过props传值，子组件 通过this.props || props 接收，这样麻烦而且有一些局限性。而mobx 就是一个store, 类似数据处、存储库的东西，你完全可以把接口拿到的数据在mobx中处理好，然后直接传给jsx。mobx中的 @oberserver 就好比声明了一个变量，初始值是一个定值，这并不重要。@action 动作，其实就是函数，能做一些事情，用它通常用来变更定义的 @oberserver， 实现一些功能 ，因此你经常会看到这样的定义 ：*/</span> @oberserver list <span class="token operator">=</span> <span class="token string">'aaa'</span> @action addNameList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// list是 @oberserver定义的变量</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**以上方法是使用了装饰器的方法通常定义mobx ，需要写一个class , 在class 中 定义一些 @oberserver 和 @action，在暴露文件时，要new一下这个暴露的class ，在store文件建一个index.jsx 引入并再次暴露这些 定义的class 。在jsx 文件需要注入并监听注入的变量。 注入 @inject("Dbc")   @obsrever (若store的值发生了变化则自动更新该jsx文件的值)使用一个store (class) 中的变量和函数，需要引入，*/</span><span class="token keyword">const</span> <span class="token punctuation">{</span>addNameList <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>Dbc<span class="token comment" spellcheck="true">// 对于使用了react hooks的函数组件，需要使用mobx6。</span></code></pre><h4 id="5-如何处理不同类型的信息版"><a href="#5-如何处理不同类型的信息版" class="headerlink" title="5. 如何处理不同类型的信息版"></a>5. 如何处理不同类型的信息版</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**有些时候需要展示字段完全不同的信息版，这时写多种版面是费力且难写的。此时我们就需要将switch 封装成一个函数，return 不同的数据就好了。*/</span><span class="token comment" spellcheck="true">// util.js</span><span class="token keyword">const</span> getInforMation <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> InfoContent         <span class="token keyword">switch</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"1"</span> <span class="token punctuation">:</span>         InfoContent <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> item<span class="token punctuation">.</span>name<span class="token punctuation">,</span>            value<span class="token punctuation">:</span> item<span class="token punctuation">.</span>value        <span class="token punctuation">}</span><span class="token punctuation">]</span>          breake <span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"2"</span> <span class="token punctuation">:</span>         InfoContent <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> item<span class="token punctuation">.</span>name<span class="token punctuation">,</span>            value<span class="token punctuation">:</span> item<span class="token punctuation">.</span>value        <span class="token punctuation">}</span><span class="token punctuation">]</span>          breake <span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> InfoContent<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Demo.jsx</span><span class="token keyword">import</span> <span class="token punctuation">{</span>    getInforMation<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./util.js'</span><span class="token keyword">const</span> renderifferentPanel <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> lists <span class="token operator">=</span> <span class="token function">getInforMation</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> lists<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div         className<span class="token operator">=</span><span class="token string">"lists"</span>        key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span>        <span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> panles <span class="token operator">=</span> <span class="token punctuation">(</span>datas<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">renderifferentPanel</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token operator">...</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">{</span>val<span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 返回视图</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 补充： 需要在不同的类型下展示不同的页面效果。</span><span class="token comment" spellcheck="true">// 思路: 根据数值来判断！</span><span class="token keyword">const</span> panles <span class="token operator">=</span> <span class="token punctuation">(</span>datas<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">renderifferentPanel</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'panles'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'vids'</span><span class="token punctuation">,</span>datas<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'5'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token punctuation">{</span>datas <span class="token operator">&amp;&amp;</span> datas<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">'5'</span> <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>datas<span class="token punctuation">.</span>Ip<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// type 为 5 时显示</span>    <span class="token operator">...</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">{</span>val<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.panles</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">heigth</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.vids</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="6-有时在请求某些视频时，需要先握手"><a href="#6-有时在请求某些视频时，需要先握手" class="headerlink" title="6. 有时在请求某些视频时，需要先握手"></a>6. 有时在请求某些视频时，需要先握手</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**实际上是在请求视频数据的接口后，在请求成功的情况下， 再发起一次axios请求（需要传递特定的参数）。握手成功，返回视频流数据，若无此次握手，只返回普通数据，不返回视频流？*/</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数组对象</title>
      <link href="2021/06/06/shu-zu-dui-xiang/"/>
      <url>2021/06/06/shu-zu-dui-xiang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h4><pre class=" language-js"><code class="language-js">与普通对象功能类似，也是用来存储一些值的。不同之处在于，普通对象以字符串作为属性名，而数组使用（下标）索引来操作元素。索引：从零开始的整数。一个索引来对应一个值，这叫一个元素。数组存储性能比对象好，因此在开发中经常使用。</code></pre><h5 id="创建数组对象"><a href="#创建数组对象" class="headerlink" title="创建数组对象"></a>创建数组对象</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// []</span>向数组添加元素arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hello'</span>  <span class="token comment" spellcheck="true">// console.log(arr1[0])  hello ---> string</span>如果读取不存在的下标，不会报错，而是会返回undefined，就像的确不存在的对象属性也不会报错，也会报undefined一样。数组长度：数组<span class="token punctuation">.</span>length  <span class="token comment" spellcheck="true">// arr.length</span>若是不连续的数组，length会获取最大的索引<span class="token operator">+</span><span class="token number">1</span>。arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"1"</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"2"</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"3"</span>  尽量不要创建非连续数组。修改数组length 属性，若修改length大于原长度，多出的会显示empty<span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 4 [1, 3, 5, empty]</span>若修改的length小于原长度，值保留对应长度的，多余的会被删除。因此可用length来删除一些元素</code></pre><pre class=" language-js"><code class="language-js">向数组最后位置添加一个元素arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"70"</span>  为什么使用arr<span class="token punctuation">.</span>length可以向最后的位置添加？length是最大的索引（index） <span class="token operator">+</span> <span class="token number">1</span>，所以 arr<span class="token punctuation">.</span>length 意为最大的索引 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>也就是增加一项。（下一位索引）</code></pre><h5 id="数组字面量"><a href="#数组字面量" class="headerlink" title="数组字面量"></a>数组字面量</h5><pre class=" language-js"><code class="language-js">语法 ： <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>与 <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>一样，但字面量创建的更加简单！向数组arr<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token string">"123"</span> 是完全正确的，但这样没有任何意义，数组最大的特点便是下标（索引）。使用数组字面量的方式创建数组，可以在创建时就指定数组中的元素。  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>使用构造函数创建函数<span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [10, 20, 30]</span>不同：arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 创建一个数组，里面只有一个元素（10）</span>arr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 创建一个长度为10 的数组</span></code></pre><pre class=" language-js"><code class="language-js">数组中的元素可以是任意数据类型，亦可以是对象。例如： <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token punctuation">:</span> <span class="token string">"wind"</span><span class="token punctuation">}</span>         <span class="token keyword">let</span> arr5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'length----->'</span><span class="token punctuation">,</span>arr5<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span>     arr5<span class="token punctuation">[</span>arr5<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> obj     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [{...}]</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 1</span>也可以是函数：     <span class="token keyword">let</span> arr7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'11111'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span>         arr7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用</span>亦可以是数组 ：     <span class="token keyword">let</span> arr9 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr9<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//  [4, 8, 10]</span></code></pre><h5 id="数组四方法"><a href="#数组四方法" class="headerlink" title="数组四方法"></a>数组四方法</h5><pre class=" language-js"><code class="language-js">push ：向数组的末尾添加一个或多个元素，并返回数组新长度。返回值为数组新长度。pop ： 删除数组最后一个元素，返回值是被删除元素。Unshift ：向数组开头添加一个或多个元素并返回新的长度，插入元素，后面的元素索引依次调整。shift ：删除数组第一个元素，将被删除元素作为返回值。</code></pre><h5 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h5><pre class=" language-js"><code class="language-js">遍历就是将数组中所有元素取出来。    <span class="token keyword">let</span> arr10 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr10<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'item----->'</span><span class="token punctuation">,</span>arr10<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>数组遍历之forEach<span class="token punctuation">:</span>forEach 以一个函数为参数，它的参数就是回调函数，回调函数我们并没有调，而是浏览器调了。arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>数组有几个元素，函数就会执行几次，每次执行浏览器会将遍历的元素以实参形式传递进来。浏览器向该回调函数传递了三个参数：第一个参数为数组的每一项，第二个参数为每一项的下标，第三个参数为正在遍历的数组。arr10<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1111'</span><span class="token punctuation">,</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>实参列表<span class="token punctuation">.</span>html<span class="token punctuation">:</span><span class="token number">55</span> <span class="token number">1111</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>实参列表<span class="token punctuation">.</span>html<span class="token punctuation">:</span><span class="token number">55</span> <span class="token number">1111</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>实参列表<span class="token punctuation">.</span>html<span class="token punctuation">:</span><span class="token number">55</span> <span class="token number">1111</span> <span class="token number">4</span> <span class="token number">2</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>实参列表<span class="token punctuation">.</span>html<span class="token punctuation">:</span><span class="token number">55</span> <span class="token number">1111</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>实参列表<span class="token punctuation">.</span>html<span class="token punctuation">:</span><span class="token number">55</span> <span class="token number">1111</span> <span class="token number">7</span> <span class="token number">4</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>实参列表<span class="token punctuation">.</span>html<span class="token punctuation">:</span><span class="token number">55</span> <span class="token number">1111</span> <span class="token number">8</span> <span class="token number">5</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span></code></pre><h5 id="数组方法slice-splice"><a href="#数组方法slice-splice" class="headerlink" title="数组方法slice,splice"></a>数组方法slice,splice</h5><pre class=" language-js"><code class="language-js">slice 包含两个参数，第一个参数为开始下标（包括开始索引），第二个参数为结束下标（不包括结束索引）。只写一个参数，会截取以开始到后面所有的。slice不会影响原数组。如果传递一个负值，则从后往前计算。splice会影响原数组，会将指定元素从数组删除，并将被删除元素作为返回值返回。包含三个参数，第一个参数表示开始位置索引，第二个参数表示删除数量，第三个参数可传递一些新元素，会自动插入开始位置前。</code></pre><h5 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h5><pre class=" language-js"><code class="language-js">待续。。。</code></pre><h5 id="数组其他方法"><a href="#数组其他方法" class="headerlink" title="数组其他方法"></a>数组其他方法</h5><pre class=" language-js"><code class="language-js">concat<span class="token function">合并数组，concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>中除可以传数组，也可以传单个元素。arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token string">"牛恒"</span><span class="token punctuation">)</span>join将数组所有元素放入字符串，不会影响原数组，而是将转换的字符串作为结果返回。<span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>括号中可指定一个字符作为元素的连接符。reverse反转数组sort对数组进行排序，会影响原数组。按unicode编码进行排序，小的在前，大的在后，abc在前，efd在后。排序数字：排序数字也是按照unicode编码排序，但可能得到错误的结果arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [11, 3, 4, 5, 7]</span>指定排序规则可在sort中添加一个回调函数，浏览器会分别使用数组中的元素作为实参去调用回调函数。arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/**得到： "a = 5" "b = 4" "a = 4" "b = 3"*/</span>使用哪个元素调用不太确定，但确定的是<span class="token punctuation">,</span>在数组中a一定在b的前面。浏览器会根据函数的返回值来决定元素的顺序。若返回一个大于<span class="token number">0</span>的值，则元素交换位置。若返回一个小于<span class="token number">0</span>的值，则元素位置不变。若返回一个<span class="token number">0</span>，则认为两元素相等，也不交换位置。<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>简写 ：升序 <span class="token keyword">return</span> a <span class="token operator">-</span> b降序 retun b <span class="token operator">-</span> a</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数组对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>May30</title>
      <link href="2021/05/30/may30/"/>
      <url>2021/05/30/may30/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><h4 id="在运行前-先确定有没有保存，如果没有保存，保存，或者干脆设为自动保存。"><a href="#在运行前-先确定有没有保存，如果没有保存，保存，或者干脆设为自动保存。" class="headerlink" title="在运行前 先确定有没有保存，如果没有保存，保存，或者干脆设为自动保存。"></a>在运行前 先确定有没有保存，如果没有保存，保存，或者干脆设为自动保存。</h4></li><li><h4 id="记得连接N网。"><a href="#记得连接N网。" class="headerlink" title="记得连接N网。"></a>记得连接N网。</h4></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 错误总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向、构造函数</title>
      <link href="2021/05/27/this-zhi-xiang-gou-zao-han-shu/"/>
      <url>2021/05/27/this-zhi-xiang-gou-zao-han-shu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="函数的this指向"><a href="#函数的this指向" class="headerlink" title="函数的this指向"></a>函数的this指向</h4><pre class=" language-js"><code class="language-js">解析器（浏览器）每次调用函数都会向函数传递一个隐含的参数，这个参数就是<span class="token keyword">this</span>。<span class="token keyword">this</span>指向的是一个对象，这对象我们称为函数指向的上下文对象。根据函数的调用方式的不同，<span class="token keyword">this</span>会指向不同的对象。普通函数 ：<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    conole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 指向window</span><span class="token punctuation">}</span>对象的方法： <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Eric'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>sayname <span class="token operator">=</span> fn1调用 <span class="token punctuation">:</span> obj<span class="token punctuation">.</span><span class="token function">sayname</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 指向此对象</span>总结 <span class="token punctuation">:</span> 以函数形式调用，指向window<span class="token punctuation">;</span>以方法形式调用<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>object <span class="token punctuation">(</span><span class="token keyword">this</span>指向该调用方法所属的对象<span class="token punctuation">)</span><span class="token punctuation">;</span>谁调指谁。构造函数的<span class="token keyword">this</span>指向 新建的对象（实例对象）</code></pre><pre class=" language-js"><code class="language-js">工厂模式创建的对象，使用的都是Object构造函数   <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>这就导致无法区分不同种类的对象，类型一样没有区别。（还不是很理解）</code></pre><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><pre class=" language-js"><code class="language-js">构造函数就是一个普通函数，与普通函数创建方式一样，但构造函数一般首字母大写。<span class="token keyword">function</span> Persion <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>构造函数与普通函数的区别就是调用方式不同。普通函数时直接调用，而构造函数 <span class="token operator">**</span><span class="token operator">*</span>需要使用<span class="token keyword">new</span>关键字<span class="token operator">**</span><span class="token operator">*</span> <span class="token punctuation">(</span>加<span class="token keyword">new</span>为构造函数，不加为普通函数<span class="token punctuation">)</span>；<span class="token keyword">var</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// console.log(tyepeof(per))   object</span></code></pre><h5 id="构造函数顺序"><a href="#构造函数顺序" class="headerlink" title="构造函数顺序"></a>构造函数顺序</h5><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">)</span> 立刻创建一个对象于堆内存（实例对象） 就像 <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、 <span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">)</span> 将新建对象设为函数中的<span class="token keyword">this</span><span class="token punctuation">,</span>构造函数中的<span class="token keyword">this</span>指向该对象；<span class="token number">3</span>）逐行运行函数中的代码；<span class="token number">4</span>）将新建对象作为返回值返回。</code></pre><h6 id="构造函数可以传参"><a href="#构造函数可以传参" class="headerlink" title="构造函数可以传参"></a>构造函数可以传参</h6><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> Persion <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">}</span><span class="token keyword">let</span> per1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token string">"Eric"</span><span class="token punctuation">)</span><span class="token keyword">let</span> per2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token string">"Rose"</span><span class="token punctuation">)</span>使用同一构造函数创建的对象称为一类对象，也将一个构造函数叫类。使用<span class="token keyword">instanceof</span> 可以检查一个对象是否是一个类的实例。  <span class="token comment" spellcheck="true">// console.log(per1 instanceof Persion)  true</span>补充： 所有对象都是Object的后代， 任何对象  <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> 都是<span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><h6 id="构造函数的方法"><a href="#构造函数的方法" class="headerlink" title="构造函数的方法"></a>构造函数的方法</h6><pre class=" language-js"><code class="language-js">构造函数的方法可放在全局，而不用在构造函数内部创建，就像一个厕所大家用，而不是一人一个厕所。但是这样有一个问题，就是会污染全局作用域。放在全局也不安全，可能两个变量名冲突，也可能被修改，所以不安全。</code></pre><h6 id="函数的原型"><a href="#函数的原型" class="headerlink" title="函数的原型"></a>函数的原型</h6><pre class=" language-js"><code class="language-js"><span class="token function">每个函数都有prototype</span><span class="token punctuation">(</span>原型对象<span class="token punctuation">)</span>，无论是普通函数还是构造函数都有这个对象，原型是解析器（浏览器）加的。每个函数的原型都不一样。如果函数作为普通函数调用，那么构造函数没有任何作用。构造函数创建对象（实例对象）的__proto__指向构造函数的原型对象。__proto__是新建对象的隐含属性。</code></pre><h6 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h6><pre class=" language-js"><code class="language-js">原型对象像一个公共场地，所有该类实例对象都可以访问到这个对象，因此我们可以将对象中共有的内容同一设置到原型对象中。原型是这一类的原型。原型对象也是对象，它也有原型。</code></pre><h6 id="查找机制"><a href="#查找机制" class="headerlink" title="查找机制"></a>查找机制</h6><pre class=" language-js"><code class="language-js">访问一个实例对象的属性或方法时，会现在自身找，如有则直接使用。没有则回去原型兑现中找，找到则直接使用。原型中没有找到，就去原型的原型中找，直到Object</code></pre><h6 id="hasOwnprototype-方法"><a href="#hasOwnprototype-方法" class="headerlink" title="hasOwnprototype() 方法"></a>hasOwnprototype() 方法</h6><pre class=" language-js"><code class="language-js">使用<span class="token keyword">in</span>查找对象中有无某个属性，若对象中没有，但原型中有，也会返回<span class="token boolean">true</span><span class="token punctuation">,</span>这样用<span class="token keyword">in</span>就不行了。mc<span class="token punctuation">.</span><span class="token function">hasOwnprototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 检查自身是否有某个属性，此方法只有对象自身有该属性才会返回<span class="token boolean">true</span>。mc<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ 原型的原型  <span class="token comment" spellcheck="true">// 一般是两层</span>mc<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__（Object 总： 它没有原型）<span class="token punctuation">.</span>__proto__   <span class="token comment" spellcheck="true">// Object没有原型,因此结果为 null</span>实例的__proto<span class="token punctuation">.</span>____proto__ 第二个就是Object <span class="token punctuation">,</span>它没有原型。</code></pre><h6 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h6><pre class=" language-js"><code class="language-js">打印一个对象，相当于打印了 per<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Object] 现在似乎不是这样了</span>    <span class="token keyword">var</span> abc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    abc<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"jiji"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// {name: "jiji"}</span>per<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">hasOwnprototype</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// true</span>若不希望出现 <span class="token punctuation">[</span>object Object<span class="token punctuation">]</span> ，可以 per<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是大帅哥'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>将 per<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 放于原型更好。补充： 拼串， <span class="token operator">+</span><span class="token string">" : "</span> <span class="token operator">+</span>  或 <span class="token string">"+ this.name  +"</span> 都可。</code></pre><h6 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h6><pre class=" language-js"><code class="language-js">生活时间长了会产生生活垃圾，同理程序运行时间长了也会产生垃圾。这些垃圾过多会让程序运行变慢，因此，我们需要一个垃圾回收机制，来处理程序运行过程中的垃圾<span class="token operator">**</span><span class="token operator">*</span>什么是垃圾<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>obj <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 切断栈空间地址和堆空间内存的联系</span>概念： 当一个对象没有任何变量或属性值能对它引用，此时我们永远无法操作该对象！ 这种对象就是垃圾，因为它仍占用堆内存空间。这种对象过多会占用大量内存空间，导致程序运行变慢，甚至内存溢出（卡死程序）<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>程序死了。现代Js有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们无需也不能进行垃圾回收的操作。<span class="token operator">**</span> 我们要做的就是 将这些不再使用的的对象  设为 <span class="token keyword">null</span>。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> this指向、构造函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>May24</title>
      <link href="2021/05/24/may24/"/>
      <url>2021/05/24/may24/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-关于react中使用less"><a href="#1-关于react中使用less" class="headerlink" title="1. 关于react中使用less"></a>1. 关于react中使用less</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**在网上试了很多方法，都没有作用。最后，用了一种办法，在vs-code写less,引入的时候引入css文件，less中定义颜色的方法和嵌套随你写。@red-color : red ;*/</span></code></pre><h4 id="2-关于判断一段值是否为undefined"><a href="#2-关于判断一段值是否为undefined" class="headerlink" title="2. 关于判断一段值是否为undefined"></a>2. 关于判断一段值是否为undefined</h4><pre class=" language-js"><code class="language-js">例如一个字段为  alartItem（object） <span class="token punctuation">,</span>它所包含的字段可能有值，也可能值为undefined，也可能值<span class="token keyword">null</span><span class="token punctuation">,</span>那么我们就需要进行判断，不能使undefined值报出来。    <span class="token keyword">let</span> alarmItem <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token punctuation">:</span> <span class="token string">"我"</span><span class="token punctuation">,</span> tiems<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>    如果 alarmItem<span class="token punctuation">.</span>name 有值，不含undefined、<span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token boolean">false</span>，执行 <span class="token operator">?</span> 后面的打印这段话。反之执行 <span class="token punctuation">:</span>得到 <span class="token keyword">null</span> ，<span class="token keyword">null</span>  下面的<span class="token keyword">if</span> 语句不执行！console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>alarmText<span class="token punctuation">)</span> 打印为<span class="token keyword">null</span>。        <span class="token keyword">let</span> alarmText <span class="token operator">=</span> <span class="token punctuation">(</span>alarmItem <span class="token operator">&amp;&amp;</span> alarmItem<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token template-string"><span class="token string">`阳光明媚的春天,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>alarmItem<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">去了苏州园林、北塔寺。苏州的温婉，徐徐清风沁人心脾。以后若有机会可还要再去</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>alarmItem<span class="token punctuation">.</span>times <span class="token operator">||</span> <span class="token number">0</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 次。`</span></span><span class="token punctuation">:</span> <span class="token keyword">null</span> （没有times字段， 则取<span class="token number">0</span>）    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>alarmText<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>alarmText<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果有值，不含undefined、null, '',false，执行此条件语句,反之不执行！</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'11111'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-echarts配置项轻点"><a href="#3-echarts配置项轻点" class="headerlink" title="3. echarts配置项轻点"></a>3. echarts配置项轻点</h4><pre class=" language-js"><code class="language-js">tooltip是鼠标悬浮的相关配置项grid是echarts距离上下左右 的距离，还包含其他属性，此处浅谈。xAxis 、yAxis分别代表x<span class="token punctuation">,</span>y轴， type表示坐标轴类型  <span class="token string">'value'</span> 数值轴，适用于连续数据。（y轴可能用的多）  <span class="token string">'category'</span> 类目轴，适用于离散的类目数据。为该类型时类目数据可自动从 series<span class="token punctuation">.</span>data 或 dataset<span class="token punctuation">.</span>source 中取，或者可通过 xAxis<span class="token punctuation">.</span>data 设置类目数据。（x轴设置此属性，要给一个data数组以在x轴显示）  <span class="token string">'time'</span> 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。 （此二种暂未用到）  <span class="token string">'log'</span> 对数轴。适用于对数数据。axisLine <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> 坐标轴轴线相关设置，可设置 lineStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>              color<span class="token punctuation">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> 很多线段相关的社会都有lineStyle这个属性，里面的属性设置也大致相同。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反思总结</title>
      <link href="2021/05/21/fan-si-zong-jie/"/>
      <url>2021/05/21/fan-si-zong-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-Js变量名如果太相近，容易引用错误且不易发现错误！"><a href="#1-Js变量名如果太相近，容易引用错误且不易发现错误！" class="headerlink" title="1. Js变量名如果太相近，容易引用错误且不易发现错误！"></a>1. Js变量名如果太相近，容易引用错误且不易发现错误！</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">AAA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token keyword">const</span> <span class="token punctuation">[</span>dataList<span class="token punctuation">,</span> setDataList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token comment" spellcheck="true">// 数据请求方法</span><span class="token keyword">const</span> getDataMethods <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> datasList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       datasList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token comment" spellcheck="true">// 渲染</span><span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 为什么会出错？ 不知道起什么变量名，在给变量赋值时简单写了一个变量名（为了图方便），就有了后面的错误。</span>    <span class="token comment" spellcheck="true">// 错误的引用即便 原本的dataList是一个数组，这里的datasList也是is not defined 且拿不到length属性，也没有[0]这一项。</span>    <span class="token comment" spellcheck="true">// 所以这里的三项判断完全没有作用！ 这就是变量名太相近的危害！出了错误也不易被发现。</span>    <span class="token comment" spellcheck="true">// 建议将变量名 以英文全量组合而成，这样可能名字很长，但却不易出错！</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>datasList <span class="token operator">&amp;&amp;</span> datasList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> datasList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>        dataList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>v<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>                 <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>v<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                 <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>v<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                 <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>v<span class="token punctuation">.</span>sex<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><pre class=" language-tex"><code class="language-tex">补充：为什么判断不是一个空数组要用 datasList && datasList.length > 0 && datasList[0] !== undefined第一个  datasList 表示 datasList存在且定义了；第二个  datasList.length > 0 表示数组的长度大于零，只有数组，字符串才有length属性！，布尔值的length为undefined，let arr = true; arr.lenght // undefinedundefined和null数据类型的length都会报错。let arr = undefined ;arr.lenght // 报错let arr = null ; arr.length     // 报错对象不加length，length属性为undefined；let obj = new Object(); obj.name = "牛恒"; obj.age = 30 ; obj.sex = "男"; obj.length // undefined函数的length根据形参（和内部定义的变量？？）决定let fn = function(a,b, c) {let d};  // fn.length  ---> 3,let 声明的变量并没有算到length第三个 判断是否不是一个空数组，不能使用 let arr = [];if(arr !== []){} 的做法，即便arr确实是空数组，它也绝对不等于 []，因为二者都是引用数据类型，空间地址不一样，怎么比都不一样，因此要使用 arr[0] !== undefined的方法； 如果arr不为空数组，那么它的第一项就不是undefined,反之，如果arr是空数组，那么它的第一项是不存在的，是为undefined。</code></pre><h4 id="2-写代码要先心中有一幅画-（想好，想的差不多）"><a href="#2-写代码要先心中有一幅画-（想好，想的差不多）" class="headerlink" title="2. 写代码要先心中有一幅画 （想好，想的差不多）"></a>2. 写代码要先心中有一幅画 （想好，想的差不多）</h4><pre class=" language-tex"><code class="language-tex">前言：如果完全没有思路或者思路根本不清晰就去写代码，那基本是写一点错一点，写一点就要改。这样的代码写出来不仅就非常费劲，而且后面业务一变说不定 之前的逻辑就完全用不了了，简而言之就是 没有想好就去写代码难写且极难维护，久而久之开发人员也容易失去信息和对工作的兴趣，可见危害之大！</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 反思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js总结2对象函数</title>
      <link href="2021/05/20/js-zong-jie-2-dui-xiang-han-shu/"/>
      <url>2021/05/20/js-zong-jie-2-dui-xiang-han-shu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-对象"><a href="#1-对象" class="headerlink" title="1. 对象"></a>1. 对象</h4><pre class=" language-json"><code class="language-json">已经有了五种数据类型，为什么我们还需要对象？基本数据类型值单一，值与值之间没有联系（不是一个整体）对象的作用就是**将多个值放在一起，批量操作；对象属于复合数据类型，可保存多个不同数据类型的属性，就像一个袋子。</code></pre><h5 id="1-2）对象的类型"><a href="#1-2）对象的类型" class="headerlink" title="1-2）对象的类型"></a>1-2）对象的类型</h5><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 内建对象由Es标准中定义的对象，在任何Es实现中都可以使用 例如：​    Math、String、Number、Boolean、Function<span class="token punctuation">,</span>Object问题<span class="token punctuation">:</span>String、Number、Boolean数据类型与String、Number、Boolean内建对象有何区别？</code></pre><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 宿主对象由Js环境提供的对象，目前主要指由浏览器提供的对象。例如： BoM<span class="token punctuation">,</span>Dom<span class="token punctuation">;</span> console<span class="token punctuation">.</span>log就是一个对象，document<span class="token punctuation">.</span>write也是一个对象，这个两者都由浏览器提供。</code></pre><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 自定义对象  （开发人员自己创建的对象）<span class="token comment" spellcheck="true">// 使用new关键字调用的函数，是构造函数constructor; ；构造函数时专门用来创建对象的。</span>创建对象： <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>添加属性： obj<span class="token punctuation">.</span>name<span class="token operator">=</span> <span class="token string">"Eric"</span>  ； 对象改值与添加一样的。注意： 读取对象中没有的属性，不会报错，而是undefined<span class="token operator">!</span>删除对象属性： <span class="token keyword">delete</span>  obj<span class="token punctuation">.</span>name</code></pre><pre class=" language-js"><code class="language-js">  对象属性名，属性值  对象属性名不强制要求遵守标识符规范，什么乱七八糟的命都可以，但还是尽量按标识符的规范去做。使用特殊属性名、语法，不能例如 obj<span class="token number">.123</span>正确写法： Obj<span class="token punctuation">[</span><span class="token string">"123"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">789</span>  <span class="token punctuation">;</span> obj<span class="token punctuation">[</span><span class="token string">"@#^%GK"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>使用<span class="token punctuation">[</span><span class="token punctuation">]</span>操作对象属性，更加灵活，<span class="token punctuation">[</span><span class="token punctuation">]</span>可传变量，例如<span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">,</span>这样可以随时更改， console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">  对象属性值  对象的属性值可以是任意的数据类型，甚至可以是一个对象。例如： <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      obj<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      obj<span class="token punctuation">.</span>test <span class="token operator">=</span> undefined<span class="token punctuation">;</span>      <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      obj<span class="token punctuation">.</span>test <span class="token operator">=</span> obj2  <span class="token comment" spellcheck="true">// 袋中袋</span>      对象中没有的属性不报错，而是undefined<span class="token punctuation">,</span>那么如何检查一个对象中是否有指定属性？console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test"</span> <span class="token keyword">in</span> obj <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 有返回true, 无返回false</span></code></pre><pre class=" language-js"><code class="language-js">   深浅拷贝   浅拷贝针对于引用数据类型（复杂数据类型Object （object<span class="token punctuation">,</span>array<span class="token punctuation">,</span> <span class="token keyword">function</span>））浅拷贝原因<span class="token punctuation">:</span> 只拷贝了堆空间地址，而未开辟新的内存空间，两处堆内存空间地址指向一处 堆内存空间。一处变化，另一个跟着变化。为什么叫引用数据类型？ 对象保存在堆空间当中，栈空间只保存了变量名和 <span class="token function">指向堆内存空间的地址，变量名和堆空间由地址建立联系。</span><span class="token punctuation">(</span>地址即引用<span class="token punctuation">)</span>每当<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>就在堆空间开辟了内存空间。两个堆内存空间，即使里面的值一模一样他们也不相同，因为空间地址不一样。<span class="token operator">**</span>基本数据类型直接在栈空间存储，变量值是对立存在的，修改一个值，对其他值没有任何影响。<span class="token operator">**</span><span class="token operator">*</span> 比较基本数据类型，比较的是值；（基本在栈中存<span class="token operator">-</span><span class="token operator">></span>值）    比较引用数据类型，比较的是空间地址。即便里面的东西一样但内存地址不一样，那还是不一样！（引用在栈中存<span class="token operator">-</span><span class="token operator">></span>空间地址）</code></pre><pre class=" language-js"><code class="language-js">  对象字面量  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">[</span>object object<span class="token punctuation">]</span>；使用<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 与<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 本质上一样；对象字面量的属性，引号可以不加，也建议不加，若使用奇怪的名，必须加！名和值用：分隔，多个属性用逗号隔开；</code></pre><h4 id="2-函数-（也是对象）"><a href="#2-函数-（也是对象）" class="headerlink" title="2. 函数 （也是对象）"></a>2. 函数 （也是对象）</h4><p><strong>除基本数据类型，剩下的都是对象</strong></p><pre class=" language-js"><code class="language-js">普通的对象只能装东西，而函数却还能封装一些功能，在需要时执行这些功能（代码）；封装的函数一定程度上简化了代码量；封装： 存起来，用的时候（调用）很简单；<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 将要封装的代码，以字符串形式传递给构造函数；<span class="token comment" spellcheck="true">// ??不太明白</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 封装的函数不会立即执行，调用时执行；<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 调用 <span class="token function">：fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ；调用时，函数中的代码以顺序执行；</code></pre><pre class=" language-js"><code class="language-js"><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>）创建一个对象<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 构造函数创建对象<span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// console.log(typeof fun ) "function"</span>补充<span class="token punctuation">:</span> fun<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hello"</span> 也是可以存在函数中的；函数拥有普通对象的一切功能，但比所有普通对象更强大！在开发中很少使用 （<span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>）构造函数创建对象；<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 使用函数声明创建一个函数<span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 套<span class="token punctuation">[</span><span class="token punctuation">]</span>表可选，写不写都行。<span class="token comment" spellcheck="true">// ??? 不太明白</span>构造函数创建对象与函数声明创建一个函数的区别及函数声明创建一个函数的优越性？<span class="token operator">...</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 使用函数表达式创建一个函数<span class="token keyword">let</span> fn1 <span class="token operator">=</span> <span class="token function">funtion</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>；funtion <span class="token function">fn2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token operator">+</span>b<span class="token punctuation">}</span> 相当于在函数内部声明变量  <span class="token keyword">var</span> a <span class="token punctuation">,</span><span class="token keyword">var</span> b 但未赋值，实参会赋值给函数中对应的形参；<span class="token function">调用函数，解析器不会检查实参类型；传数值会计算，fn2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span><span class="token function">传</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> 123hello<span class="token punctuation">;</span><span class="token function">传</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span>因此要注意是否会接收到不合法的参数，若有可能，最好对参数类型检查。</code></pre><pre class=" language-js"><code class="language-js">调函数，也不会检查实参数量，多余的实参不会被赋值，因为函数中只有a<span class="token operator">+</span>b，多传也是a<span class="token operator">+</span>b的结果；函数实参可以是任意数据类型；若实参数量少于形参，则没有对应实参的形参，将会是undefined<span class="token punctuation">,</span>funtion <span class="token function">fn2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token operator">+</span>b<span class="token punctuation">}</span>， a<span class="token operator">+</span>b结果为NAN；函数必须有返回值！<span class="token keyword">return</span> 将作为函数的执行结果返；<span class="token keyword">return</span>后的代码不再执行；<span class="token keyword">return</span> 后不写任何值，相当于返回undefined<span class="token punctuation">,</span> 同不写<span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">return</span> 后可以跟任意类型的值；例： <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">var</span> d <span class="token operator">=</span> a<span class="token operator">+</span>b <span class="token operator">+</span>c <span class="token keyword">return</span> d<span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 这样更加灵活，函数返回什么值，result结果就是什么；</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是函数<span class="token punctuation">;</span>函数实参可以是任何值，也可以是对象；参数过多，可以将参数封装到一个对象里，再通过 对象<span class="token punctuation">.</span>属性值拿值；<span class="token function">函数也可以作为函数的参数；fn</span><span class="token punctuation">(</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  相当于把函数的返回值放进去了；<span class="token function">fn</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span>相当于把函数放进去  （机器）<span class="token keyword">break</span>退出循环体，<span class="token keyword">for</span>停止；<span class="token keyword">return</span>结束函数；函数内部可无限声明函数；</code></pre><pre class=" language-js"><code class="language-js">函数的键值<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>自执行函数： <span class="token punctuation">(</span>往往只执行一次<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>对象属性值可为任何数据类型，亦可以是一个函数；<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"牛恒"</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>sayname <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">sayname</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 牛恒  (调方法)</span><span class="token function">sayname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调函数  ，这两种，只是叫法不一样，无本质区别</span>若函数作为对象的一个属性保存，那么就称 <span class="token operator">**</span><span class="token operator">*</span> 这个函数是这个对象的方法。调用函数就叫调用对象的方法（methods）。</code></pre><h4 id="3-枚举-（将对象的属性一个个取出）"><a href="#3-枚举-（将对象的属性一个个取出）" class="headerlink" title="3. 枚举 （将对象的属性一个个取出）"></a>3. 枚举 （将对象的属性一个个取出）</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用for in</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">"wind"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token string">"24"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 语法:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 有几个键，(打印几次),循环就会执行几次，每次执行都会将对象的属性赋值给变量 n</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// n = name 第一次</span><span class="token comment" spellcheck="true">// n = age 第二次</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 对象、函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ant-Design双向数据绑定及其他</title>
      <link href="2021/05/15/ant-design-shuang-xiang-shu-ju-bang-ding-ji-qi-ta/"/>
      <url>2021/05/15/ant-design-shuang-xiang-shu-ju-bang-ding-ji-qi-ta/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前提：</p><p>antd的表单Input，Selcet,多选check不像在Vue，数据与视图实时绑定，view刷新数据跟着变。</p><p>由于react是单向数据流，数据变化了才会同步到视图，因此需要另一种方式来实现。</p><p>举例Input:</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/**    **思路：**    给Input设置value、onChange属性，在onChange时修改兵保存value的值。同Select、checked。    如果一个onChange事件要一次修改保存多个Input、Select，checked。    可以在onChange事件函数中定义一个对象，传给onChange函数的参数再多出一个作为标识，    第二个值默认是改变后的====>最新值。*/</span>valueChange <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> valueChange <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    dataChange<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token comment" spellcheck="true">/**        ps：对象使用[]存键名，可存储特殊键名        例如obj["123"] = 789        obj["#@^%Gd"] = 666 都是正确的        这里使用obj[]就更加灵活    */</span>    <span class="token comment" spellcheck="true">/**       此处相当于将一条有键所对应的Input、Select，checked变化后的Value值存储到一个对象了    */</span>    <span class="token comment" spellcheck="true">// 那么每次在有一条数据的value发生变化的时候，重新修改这个对象即可！</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//*** 使用 hook</span><span class="token keyword">const</span> <span class="token punctuation">[</span>dataChange<span class="token punctuation">,</span> setDataChange<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>valueChange <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    dataChange<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token comment" spellcheck="true">//此时dataChange原值已被更改</span>    <span class="token comment" spellcheck="true">// 更新更改后的dataChange</span>    <span class="token function">setDataChange</span><span class="token punctuation">(</span>dataChange<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// view</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>     <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>dataChange<span class="token punctuation">.</span>inputs<span class="token punctuation">}</span></span>     <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">valueChange</span><span class="token punctuation">(</span><span class="token string">"inputs"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">// 使用 类式组件</span><span class="token keyword">export</span> defalut Class <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">{</span>    <span class="token function">cconstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            dataChange <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    valueChange <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> dataChange <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        dataChange<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> value          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dataChange<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// view</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>     <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>dataChange<span class="token punctuation">.</span>inputs<span class="token punctuation">}</span></span>     <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueChange</span><span class="token punctuation">(</span><span class="token string">"inputs"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre><p>其他：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/**   1) 防抖处理 背景：在做webscoket推送时，需要重新刷新页面，以体现实时更新的效果。 但是有个问题，webscoket推送太快后面页面会非常卡，刷新频率太快不利于用户操作，也影响美观 解决方法：（防抖）控制数据更新频率*/</span> <span class="token comment" spellcheck="true">// code</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">//借助闭包维护全局纯净</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>         <span class="token punctuation">}</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 简化写法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在调数据接口的地方调用 debounce（），传入请求数据接口的函数和希望延迟的时间</span></code></pre><p>相关资料地址：<a href="https://segmentfault.com/a/1190000018428170">https://segmentfault.com/a/1190000018428170</a></p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/**  2)   关于git为什么先pull   先pull 最后再push 的情况就是为了应对多人合并开发的情况*/</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/**  3) 问题：  在用到一个视频插件的地方给包裹它的元素position，给这个元素的父级realtive，  结果子元素不显示了，去除掉父级的realtive就能正常显示，此问题尚未解决，仍在思考中！  对于相对，绝对定位的理解有待加深。*/</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> antd  数据绑定  其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js总结</title>
      <link href="2021/05/10/js-zong-jie/"/>
      <url>2021/05/10/js-zong-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JS：布兰登艾奇发明</p><p>简称JS(javascript),与Java无本质关系</p><p>JS是ECMA的体现，ECMA是JS的规范</p><h4 id="什么是javascript-？"><a href="#什么是javascript-？" class="headerlink" title="什么是javascript ？"></a>什么是javascript ？</h4><p>基于对象和事件驱动的 解释性，程序设计脚本语言。</p><p>基于对象：暂时省略..</p><p>事件驱动： …</p><p>解释性：…</p><p>跨平台性：…</p><pre class=" language-tcl"><code class="language-tcl">JS语法以;结尾，不写也行，浏览器会自动添加，但会消耗系统资源。JS会忽略多个换行和空格，因此我们可以对代码进行优化。字面量：不可改变的值，用的较少；变量：可保存字面量，且可以改变。</code></pre><pre class=" language-tex"><code class="language-tex">标识符：JS中可自主命名的，都叫标识符。(变量名、函数名，属性名)1）标识符可含数字、字母、_,$;2）标识符不能以数字开头;3) 不能是ES中的关键字或保留字;4) JS中一般标识符使用驼峰命名;</code></pre><h4 id="数据类型（基本数据类型，引用数据类型）"><a href="#数据类型（基本数据类型，引用数据类型）" class="headerlink" title="数据类型（基本数据类型，引用数据类型）"></a>数据类型（基本数据类型，引用数据类型）</h4><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>基本数据类型number<span class="token punctuation">,</span>string<span class="token punctuation">,</span>boolean<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>undefined<span class="token number">2</span><span class="token punctuation">.</span>引用数据类型Object 包含 object、array<span class="token punctuation">,</span><span class="token keyword">function</span></code></pre><pre class=" language-js"><code class="language-js">string<span class="token punctuation">:</span>字符串需要使用<span class="token string">""</span>引起来，单双都可以；字符串使用 \ 作为转义符（转义作用：把一个东西以普通方式展现，不做过多处理，同正则转义）；在字符串中 \n 表示换行 （这是换行符？待定）  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"我爱你，\n娟"</span>；咋字符串中 \t 表示制表符，相当于按了tab键。</code></pre><h5 id="数据类型强制转换"><a href="#数据类型强制转换" class="headerlink" title="数据类型强制转换"></a><strong>数据类型强制转换</strong></h5><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">;</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span>    a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>不会影响原变量，有返回值；   <span class="token keyword">null</span><span class="token function">，undefined没有toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 函数； 将要转化的作为参数，s大写；   可将<span class="token keyword">null</span><span class="token punctuation">,</span>undefined加上<span class="token string">""</span><span class="token function">，转为字面量；相对于toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>可转<span class="token keyword">null</span><span class="token punctuation">,</span>undefined；<span class="token number">3</span><span class="token punctuation">.</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">;</span> 将要转的值放里面，空<span class="token string">' '</span>或 <span class="token string">'    '</span>里面加了空格转为<span class="token number">0</span>；   布尔值 <span class="token boolean">true</span> 转为 <span class="token number">1</span>， <span class="token boolean">false</span>转为 <span class="token number">0</span> ；   <span class="token keyword">null</span>类型为number，结果为 <span class="token number">0</span>；   undefined<span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span>，结果为NAN；</code></pre><p><strong>专门处理字符串的parseInt</strong></p><pre class=" language-js"><code class="language-js">a <span class="token operator">=</span> <span class="token string">"123px"</span> a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 123</span>parseInt将字符串中的整数内容取出；<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>取浮点型<span class="token operator">*</span>补充<span class="token operator">*</span> 对于非string类型使用parseInt会先转成string<span class="token punctuation">,</span>然后再操作，因此parseInt（<span class="token boolean">true</span>）结果会是NAN；<span class="token operator">**</span><span class="token function">相对于Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">可以转换带px</span><span class="token punctuation">(</span>单位的<span class="token punctuation">)</span>，但转有些值（<span class="token boolean">true</span>）并不太理想<span class="token operator">**</span>    <span class="token number">4</span><span class="token punctuation">.</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">;</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true;</span>   <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>   <span class="token function">Boolean</span><span class="token punctuation">(</span>Infinty<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>   <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>   <span class="token operator">**</span>总结：<span class="token operator">**</span>   数字，再除了<span class="token number">0</span>和<span class="token keyword">null</span>，都是<span class="token boolean">true</span><span class="token punctuation">;</span>   字符串除了空字符串<span class="token string">' '</span>，都是<span class="token boolean">true</span>。字符串里一个空格，也是<span class="token boolean">true</span><span class="token punctuation">;</span>   undefined是<span class="token boolean">false</span><span class="token punctuation">;</span>   转对象也是<span class="token boolean">true</span>。</code></pre><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token punctuation">)</span>就是一种运算符。算数运算符？<span class="token operator">+</span> <span class="token punctuation">:</span> <span class="token operator">+</span> 号是比较特殊的运算符，可做字符串拼接。  任何值 与 字符串 做拼接，都会把该值转为字符串，再拼接；  <span class="token operator">**</span><span class="token operator">*</span>可以使用  任意数据 <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">**</span><span class="token operator">*</span> 这种方法转为字符串串；  <span class="token operator">**</span><span class="token operator">*</span>在打印的时候，可以使用 <span class="token string">" c = "</span> <span class="token operator">+</span> c 的方式打印更佳！    <span class="token operator">-</span> <span class="token operator">/</span> <span class="token operator">*</span>   任何 值使用 <span class="token operator">-</span> <span class="token operator">/</span> <span class="token operator">*</span> 运算符时会将值转为number（隐式转换）  <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">**</span><span class="token operator">*</span> 可以用一个   字符串 <span class="token operator">-</span> <span class="token number">0</span> ，就转化为number<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "123" - 0</span>  <span class="token operator">-</span> 号可对值进行取反， <span class="token operator">-</span> 为number负值， <span class="token operator">+</span> 为正值；运算符优先级： 先乘除后加减，同数学。 <span class="token operator">||</span>  <span class="token operator">&amp;&amp;</span>   <span class="token operator">!</span>有一个优先级的表； 优先级一样，就从左往右算；</code></pre><h5 id="JS代码块：-只有分组作用"><a href="#JS代码块：-只有分组作用" class="headerlink" title="JS代码块： 只有分组作用"></a>JS代码块： 只有分组作用</h5><p>补充：质数(除了1和它本身之间的数，不能整除它本身，那它就是质数)</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 质数: 除了1和他本身，也就是从二开始到它之间的数，若都不能被这之间的数整除，该数是质数</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入一个大于1的数'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'非法！'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 被一个数整除</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token string">'是质数'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token string">"不是质数！"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法java初识</title>
      <link href="2021/05/06/suan-fa-java-chu-shi/"/>
      <url>2021/05/06/suan-fa-java-chu-shi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>递归：自己调自己，效率非常不好。使用递归测算可能会卡主程序，因为慢；</p><p>循环：速度很快，因为是异步进行的？</p><p>所谓算法，其实就是，比对各种不同测算结果的优劣，取最优！（以后再补充）</p><p>java 的函数需要在主函数main里调，out规定输出什么值；</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法、java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antdPopover的动态变色和动态visable</title>
      <link href="2021/05/05/antdpopover-de-dong-tai-bian-se-he-dong-tai-visable/"/>
      <url>2021/05/05/antdpopover-de-dong-tai-bian-se-he-dong-tai-visable/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="目的：-使用Popover制作动态的变色和控制Visable"><a href="#目的：-使用Popover制作动态的变色和控制Visable" class="headerlink" title="目的： 使用Popover制作动态的变色和控制Visable"></a>目的： 使用Popover制作动态的变色和控制Visable</h5><p>引入相关文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cxs <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Popover <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'../../iconfont/iconfont.css'</span><span class="token keyword">import</span> <span class="token string">"./popovers.css"</span><span class="token punctuation">;</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Popovers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>chooseIndex<span class="token punctuation">,</span> setChooseIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Rose"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Mary"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Lucy"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">28</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">29</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Bruce"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">27</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Tian"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"JuDiao"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Niuheng"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">31</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"KaiDi"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Haohao"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Wind"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span>  <span class="token keyword">const</span> closeList <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">)</span>    <span class="token function">setChooseIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 每次关闭也会重新return？ 渲染的是全部视图还是局部视图</span>    <span class="token comment" spellcheck="true">// stopPropagation 阻止事件冒泡</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> renderContent <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 函数组件的函数，还必须const</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'content-wrap'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">"content-top"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'content-top-left'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Name<span class="token punctuation">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token operator">&lt;</span>div         onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 此处必须阻止冒泡事件，否则会触发父元素的点击事件，导致子元素的点击事件点击了但是没效果</span>          <span class="token function">closeList</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// ***这是因为事件冒泡触发父元素点击对值重新赋值了***</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>        className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'content-top-right'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon</span> <span class="token attr-name">iconfont"</span><span class="token punctuation">></span></span><span class="token entity" title="&#xe607;">&amp;#xe607;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">"content-bottom"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Have a good nice Day <span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> changeColorAndIndex <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(item, index)</span>    <span class="token comment" spellcheck="true">// console.log('changeIndex')</span>    <span class="token function">setChooseIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 中间值与下标相等了 ，完成了两件事，被点击元素变色，被点击元素的pop显示，其他不显示！</span>  <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'wrap'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>点名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div         key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span>        id<span class="token operator">=</span><span class="token string">'item-info'</span>            className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"activeIndex"</span><span class="token punctuation">:</span> chooseIndex <span class="token operator">===</span> index<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//1. 若类名与中间值相等，就出现变化的背景色</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token function">changeColorAndIndex</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//3.  使中间值和下标相等的事件。触发器</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span>Popover          content<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">renderContent</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span>          trigger<span class="token operator">=</span><span class="token string">"click"</span>          getPopupContainer<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"item-info"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 绑定渲染父级</span>          visible<span class="token operator">=</span><span class="token punctuation">{</span>chooseIndex <span class="token operator">===</span> index<span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//2. 同理，若下标和中间值相同就显示</span>        <span class="token operator">></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">"item-onfo1"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'item-info-left'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'item-info-right'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Popover</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Popovers</code></pre><h5 id="关于为什么popover要绑定父级"><a href="#关于为什么popover要绑定父级" class="headerlink" title="关于为什么popover要绑定父级"></a>关于为什么popover要绑定父级</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// popover的默认渲染父级是body ，这在有些时候会出问题，例如元素错位(当然在目前看来是没有问题的，为了严谨)</span>getPopupContainer<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"item-info"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="css"><a href="#css" class="headerlink" title="css:"></a>css:</h5><pre class=" language-css"><code class="language-css"><span class="token selector">// 给父级元素相对定位，高度// 给子元素向左的距离<span class="token class">.ant-popover</span> </span><span class="token punctuation">{</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">415</span>px  <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover-arrow</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none  <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover-inner-content</span></span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">270</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="完整css"><a href="#完整css" class="headerlink" title="完整css"></a>完整css</h6><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.wrap</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">900</span>px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header</span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* text-align: center; */</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> seagreen<span class="token punctuation">;</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#item-info</span></span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">16</span>px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.activeIndex</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#cccccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-onfo1</span></span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">11</span>px <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#cccccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-info-left</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-info-right</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover</span> </span><span class="token punctuation">{</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">415</span>px  <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover-arrow</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none  <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover-inner-content</span></span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">270</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* content */</span><span class="token selector"><span class="token class">.content-wrap</span></span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">14</span>px <span class="token number">16</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top</span></span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-bottom</span></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* less 预编译  要  calc(~"100% - 50px") */</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span> - <span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-left</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-left</span> p</span><span class="token punctuation">{</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-left</span> h1</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> crimson<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-right</span> </span><span class="token punctuation">{</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-right</span> i </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-bottom</span> h2</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> dodgerblue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> aned Popover </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AutoComplute制作模糊搜索</title>
      <link href="2021/05/05/autocomplute-zhi-zuo-mo-hu-sou-suo/"/>
      <url>2021/05/05/autocomplute-zhi-zuo-mo-hu-sou-suo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="1-引入React-useState-classnames插件，引出Option"><a href="#1-引入React-useState-classnames插件，引出Option" class="headerlink" title="1. 引入React, useState classnames插件，引出Option"></a>1. 引入React, useState classnames插件，引出Option</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cxs <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AutoComplete <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./dimserch.css'</span><span class="token keyword">const</span> <span class="token punctuation">{</span> Option <span class="token punctuation">}</span> <span class="token operator">=</span> AutoComplete</code></pre><p><strong>思路</strong> ：</p><p>将一份数据存两遍，一份用于渲染，一份用于查找。</p><p>由于传入的  搜索值(serch)或是 变化值(onChange)的值若是空字符串，那么只需在另一份保存的数据中查找就可以了；</p><pre class=" language-js"><code class="language-js">filter，用list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 第一种写法  1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>includes<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>   <span class="token comment" spellcheck="true">// 若item包含传入值，返回此对象</span>      <span class="token comment" spellcheck="true">//第二种写法   2</span>  <span class="token comment" spellcheck="true">// const regex = new RegExp(val)</span>  <span class="token comment" spellcheck="true">// if(regex.test(item)) return true</span>  <span class="token keyword">return</span> <span class="token boolean">false</span> 其他情况不返回！<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">DimSerch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> list <span class="token operator">=</span>    <span class="token punctuation">[</span>      <span class="token string">"双皮奶"</span><span class="token punctuation">,</span> <span class="token string">"狮子头"</span><span class="token punctuation">,</span> <span class="token string">"擀面皮"</span><span class="token punctuation">,</span> <span class="token string">"巧克力蛋糕"</span><span class="token punctuation">,</span>         <span class="token string">"热米皮"</span><span class="token punctuation">,</span> <span class="token string">"牛肉面"</span><span class="token punctuation">,</span> <span class="token string">"二细牛肉面"</span><span class="token punctuation">,</span> <span class="token string">"三细牛肉面"</span><span class="token punctuation">,</span>      <span class="token string">"扬州炒饭"</span><span class="token punctuation">,</span> <span class="token string">"蛋炒饭"</span><span class="token punctuation">,</span> <span class="token string">"蛋炒土豆丝"</span><span class="token punctuation">,</span> <span class="token string">"巧克力饼"</span><span class="token punctuation">,</span>        <span class="token string">"狮子头拌奶酪"</span><span class="token punctuation">,</span> <span class="token string">"火腿擀面皮"</span><span class="token punctuation">,</span> <span class="token string">"加量擀面皮"</span><span class="token punctuation">,</span>      <span class="token string">"热米皮拌青椒"</span><span class="token punctuation">,</span> <span class="token string">"双皮奶加量"</span><span class="token punctuation">,</span> <span class="token string">"海之言"</span><span class="token punctuation">,</span> <span class="token string">"蓝色海之言"</span><span class="token punctuation">,</span>         <span class="token string">"紫色海之言"</span><span class="token punctuation">,</span> <span class="token string">"橘黄海之言"</span><span class="token punctuation">,</span> <span class="token string">"绿色海之言"</span><span class="token punctuation">,</span>      <span class="token string">"百吉猫锅巴"</span><span class="token punctuation">,</span> <span class="token string">"三元锅巴"</span><span class="token punctuation">,</span> <span class="token string">"酥锅巴"</span><span class="token punctuation">,</span> <span class="token string">"AD钙"</span><span class="token punctuation">,</span> <span class="token string">"乳酸菌AD钙"</span><span class="token punctuation">,</span>         <span class="token string">"草莓AD钙"</span><span class="token punctuation">,</span> <span class="token string">"香辣火腿肠"</span><span class="token punctuation">,</span> <span class="token string">"玉米火腿肠"</span>    <span class="token punctuation">]</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>realyDatas<span class="token punctuation">,</span> setRealyDatas<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>originList<span class="token punctuation">,</span> setoriginList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>  <span class="token keyword">const</span> handleSearch <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// const regex = new RegExp(val)  // 定义规则(传入值);若val是空字符串，</span>                                      <span class="token comment" spellcheck="true">// 那么所有被检验元素都包含''，</span>       <span class="token comment" spellcheck="true">/**         *** 注意： 在使用正则regex.test(item)有时会在搜索框 的值包含()，         删去一个时报错，提示不是有效的正则，而includes不会报这个错。      */</span>            <span class="token comment" spellcheck="true">// 也就是说，此时返回被遍历对象的所有（每一项）;</span>    <span class="token keyword">let</span> newArray <span class="token operator">=</span> originList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// if (regex.test(item)) {      // 若每一项包含所定义规则；所有字符都包含空字符串；</span>      <span class="token comment" spellcheck="true">//   return true                // 就返回这个对象</span>      <span class="token comment" spellcheck="true">// }</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// item包含输入的值，返回此对象；其他情况false不返回</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setRealyDatas</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 更新渲染数组； 重新渲染</span>  <span class="token punctuation">}</span>    <span class="token keyword">const</span> autoChange <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 关于是否只需要一个这样的函数，待定</span>    <span class="token comment" spellcheck="true">// const regex = new RegExp(val)</span>    <span class="token keyword">let</span> newArray <span class="token operator">=</span> originList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// if (regex.test(item)) {</span>      <span class="token comment" spellcheck="true">//   return true</span>      <span class="token comment" spellcheck="true">// }</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setRealyDatas</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>wrap<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AutoComplete</span>        <span class="token attr-name">getPopupContainer</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"wrap"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>        <span class="token attr-name">onSearch</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleSearch<span class="token punctuation">}</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>autoChange<span class="token punctuation">}</span></span>        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">/**          在渲染时如果数据量过大，搜索框会出现卡顿          因此不能直接渲染全部数据                    补充：这里截取数组 为什么使用了slice 而不是 splice?          splice操作原数组，而slice不会操作原数组，使用splice 数据会自动删，          如果有2003条数据，那么最后只会剩下3条数据！          原因： 一份数据存了两份，操作一份数据会影响另一份数据！这是浅拷贝的问题，          slice不影响原数组，所以数据不会变少。在多数情况下，建议不要操作原数据。       */</span>        <span class="token punctuation">{</span><span class="token punctuation">(</span>realyDatas<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">30</span>           <span class="token operator">?</span> realyDatas<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>           <span class="token punctuation">:</span> realyDatas<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Option</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            <span class="token punctuation">{</span>item<span class="token punctuation">}</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Option</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AutoComplete</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> DimSerch</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 模糊搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="2021/04/30/sui-bi/"/>
      <url>2021/04/30/sui-bi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="4-10-4-16-report"><a href="#4-10-4-16-report" class="headerlink" title="4.10-4.16 report"></a>4.10-4.16 report</h4><h5 id="1-Object-keys-obj-传入对象，返回属性名"><a href="#1-Object-keys-obj-传入对象，返回属性名" class="headerlink" title="1) Object.keys(obj)  // 传入对象，返回属性名"></a>1) Object.keys(obj)  // 传入对象，返回属性名</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">"上午"</span><span class="token punctuation">,</span>list<span class="token punctuation">:</span><span class="token string">"333"</span><span class="token punctuation">,</span> dance<span class="token punctuation">:</span><span class="token string">"巴克勒"</span><span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (3) ["type", "list", "dance"]  返回键名，但并没有吃掉属性值</span></code></pre><h5 id="2-classList添加类名"><a href="#2-classList添加类名" class="headerlink" title="2) classList添加类名"></a>2) classList添加类名</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> bot <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'bot'</span><span class="token punctuation">)</span>bot<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'niuheng'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// console.log(bot.classList.contains('niuheng')) // true</span></code></pre><h5 id="3）-map的参数"><a href="#3）-map的参数" class="headerlink" title="3） map的参数"></a>3） map的参数</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"类型"</span><span class="token punctuation">,</span> <span class="token string">"影响"</span><span class="token punctuation">,</span> <span class="token string">"距离"</span><span class="token punctuation">,</span> <span class="token string">"推荐"</span><span class="token punctuation">,</span> <span class="token string">"预计"</span><span class="token punctuation">]</span>     array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// console.log(item+'x', index, arr)</span>        <span class="token comment" spellcheck="true">// 类型x 0 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>        <span class="token comment" spellcheck="true">// VM22:3 影响x 1 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>        <span class="token comment" spellcheck="true">// VM22:3 距离x 2 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>        <span class="token comment" spellcheck="true">// VM22:3 推荐x 3 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>        <span class="token comment" spellcheck="true">// VM22:3 预计x 4 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>         <span class="token keyword">return</span> item<span class="token operator">+</span><span class="token string">'x'</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// (5) ["类型x", "影响x", "距离x", "推荐x", "预计x"]</span></code></pre><h5 id="4-Array-from"><a href="#4-Array-from" class="headerlink" title="4) Array.from()"></a>4) Array.from()</h5><h6 id="Array-from-将一个类数组对象或可遍历对象转化为一个真正的数组"><a href="#Array-from-将一个类数组对象或可遍历对象转化为一个真正的数组" class="headerlink" title="Array.from()将一个类数组对象或可遍历对象转化为一个真正的数组"></a>Array.from()将一个类数组对象或可遍历对象转化为一个真正的数组</h6><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">9797</span><span class="token punctuation">,</span><span class="token number">564</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">45642</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [[Entries]]</span>        <span class="token comment" spellcheck="true">// 0: 12</span>        <span class="token comment" spellcheck="true">// 1: 45</span>        <span class="token comment" spellcheck="true">// 2: 97</span>        <span class="token comment" spellcheck="true">// 3: 9797</span>        <span class="token comment" spellcheck="true">// 4: 564</span>        <span class="token comment" spellcheck="true">// 5: 134</span>        <span class="token comment" spellcheck="true">// 6: 45642</span>        <span class="token comment" spellcheck="true">// size: 7,</span><span class="token comment" spellcheck="true">// 可以看到set不是一个数组，它看起来想一个对象，却又不是一个对象</span><span class="token comment" spellcheck="true">// console.log( Array.from(set))  // [12, 45, 97, 9797, 564, 134, 45642]</span></code></pre><h6 id="Array-from-还可将NodeList-转为真正的数组。"><a href="#Array-from-还可将NodeList-转为真正的数组。" class="headerlink" title="Array.from()还可将NodeList  转为真正的数组。"></a>Array.from()还可将NodeList  转为真正的数组。</h6><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> abc <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过getElementsByTagName获取的元素不是一个数组，而是nodeList</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">,</span>abc<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 使用Array.from()</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Array.form'</span><span class="token punctuation">,</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[a, a, a, a, a, a, a, a]</span><span class="token comment" spellcheck="true">//第二种方法转化</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 这种方式新建数组很新颖</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> abc<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> ele <span class="token operator">=</span> abc<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [a, a, a, a, a, a, a, a]</span></code></pre><h5 id="5-合并对象-assign"><a href="#5-合并对象-assign" class="headerlink" title="5) 合并对象 assign"></a>5) 合并对象 assign</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>config<span class="token punctuation">,</span> <span class="token punctuation">{</span> key<span class="token punctuation">:</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="6）writing-mode"><a href="#6）writing-mode" class="headerlink" title="6）writing-mode"></a>6）writing-mode</h5><p>文字垂直显示</p><pre class=" language-css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">writing-mode</span><span class="token punctuation">:</span> vertical-lr<span class="token punctuation">}</span></code></pre><h5 id="7）getAttribute-setAttribute"><a href="#7）getAttribute-setAttribute" class="headerlink" title="7）getAttribute\setAttribute"></a>7）getAttribute\setAttribute</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> pp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>pp<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-event'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 添加属性</span><span class="token keyword">let</span> hasEvent <span class="token operator">=</span> pp<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-event'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取对应键名对应的属性值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hasEvent<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><h5 id="8）Object-prototype-toString-call"><a href="#8）Object-prototype-toString-call" class="headerlink" title="8）Object.prototype.toString.call()"></a>8）Object.prototype.toString.call()</h5><h6 id="用Object-prototype-toString-call-obj-检测对象类型"><a href="#用Object-prototype-toString-call-obj-检测对象类型" class="headerlink" title="用Object.prototype.toString.call(obj)检测对象类型"></a>用Object.prototype.toString.call(obj)检测对象类型</h6><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Eric'</span><span class="token punctuation">,</span><span class="token string">'Mary'</span><span class="token punctuation">,</span><span class="token string">'Rose'</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Array]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'Eric'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object String]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// [object Number]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// [object Boolean]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Undefined]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Null]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"julius"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Object]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Function]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// [object Array]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Date]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token regex">/^\[.*\]$/</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object RegExp]</span></code></pre><h6 id="判断数据类型-gt-函数调用"><a href="#判断数据类型-gt-函数调用" class="headerlink" title="判断数据类型====&gt;函数调用"></a>判断数据类型====&gt;函数调用</h6><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> isNumber <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>  Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Number]'</span>  <span class="token comment" spellcheck="true">// 字符串怎么能是true呢？</span>    <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><h5 id="9）引入iconfont字体图标"><a href="#9）引入iconfont字体图标" class="headerlink" title="9）引入iconfont字体图标"></a>9）引入iconfont字体图标</h5><p>下载好并放入，import ‘./iconfont/iconfont.css’</p><pre class=" language-html"><code class="language-html">// 使用：第一种方法 =>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">*className*</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-zanting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">// 第二种方法 => <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon iconfont<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#xe635;">&amp;#xe635;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git操作</title>
      <link href="2021/04/30/git-cao-zuo/"/>
      <url>2021/04/30/git-cao-zuo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="git-操作"><a href="#git-操作" class="headerlink" title="git 操作"></a>git 操作</h4><h5 id="common"><a href="#common" class="headerlink" title="common"></a>common</h5><pre class=" language-jsx"><code class="language-jsx">git init <span class="token comment" spellcheck="true">// (在github新建远程仓库，将一个文件使用此命令初始化，然后按照提示操作。)</span>git add <span class="token punctuation">.</span>git commit <span class="token operator">-</span>m git push <span class="token comment" spellcheck="true">// (若从远程上来下来，并切换了分支，那么可直接git push 就能将本地最新代码push到远程对应的这个分支上去)</span>git checkout  <span class="token comment" spellcheck="true">// 分支名 (已在远程对应的分支上，可使用此命令切换到其他远程分支)</span>git checkout <span class="token operator">-</span>b <span class="token comment" spellcheck="true">// 分支名 (创建本地分支)</span>git branch <span class="token operator">-</span>a <span class="token comment" spellcheck="true">// (查看所有分支，本地and远程)</span>git branch <span class="token comment" spellcheck="true">// (查看本地分支)</span>git push <span class="token operator">--</span><span class="token keyword">set</span><span class="token operator">-</span>upstream origin 本地分支名 <span class="token comment" spellcheck="true">// (将本地分支推到远程仓库，使远程仓库下有该分支名)</span>git pull origin develop <span class="token comment" spellcheck="true">// (拉取对应远程分支的代码)</span>git reset <span class="token operator">--</span>hard commmit代码 <span class="token comment" spellcheck="true">// (回退到指定版本)</span>git commit <span class="token operator">--</span>no<span class="token operator">-</span>verify <span class="token operator">-</span>m <span class="token comment" spellcheck="true">// 跳过校验提交</span>git merge <span class="token comment" spellcheck="true">// (用于将分支代码合并至主分支)</span><span class="token comment" spellcheck="true">/** 先将自己的分支 add . commit  push 完毕， 再切换到master分支 ， &amp; * 使用 git merge 你的分支 命令将自己分支上的代码合并至主分支 。 &amp;  * 最后psuh 主分支代码 */</span> </code></pre><h5 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用原因</span><span class="token number">1</span><span class="token punctuation">.</span> 合并代码      当本地已经做出了一些修改，但有其他同学已经提交了最新的代码，此时我们需要拉一下最新的代码，      但本地已经有修改了，直接pull 会提示让你先commit <span class="token punctuation">,</span>           而这时commit 之后确实就能pull了，但等到后面我们在要提交的时候 <span class="token punctuation">(</span>因为pull的原因本地代码变化了<span class="token punctuation">)</span> 又要commit 一次，      但因为拉代码再多增加一次commit并不可取。      <span class="token operator">**</span><span class="token operator">*</span>这时就可以使用 git stash 将当前代码保存至堆栈，然后就能直接pull了，       pull了之后再 git stash pop 将刚才保存的代码从堆栈弹出，      再根据提示解决一下冲突，最后再提交就好了  <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span> 使用场景<span class="token number">2</span><span class="token punctuation">.</span> 当前分支增加了最新内容但未commit ，且需要切换到其他分支   当前分支未commit ，是不能切分支的，使用 git stash 后，就能切了。   <span class="token number">3</span><span class="token punctuation">.</span> 本该在dev 分支开发，但在master分支开发了   使用 git stash 将当前内容保存至堆栈，再切到dev 分支将内容弹出。      </code></pre><pre class=" language-js"><code class="language-js">git stash <span class="token comment" spellcheck="true">// 将当前未提交更改保存至堆栈中，后续用于恢复</span>git stash save  <span class="token string">"save message"</span> <span class="token comment" spellcheck="true">//   作用同git stash ，但可以添加一些注释</span>git stash list <span class="token comment" spellcheck="true">// 查看当前stash中的内容</span>git stash pop <span class="token comment" spellcheck="true">// 弹出 stash 中的第一个 ，***使用需要注意，确保stash 中只有一个内容！</span>git stash apply <span class="token comment" spellcheck="true">// 将堆栈内容应用到当前工作目录，但不同与git stash pop 的是，它不会将内容从堆栈删除。</span>  该命令使用于多个分支的情况。  git stash drop <span class="token operator">+</span> 名称  <span class="token comment" spellcheck="true">// 从堆栈移除某个指定的stash</span>git stash clear <span class="token comment" spellcheck="true">// 移除堆栈中的所有内容</span>git stash show <span class="token comment" spellcheck="true">// 查看堆栈中最新个保存的stash 和当前目录的差异</span>   git stash show stash@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>查看指定的stash和当前目录差异。   git stash branch <span class="token comment" spellcheck="true">// 从最新的stash 创建分支</span></code></pre><h5 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h5><pre class=" language-js"><code class="language-js">用途： 合并代码， 还有其他用途，以后再说步骤：     git fetch origin master <span class="token comment" spellcheck="true">// 将远程分支上的最新代码拉下来 pull是拉下来直接合并</span><span class="token comment" spellcheck="true">// 最新的代码拉下来 直接使用 git rebase 会提示需要 先commit </span>git commit <span class="token operator">-</span>m <span class="token operator">...</span><span class="token comment" spellcheck="true">// 执行完此命令 按照提示解决冲突 </span><span class="token comment" spellcheck="true">// 多次commit的 情况可能传入和当前的代码 都并不是 自己刚刚最新的代码</span><span class="token comment" spellcheck="true">// 不要怕，先合并，后面还会有一次commit的冲突解决</span><span class="token comment" spellcheck="true">// 一般这里是选择 incomming ，但也需要酌情选择 (需要慎重)</span>git rebase origin master<span class="token comment" spellcheck="true">// 执行了此命令如果还有冲突，就继续解决冲突 (一般多次commit会有这样的情况)</span>git reabse <span class="token keyword">continue</span><span class="token comment" spellcheck="true">// 当以上步骤确定没有冲突以后，直接push, 不需要再commit了</span>git push <span class="token comment" spellcheck="true">// 最后：git rebase 不可滥用！</span></code></pre><h5 id="–amend"><a href="#–amend" class="headerlink" title="–amend"></a>–amend</h5><pre class=" language-js"><code class="language-js"><span class="token operator">--</span>amend 修改commit 记录<span class="token comment" spellcheck="true">// 两次提交记录</span>git ciomit <span class="token operator">--</span>amend <span class="token operator">-</span>m <span class="token string">'[dh-6925]xxxxxx'</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">// 因此提交记录</span><span class="token comment" spellcheck="true">// 使用的原因是在提交后发现有一个小地方忘记了，不想因为这个再commit一次，于是修改之前的commit , 并全部当作一次提交</span>git commit <span class="token operator">--</span>amend <span class="token operator">-</span>a <span class="token comment" spellcheck="true">// 就是到a为止，后面没有了，前提是之前有过commit的情况下</span>执行以上命令后会出现很多行# <span class="token comment" spellcheck="true">// 这是linlux 命令</span><span class="token punctuation">:</span> wq 回车 <span class="token comment" spellcheck="true">// 这样就回到了命令行，此时已经将心修改的和以前的群不合为一次commit 了</span>最后 push 发现是一次commit注意：    一定得是 git commit <span class="token operator">--</span>amend <span class="token operator">-</span>a 才会是一次提交，      git ciomit <span class="token operator">--</span>amend <span class="token operator">-</span>m <span class="token string">'[dh-6925]xxxxxx'</span> 也能修改，但提交到代码仓库是两次！！ </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组过滤undefined</title>
      <link href="2021/04/30/shu-zu-guo-lu-undefined/"/>
      <url>2021/04/30/shu-zu-guo-lu-undefined/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h5><p>我们在传递数据的时候，很多时候数据是一个数组，而又有些时候我们并不需要将整个数组传递过去，而是传递数组中的前几个对象；</p><p>这时就可以现在这样： method([list[0],list[1],list[2,list[3]])；</p><p>(调用父组件传递过来的函数，发送一个数组)；</p><p><strong>问题：数据都是调用后端接口得来的，而数据这个东西，有时候多，有时候少，多的时候就不说了，反正我们时以下标这样取得，怎么传也只有三条数据，但是数据少的时候问题就来了；</strong></p><p>什么问题呢？ 通过像这样传递的数据 method([list[0],list[1],list[2,list[3]])，<strong>如果数据一旦少于三条。也就是说如果调接口之得到一条数据</strong>，但是你这样通过下标传递数据, 那么发送过去的这个数组后两个必定是undefined!</p><p>将undefined发送给其他需要的组件，那么是极有可能出问题的，因此我们需要对数据进行处理：<strong>在数据为undefined时不发送数据！</strong></p><p>哪怕我只发送过去一条实际存在的数据，也不发送undefined,可以少传，可以不传，但不可以发undefined!</p><p>试了很多种方法，例如：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// list是我们要发送的数组</span><span class="token comment" spellcheck="true">// 将list 遍历</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>datas<span class="token punctuation">,</span> setDatas<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mydatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> list <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token operator">...</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">&amp;&amp;</span> item<span class="token operator">!==</span> undefined <span class="token operator">||</span> item <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> item <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [{item},undefined,undefined] 结果依然没有发生变化,依然发送的是undefined</span>    <span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">[</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p>解决：</p><pre class=" language-js"><code class="language-js"><span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">[</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 返回的新数组种没有undefined！！！</span><span class="token comment" spellcheck="true">// success</span></code></pre><p>原因：经过filter后会自动去掉undefined、null,空字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token string">'3.jpg'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span>、<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">]</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>VM23<span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3.jpg"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 可以看到undefined、null、"" 被去除了</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数组过滤undefined、null，&#39;&#39; </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件冒泡的影响，两种hook</title>
      <link href="2021/04/28/shi-jian-mou-pao-de-ying-xiang-liang-chong-hook/"/>
      <url>2021/04/28/shi-jian-mou-pao-de-ying-xiang-liang-chong-hook/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="1-多个元素嵌套设有多个点击事件，最下级的元素触发点击事件可能发生冒泡情况。"><a href="#1-多个元素嵌套设有多个点击事件，最下级的元素触发点击事件可能发生冒泡情况。" class="headerlink" title="1. 多个元素嵌套设有多个点击事件，最下级的元素触发点击事件可能发生冒泡情况。"></a>1. 多个元素嵌套设有多个点击事件，最下级的元素触发点击事件可能发生冒泡情况。</h5><p><strong>冒泡</strong>：点击子元素的  点击事件， 会同时触发父组件的点击事件；</p><p><strong>在多个嵌套元素设置多个点击事件，极有可能发生此类问题！</strong></p><p>关于冒泡带来的问题，例如：    </p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 在一个元素的父级 定义一个点击事件    // 在这个事件中定义一种状态或者是下标，</span><span class="token keyword">function</span> <span class="token function">Cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>chooseIndex<span class="token punctuation">,</span> setChooseIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>    <span class="token operator">...</span>       changeIndex <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 父级元素的点击事件</span>        <span class="token function">setChooseIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// setChooseIndex改变初始值后  是必定会引发视图更新的！！</span>    <span class="token punctuation">}</span>    closeStatus <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 子节点的点击事件</span>       <span class="token function">setChooseIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 默认传空，chooseIndex 便不再等于index，但是visable 却没有关闭</span>   <span class="token punctuation">}</span>                       <span class="token comment" spellcheck="true">// 在useEffect 和 reuturn打印发现值还是上一次的，也就是没有被改变</span>    <span class="token punctuation">{</span>dataList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// ****原因是因为，子元素每次closeStatus时都重新触发了changeIndex事件，因此closeStatus的值怎么都改不过来****</span>    <span class="token comment" spellcheck="true">// **** 阻止事件冒泡即可</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span>        <span class="token operator">...</span>    <span class="token operator">...</span>         <span class="token comment" spellcheck="true">// 当chooseIndex == index 时，会出现两个效果，点击每一个变色；popver单个visable 属性true</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">classname</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'list-wrap'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"activeItemClass"</span> <span class="token punctuation">:</span> chooseIndex <span class="token operator">===</span> index<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>     <span class="token operator">&lt;</span>Popver      content <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token function">renderContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>     visable<span class="token operator">=</span><span class="token punctuation">{</span>chooseIndex <span class="token operator">===</span> index<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 当chooseIndex === index，即成立时，visable为true</span>     <span class="token operator">></span>                                <span class="token comment" spellcheck="true">// visable 在不成立，值不存在的情况下为false  例如： item.visable不存在为          false</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">changeIndex</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Popver</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>       renderContent <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token operator">...</span>        <span class="token operator">...</span>        <span class="token operator">&lt;</span>div         onClick <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 阻止事件冒泡</span>                <span class="token function">closeStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2 . 补充：   useEffect 、useState</p><pre class=" language-tex"><code class="language-tex">useEffect 函数在  函数组件是可以多次定义的，这样的好处是：各放各的，不至于在有的状态和一个开关的值发生变化时，因为空数组传了值而重新调用useEffect 里面请求接口数据的函数，造成多次请求，严重影响页面性能。</code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 而定义的  </span><span class="token keyword">const</span> <span class="token punctuation">[</span>content<span class="token punctuation">,</span> setContnet<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 在set后是一定会重新刷新页面的，就像类的this.setSate({})也会重新调用render函数，重新刷新页面。</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 事件冒泡、hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决OpenSSL报错</title>
      <link href="2021/04/27/jie-jue-openssl-bao-cuo/"/>
      <url>2021/04/27/jie-jue-openssl-bao-cuo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先，这个错误很可能是网络不稳定，连接超时导致的；</p><h5 id="若再次尝试依然报错，可输入如下命令"><a href="#若再次尝试依然报错，可输入如下命令" class="headerlink" title="若再次尝试依然报错，可输入如下命令"></a>若再次尝试依然报错，可输入如下命令</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ps ：在 hexo g 后输入效果更佳</span>git config <span class="token operator">--</span>global http<span class="token punctuation">.</span>sslVerify <span class="token string">"false"</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Git报错解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css磨砂效果，模糊效果</title>
      <link href="2021/04/27/css-mo-sha-xiao-guo-mo-hu-xiao-guo/"/>
      <url>2021/04/27/css-mo-sha-xiao-guo-mo-hu-xiao-guo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>要点：给需要磨砂的div(设rgba的那个元素) =&gt; 设置伪元素；</p><p>给伪元素content: ‘’、绝对定位，四处为0,left：0….</p><p>给伪元素一样的背景图，并给z-index: -1 、给自身z-index:1 ***重要，必须给！</p><p>最后给 伪元素 filter: blur(37px); 属性值，效果就出来了。</p><pre class=" language-css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(./heroheart.jpg)</span><span class="token punctuation">;</span>   <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#app</span></span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">370</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#app</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(./heroheart.jpg)</span><span class="token punctuation">;</span><span class="token property">background-size</span><span class="token punctuation">:</span>cover <span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span><span class="token number">37</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">28</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFFFFF</span><span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>时间带走了回不去的青春，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>却带不走我一往无前的心！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>世间万物，万般困难、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>能耐我何？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> css 磨砂，模糊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/25/hello-world/"/>
      <url>2021/04/25/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
