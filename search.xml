<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js总结2对象函数</title>
      <link href="2021/05/20/js-zong-jie-2-dui-xiang-han-shu/"/>
      <url>2021/05/20/js-zong-jie-2-dui-xiang-han-shu/</url>
      
        <content type="html"><![CDATA[<h4 id="1-对象"><a href="#1-对象" class="headerlink" title="1. 对象"></a>1. 对象</h4><pre class=" language-jsp"><code class="language-jsp">已经有了五种数据类型，为什么我们还需要对象？基本数据类型值单一，值与值之间没有联系（不是一个整体）对象的作用就是**将多个值放在一起，批量操作；对象属于复合数据类型，可保存多个不同数据类型的属性，就像一个袋子。</code></pre><h5 id="1-2）对象的类型"><a href="#1-2）对象的类型" class="headerlink" title="1-2）对象的类型"></a>1-2）对象的类型</h5><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 内建对象由Es标准中定义的对象，在任何Es实现中都可以使用 例如：​    Math、String、Number、Boolean、Function<span class="token punctuation">,</span>Object问题<span class="token punctuation">:</span>String、Number、Boolean数据类型与String、Number、Boolean内建对象有何区别？</code></pre><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 宿主对象由Js环境提供的对象，目前主要指由浏览器提供的对象。例如： BoM<span class="token punctuation">,</span>Dom<span class="token punctuation">;</span> console<span class="token punctuation">.</span>log就是一个对象，document<span class="token punctuation">.</span>write也是一个对象，这个两者都由浏览器提供。</code></pre><pre class=" language-tex"><code class="language-tex">(3) 自定义对象  （开发人员自己创建的对象）// 使用new关键字调用的函数，是构造函数constructor; ；构造函数时专门用来创建对象的。创建对象： var obj = new Object()添加属性： obj.name= "Eric"  ； 对象改值与添加一样的。注意： 读取对象中没有的属性，不会报错，而是undefined!删除对象属性： delete  obj.name</code></pre><pre class=" language-tex"><code class="language-tex">  对象属性名，属性值  对象属性名不强制要求遵守标识符规范，什么乱七八糟的命都可以，但还是尽量按标识符的规范去做。使用特殊属性名、语法，不能例如 obj.123正确写法： Obj["123"] = 789  ; obj["@#^%GK"] = 666;使用[]操作对象属性，更加灵活，[]可传变量，例如var n = "123",这样可以随时更改， console.log(obj[n]);</code></pre><pre class=" language-js"><code class="language-js">  对象属性值  对象的属性值可以是任意的数据类型，甚至可以是一个对象。例如： <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      obj<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      obj<span class="token punctuation">.</span>test <span class="token operator">=</span> undefined<span class="token punctuation">;</span>      <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      obj<span class="token punctuation">.</span>test <span class="token operator">=</span> obj2  <span class="token comment" spellcheck="true">// 袋中袋</span>      对象中没有的属性不报错，而是undefined<span class="token punctuation">,</span>那么如何检查一个对象中是否有指定属性？console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test"</span> <span class="token keyword">in</span> obj <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 有返回true, 无返回false</span></code></pre><pre class=" language-tex"><code class="language-tex">   深浅拷贝   浅拷贝针对于引用数据类型（复杂数据类型Object （object,array, function））浅拷贝原因: 只拷贝了堆空间地址，而未开辟新的内存空间，两处堆内存空间地址指向一处 堆内存空间。一处变化，另一个跟着变化。为什么叫引用数据类型？ 对象保存在堆空间当中，栈空间只保存了变量名和 指向堆内存空间的地址，变量名和堆空间由地址建立联系。(地址即引用)每当var obj = new Object();就在堆空间开辟了内存空间。两个堆内存空间，即使里面的值一模一样他们也不相同，因为空间地址不一样。**基本数据类型直接在栈空间存储，变量值是对立存在的，修改一个值，对其他值没有任何影响。*** 比较基本数据类型，比较的是值；（基本在栈中存->值）    比较引用数据类型，比较的是空间地址。即便里面的东西一样但内存地址不一样，那还是不一样！（引用在栈中存->空间地址）</code></pre><pre class=" language-tcl"><code class="language-tcl">  对象字面量  var obj = <span class="token punctuation">{</span><span class="token punctuation">}</span>; console.log<span class="token punctuation">(</span>type of obj<span class="token punctuation">)</span> <span class="token punctuation">[</span>object object<span class="token punctuation">]</span>；使用var obj = <span class="token punctuation">{</span><span class="token punctuation">}</span> 与var obj = new Object<span class="token punctuation">(</span><span class="token punctuation">)</span>; 本质上一样；对象字面量的属性，引号可以不加，也建议不加，若使用奇怪的名，必须加！名和值用：分隔，多个属性用逗号隔开；</code></pre><h4 id="2-函数-（也是对象）"><a href="#2-函数-（也是对象）" class="headerlink" title="2. 函数 （也是对象）"></a>2. 函数 （也是对象）</h4><p><strong>除基本数据类型，剩下的都是对象</strong></p><pre class=" language-tex"><code class="language-tex">普通的对象只能装东西，而函数却还能封装一些功能，在需要时执行这些功能（代码）；封装的函数一定程度上简化了代码量；封装： 存起来，用的时候（调用）很简单；(1) 将要封装的代码，以字符串形式传递给构造函数；// ??不太明白(2) 封装的函数不会立即执行，调用时执行；(3) 调用 ：fun() ；调用时，函数中的代码以顺序执行；</code></pre><pre class=" language-tex"><code class="language-tex">2-1）创建一个对象(1) 构造函数创建对象var fun = new Function(); // console.log(typeof fun ) "function"补充: fun.name = "hello" 也是可以存在函数中的；函数拥有普通对象的一切功能，但比所有普通对象更强大！在开发中很少使用 （var fun = new Function();）构造函数创建对象；(2) 使用函数声明创建一个函数function 函数名(形参1, 形参2){}function fn([..,..]){}, 套[]表可选，写不写都行。// ??? 不太明白构造函数创建对象与函数声明创建一个函数的区别及函数声明创建一个函数的优越性？...(3) 使用函数表达式创建一个函数let fn1 = funtion(形参1, 形参2){}；funtion fn2(a, b){a+b} 相当于在函数内部声明变量  var a ,var b 但未赋值，实参会赋值给函数中对应的形参；调用函数，解析器不会检查实参类型；传数值会计算，fn2(1,3) // 4传(123,"hello") -> 123hello;传(true, false) -> 1因此要注意是否会接收到不合法的参数，若有可能，最好对参数类型检查。</code></pre><pre class=" language-tex"><code class="language-tex">调函数，也不会检查实参数量，多余的实参不会被赋值，因为函数中只有a+b，多传也是a+b的结果；函数实参可以是任意数据类型；若实参数量少于形参，则没有对应实参的形参，将会是undefined,funtion fn2(a, b){a+b}， a+b结果为NAN；函数必须有返回值！return 将作为函数的执行结果返；return后的代码不再执行；return 后不写任何值，相当于返回undefined, 同不写return;return 后可以跟任意类型的值；例： function sum(a, b, c){ var d = a+b +c return d}sum(11,22,33)var result = sum(11,22,33)  // 这样更加灵活，函数返回什么值，result结果就是什么；</code></pre><pre class=" language-tex"><code class="language-tex">alert()是函数;函数实参可以是任何值，也可以是对象；参数过多，可以将参数封装到一个对象里，再通过 对象.属性值拿值；函数也可以作为函数的参数；fn(main())  相当于把函数的返回值放进去了；fn(main)相当于把函数放进去  （机器）break退出循环体，for停止；return结束函数；函数内部可无限声明函数；</code></pre><pre class=" language-tex"><code class="language-tex">函数的键值var a = fn3();console.log(a.name)自执行函数： (往往只执行一次)(function(){})()对象属性值可为任何数据类型，亦可以是一个函数；var obj = new Object();obj.name = "牛恒";obj.sayname = function() {    console.log(obj.name)}obj.sayname()  // 牛恒  (调方法)sayname() // 调函数  ，这两种，只是叫法不一样，无本质区别若函数作为对象的一个属性保存，那么就称 *** 这个函数是这个对象的方法。调用函数就叫调用对象的方法（methods）。</code></pre><h4 id="3-枚举-（将对象的属性一个个取出）"><a href="#3-枚举-（将对象的属性一个个取出）" class="headerlink" title="3. 枚举 （将对象的属性一个个取出）"></a>3. 枚举 （将对象的属性一个个取出）</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用for in</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">"wind"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token string">"24"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 语法:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 有几个键，(打印几次),循环就会执行几次，每次执行都会将对象的属性赋值给变量 n</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// n = name 第一次</span><span class="token comment" spellcheck="true">// n = age 第二次</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 对象、函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ant-Design双向数据绑定及其他</title>
      <link href="2021/05/15/ant-design-shuang-xiang-shu-ju-bang-ding-ji-qi-ta/"/>
      <url>2021/05/15/ant-design-shuang-xiang-shu-ju-bang-ding-ji-qi-ta/</url>
      
        <content type="html"><![CDATA[<p>前提：</p><p>antd的表单Input，Selcet,多选check不像在Vue，数据与视图实时绑定，view刷新数据跟着变。</p><p>由于react是单向数据流，数据变化了才会同步到视图，因此需要另一种方式来实现。</p><p>举例Input:</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/**    **思路：**    给Input设置value、onChange属性，在onChange时修改兵保存value的值。同Select、checked。    如果一个onChange事件要一次修改保存多个Input、Select，checked。    可以在onChange事件函数中定义一个对象，传给onChange函数的参数再多出一个作为标识，    第二个值默认是改变后的====>最新值。*/</span>valueChange <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> valueChange <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    dataChange<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token comment" spellcheck="true">/**        ps：对象使用[]存键名，可存储特殊键名        例如obj["123"] = 789        obj["#@^%Gd"] = 666 都是正确的        这里使用obj[]就更加灵活    */</span>    <span class="token comment" spellcheck="true">/**       此处相当于将一条有键所对应的Input、Select，checked变化后的Value值存储到一个对象了    */</span>    <span class="token comment" spellcheck="true">// 那么每次在有一条数据的value发生变化的时候，重新修改这个对象即可！</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//*** 使用 hook</span><span class="token keyword">const</span> <span class="token punctuation">[</span>dataChange<span class="token punctuation">,</span> setDataChange<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>valueChange <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    dataChange<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token comment" spellcheck="true">//此时dataChange原值已被更改</span>    <span class="token comment" spellcheck="true">// 更新更改后的dataChange</span>    <span class="token function">setDataChange</span><span class="token punctuation">(</span>dataChange<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// view</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>     <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>dataChange<span class="token punctuation">.</span>inputs<span class="token punctuation">}</span></span>     <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">valueChange</span><span class="token punctuation">(</span><span class="token string">"inputs"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">// 使用 类式组件</span><span class="token keyword">export</span> defalut Class <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">{</span>    <span class="token function">cconstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            dataChange <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    valueChange <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> dataChange <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        dataChange<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> value          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dataChange<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// view</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>     <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>dataChange<span class="token punctuation">.</span>inputs<span class="token punctuation">}</span></span>     <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueChange</span><span class="token punctuation">(</span><span class="token string">"inputs"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre><p>其他：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/**   1) 防抖处理 背景：在做webscoket推送时，需要重新刷新页面，以体现实时更新的效果。 但是有个问题，webscoket推送太快后面页面会非常卡，刷新频率太快不利于用户操作，也影响美观 解决方法：（防抖）控制数据更新频率*/</span> <span class="token comment" spellcheck="true">// code</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">//借助闭包维护全局纯净</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>         <span class="token punctuation">}</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 简化写法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在调数据接口的地方调用 debounce（），传入请求数据接口的函数和希望延迟的时间</span></code></pre><p>相关资料地址：<a href="https://segmentfault.com/a/1190000018428170">https://segmentfault.com/a/1190000018428170</a></p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/**  2)   关于git为什么先pull   先pull 最后再push 的情况就是为了应对多人合并开发的情况*/</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/**  3) 问题：  在用到一个视频插件的地方给包裹它的元素position，给这个元素的父级realtive，  结果子元素不显示了，去除掉父级的realtive就能正常显示，此问题尚未解决，仍在思考中！  对于相对，绝对定位的理解有待加深。*/</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> antd  数据绑定  其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js总结</title>
      <link href="2021/05/10/js-zong-jie/"/>
      <url>2021/05/10/js-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>JS：布兰登艾奇发明</p><p>简称JS(javascript),与Java无本质关系</p><p>JS是ECMA的体现，ECMA是JS的规范</p><h4 id="什么是javascript-？"><a href="#什么是javascript-？" class="headerlink" title="什么是javascript ？"></a>什么是javascript ？</h4><p>基于对象和事件驱动的 解释性，程序设计脚本语言。</p><p>基于对象：暂时省略..</p><p>事件驱动： …</p><p>解释性：…</p><p>跨平台性：…</p><pre class=" language-tcl"><code class="language-tcl">JS语法以;结尾，不写也行，浏览器会自动添加，但会消耗系统资源。JS会忽略多个换行和空格，因此我们可以对代码进行优化。字面量：不可改变的值，用的较少；变量：可保存字面量，且可以改变。</code></pre><pre class=" language-tex"><code class="language-tex">标识符：JS中可自主命名的，都叫标识符。(变量名、函数名，属性名)1）标识符可含数字、字母、_,$;2）标识符不能以数字开头;3) 不能是ES中的关键字或保留字;4) JS中一般标识符使用驼峰命名;</code></pre><h4 id="数据类型（基本数据类型，引用数据类型）"><a href="#数据类型（基本数据类型，引用数据类型）" class="headerlink" title="数据类型（基本数据类型，引用数据类型）"></a>数据类型（基本数据类型，引用数据类型）</h4><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>基本数据类型number<span class="token punctuation">,</span>string<span class="token punctuation">,</span>boolean<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>undefined<span class="token number">2</span><span class="token punctuation">.</span>引用数据类型Object 包含 object、array<span class="token punctuation">,</span><span class="token keyword">function</span></code></pre><pre class=" language-js"><code class="language-js">string<span class="token punctuation">:</span>字符串需要使用<span class="token string">""</span>引起来，单双都可以；字符串使用 \ 作为转义符（转义作用：把一个东西以普通方式展现，不做过多处理，同正则转义）；在字符串中 \n 表示换行 （这是换行符？待定）  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"我爱你，\n娟"</span>；咋字符串中 \t 表示制表符，相当于按了tab键。</code></pre><h5 id="数据类型强制转换"><a href="#数据类型强制转换" class="headerlink" title="数据类型强制转换"></a><strong>数据类型强制转换</strong></h5><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">;</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span>    a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>不会影响原变量，有返回值；   <span class="token keyword">null</span><span class="token function">，undefined没有toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 函数； 将要转化的作为参数，s大写；   可将<span class="token keyword">null</span><span class="token punctuation">,</span>undefined加上<span class="token string">""</span><span class="token function">，转为字面量；相对于toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>可转<span class="token keyword">null</span><span class="token punctuation">,</span>undefined；<span class="token number">3</span><span class="token punctuation">.</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">;</span> 将要转的值放里面，空<span class="token string">' '</span>或 <span class="token string">'    '</span>里面加了空格转为<span class="token number">0</span>；   布尔值 <span class="token boolean">true</span> 转为 <span class="token number">1</span>， <span class="token boolean">false</span>转为 <span class="token number">0</span> ；   <span class="token keyword">null</span>类型为number，结果为 <span class="token number">0</span>；   undefined<span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span>，结果为NAN；</code></pre><p><strong>专门处理字符串的parseInt</strong></p><pre class=" language-js"><code class="language-js">a <span class="token operator">=</span> <span class="token string">"123px"</span> a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 123</span>parseInt将字符串中的整数内容取出；<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>取浮点型<span class="token operator">*</span>补充<span class="token operator">*</span> 对于非string类型使用parseInt会先转成string<span class="token punctuation">,</span>然后再操作，因此parseInt（<span class="token boolean">true</span>）结果会是NAN；<span class="token operator">**</span><span class="token function">相对于Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">可以转换带px</span><span class="token punctuation">(</span>单位的<span class="token punctuation">)</span>，但转有些值（<span class="token boolean">true</span>）并不太理想<span class="token operator">**</span>    <span class="token number">4</span><span class="token punctuation">.</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">;</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true;</span>   <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>   <span class="token function">Boolean</span><span class="token punctuation">(</span>Infinty<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>   <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>   <span class="token operator">**</span>总结：<span class="token operator">**</span>   数字，再除了<span class="token number">0</span>和<span class="token keyword">null</span>，都是<span class="token boolean">true</span><span class="token punctuation">;</span>   字符串除了空字符串<span class="token string">' '</span>，都是<span class="token boolean">true</span>。字符串里一个空格，也是<span class="token boolean">true</span><span class="token punctuation">;</span>   undefined是<span class="token boolean">false</span><span class="token punctuation">;</span>   转对象也是<span class="token boolean">true</span>。</code></pre><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token punctuation">)</span>就是一种运算符。算数运算符？<span class="token operator">+</span> <span class="token punctuation">:</span> <span class="token operator">+</span> 号是比较特殊的运算符，可做字符串拼接。  任何值 与 字符串 做拼接，都会把该值转为字符串，再拼接；  <span class="token operator">**</span><span class="token operator">*</span>可以使用  任意数据 <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">**</span><span class="token operator">*</span> 这种方法转为字符串串；  <span class="token operator">**</span><span class="token operator">*</span>在打印的时候，可以使用 <span class="token string">" c = "</span> <span class="token operator">+</span> c 的方式打印更佳！    <span class="token operator">-</span> <span class="token operator">/</span> <span class="token operator">*</span>   任何 值使用 <span class="token operator">-</span> <span class="token operator">/</span> <span class="token operator">*</span> 运算符时会将值转为number（隐式转换）  <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">**</span><span class="token operator">*</span> 可以用一个   字符串 <span class="token operator">-</span> <span class="token number">0</span> ，就转化为number<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "123" - 0</span>  <span class="token operator">-</span> 号可对值进行取反， <span class="token operator">-</span> 为number负值， <span class="token operator">+</span> 为正值；运算符优先级： 先乘除后加减，同数学。 <span class="token operator">||</span>  <span class="token operator">&amp;&amp;</span>   <span class="token operator">!</span>有一个优先级的表； 优先级一样，就从左往右算；</code></pre><h5 id="JS代码块：-只有分组作用"><a href="#JS代码块：-只有分组作用" class="headerlink" title="JS代码块： 只有分组作用"></a>JS代码块： 只有分组作用</h5><p>补充：质数(除了1和它本身之间的数，不能整除它本身，那它就是质数)</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 质数: 除了1和他本身，也就是从二开始到它之间的数，若都不能被这之间的数整除，该数是质数</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入一个大于1的数'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'非法！'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 被一个数整除</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token string">'是质数'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token string">"不是质数！"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法java初识</title>
      <link href="2021/05/06/suan-fa-java-chu-shi/"/>
      <url>2021/05/06/suan-fa-java-chu-shi/</url>
      
        <content type="html"><![CDATA[<p>递归：自己调自己，效率非常不好。使用递归测算可能会卡主程序，因为慢；</p><p>循环：速度很快，因为是异步进行的？</p><p>所谓算法，其实就是，比对各种不同测算结果的优劣，取最优！（以后再补充）</p><p>java 的函数需要在主函数main里调，out规定输出什么值；</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法、java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antdPopover的动态变色和动态visable</title>
      <link href="2021/05/05/antdpopover-de-dong-tai-bian-se-he-dong-tai-visable/"/>
      <url>2021/05/05/antdpopover-de-dong-tai-bian-se-he-dong-tai-visable/</url>
      
        <content type="html"><![CDATA[<h5 id="目的：-使用Popover制作动态的变色和控制Visable"><a href="#目的：-使用Popover制作动态的变色和控制Visable" class="headerlink" title="目的： 使用Popover制作动态的变色和控制Visable"></a>目的： 使用Popover制作动态的变色和控制Visable</h5><p>引入相关文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cxs <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Popover <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'../../iconfont/iconfont.css'</span><span class="token keyword">import</span> <span class="token string">"./popovers.css"</span><span class="token punctuation">;</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Popovers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>chooseIndex<span class="token punctuation">,</span> setChooseIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Rose"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Mary"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Lucy"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">28</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">29</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Bruce"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">27</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Tian"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"JuDiao"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Niuheng"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">31</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"KaiDi"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Haohao"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Wind"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span>  <span class="token keyword">const</span> closeList <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">)</span>    <span class="token function">setChooseIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 每次关闭也会重新return？ 渲染的是全部视图还是局部视图</span>    <span class="token comment" spellcheck="true">// stopPropagation 阻止事件冒泡</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> renderContent <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 函数组件的函数，还必须const</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'content-wrap'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">"content-top"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'content-top-left'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Name<span class="token punctuation">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token operator">&lt;</span>div         onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 此处必须阻止冒泡事件，否则会触发父元素的点击事件，导致子元素的点击事件点击了但是没效果</span>          <span class="token function">closeList</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// ***这是因为事件冒泡触发父元素点击对值重新赋值了***</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>        className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'content-top-right'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon</span> <span class="token attr-name">iconfont"</span><span class="token punctuation">></span></span><span class="token entity" title="&#xe607;">&amp;#xe607;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">"content-bottom"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Have a good nice Day <span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> changeColorAndIndex <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(item, index)</span>    <span class="token comment" spellcheck="true">// console.log('changeIndex')</span>    <span class="token function">setChooseIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 中间值与下标相等了 ，完成了两件事，被点击元素变色，被点击元素的pop显示，其他不显示！</span>  <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'wrap'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>点名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div         key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span>        id<span class="token operator">=</span><span class="token string">'item-info'</span>            className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"activeIndex"</span><span class="token punctuation">:</span> chooseIndex <span class="token operator">===</span> index<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//1. 若类名与中间值相等，就出现变化的背景色</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token function">changeColorAndIndex</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//3.  使中间值和下标相等的事件。触发器</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span>Popover          content<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">renderContent</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span>          trigger<span class="token operator">=</span><span class="token string">"click"</span>          getPopupContainer<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"item-info"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 绑定渲染父级</span>          visible<span class="token operator">=</span><span class="token punctuation">{</span>chooseIndex <span class="token operator">===</span> index<span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//2. 同理，若下标和中间值相同就显示</span>        <span class="token operator">></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">"item-onfo1"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'item-info-left'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cxs</span><span class="token punctuation">(</span><span class="token string">'item-info-right'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Popover</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Popovers</code></pre><h5 id="关于为什么popover要绑定父级"><a href="#关于为什么popover要绑定父级" class="headerlink" title="关于为什么popover要绑定父级"></a>关于为什么popover要绑定父级</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// popover的默认渲染父级是body ，这在有些时候会出问题，例如元素错位(当然在目前看来是没有问题的，为了严谨)</span>getPopupContainer<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"item-info"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="css"><a href="#css" class="headerlink" title="css:"></a>css:</h5><pre class=" language-css"><code class="language-css"><span class="token selector">// 给父级元素相对定位，高度// 给子元素向左的距离<span class="token class">.ant-popover</span> </span><span class="token punctuation">{</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">415</span>px  <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover-arrow</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none  <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover-inner-content</span></span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">270</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="完整css"><a href="#完整css" class="headerlink" title="完整css"></a>完整css</h6><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.wrap</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">900</span>px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header</span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* text-align: center; */</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> seagreen<span class="token punctuation">;</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#item-info</span></span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">16</span>px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.activeIndex</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#cccccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-onfo1</span></span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">11</span>px <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#cccccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-info-left</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-info-right</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover</span> </span><span class="token punctuation">{</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">415</span>px  <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover-arrow</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none  <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ant-popover-inner-content</span></span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">270</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* content */</span><span class="token selector"><span class="token class">.content-wrap</span></span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">14</span>px <span class="token number">16</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top</span></span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-bottom</span></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* less 预编译  要  calc(~"100% - 50px") */</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span> - <span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-left</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-left</span> p</span><span class="token punctuation">{</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-left</span> h1</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> crimson<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-right</span> </span><span class="token punctuation">{</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-top-right</span> i </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-bottom</span> h2</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> dodgerblue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> aned Popover </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AutoComplute制作模糊搜索</title>
      <link href="2021/05/05/autocomplute-zhi-zuo-mo-hu-sou-suo/"/>
      <url>2021/05/05/autocomplute-zhi-zuo-mo-hu-sou-suo/</url>
      
        <content type="html"><![CDATA[<h5 id="1-引入React-useState-classnames插件，引出Option"><a href="#1-引入React-useState-classnames插件，引出Option" class="headerlink" title="1. 引入React, useState classnames插件，引出Option"></a>1. 引入React, useState classnames插件，引出Option</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cxs <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AutoComplete <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./dimserch.css'</span><span class="token keyword">const</span> <span class="token punctuation">{</span> Option <span class="token punctuation">}</span> <span class="token operator">=</span> AutoComplete</code></pre><p><strong>思路</strong> ：</p><p>将一份数据存两遍，一份用于渲染，一份用于查找。</p><p>由于传入的  搜索值(serch)或是 变化值(onChange)的值若是空字符串，那么只需在另一份保存的数据中查找就可以了；</p><pre class=" language-js"><code class="language-js">filter，用list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 第一种写法  1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>includes<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>   <span class="token comment" spellcheck="true">// 若item包含传入值，返回此对象</span>      <span class="token comment" spellcheck="true">//第二种写法   2</span>  <span class="token comment" spellcheck="true">// const regex = new RegExp(val)</span>  <span class="token comment" spellcheck="true">// if(regex.test(item)) return true</span>  <span class="token keyword">return</span> <span class="token boolean">false</span> 其他情况不返回！<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">DimSerch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> list <span class="token operator">=</span>    <span class="token punctuation">[</span>      <span class="token string">"双皮奶"</span><span class="token punctuation">,</span> <span class="token string">"狮子头"</span><span class="token punctuation">,</span> <span class="token string">"擀面皮"</span><span class="token punctuation">,</span> <span class="token string">"巧克力蛋糕"</span><span class="token punctuation">,</span>         <span class="token string">"热米皮"</span><span class="token punctuation">,</span> <span class="token string">"牛肉面"</span><span class="token punctuation">,</span> <span class="token string">"二细牛肉面"</span><span class="token punctuation">,</span> <span class="token string">"三细牛肉面"</span><span class="token punctuation">,</span>      <span class="token string">"扬州炒饭"</span><span class="token punctuation">,</span> <span class="token string">"蛋炒饭"</span><span class="token punctuation">,</span> <span class="token string">"蛋炒土豆丝"</span><span class="token punctuation">,</span> <span class="token string">"巧克力饼"</span><span class="token punctuation">,</span>        <span class="token string">"狮子头拌奶酪"</span><span class="token punctuation">,</span> <span class="token string">"火腿擀面皮"</span><span class="token punctuation">,</span> <span class="token string">"加量擀面皮"</span><span class="token punctuation">,</span>      <span class="token string">"热米皮拌青椒"</span><span class="token punctuation">,</span> <span class="token string">"双皮奶加量"</span><span class="token punctuation">,</span> <span class="token string">"海之言"</span><span class="token punctuation">,</span> <span class="token string">"蓝色海之言"</span><span class="token punctuation">,</span>         <span class="token string">"紫色海之言"</span><span class="token punctuation">,</span> <span class="token string">"橘黄海之言"</span><span class="token punctuation">,</span> <span class="token string">"绿色海之言"</span><span class="token punctuation">,</span>      <span class="token string">"百吉猫锅巴"</span><span class="token punctuation">,</span> <span class="token string">"三元锅巴"</span><span class="token punctuation">,</span> <span class="token string">"酥锅巴"</span><span class="token punctuation">,</span> <span class="token string">"AD钙"</span><span class="token punctuation">,</span> <span class="token string">"乳酸菌AD钙"</span><span class="token punctuation">,</span>         <span class="token string">"草莓AD钙"</span><span class="token punctuation">,</span> <span class="token string">"香辣火腿肠"</span><span class="token punctuation">,</span> <span class="token string">"玉米火腿肠"</span>    <span class="token punctuation">]</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>realyDatas<span class="token punctuation">,</span> setRealyDatas<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>originList<span class="token punctuation">,</span> setoriginList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>  <span class="token keyword">const</span> handleSearch <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// const regex = new RegExp(val)  // 定义规则(传入值);若val是空字符串，</span>                                      <span class="token comment" spellcheck="true">// 那么所有被检验元素都包含''，</span>       <span class="token comment" spellcheck="true">/**         *** 注意： 在使用正则regex.test(item)有时会在搜索框 的值包含()，         删去一个时报错，提示不是有效的正则，而includes不会报这个错。      */</span>            <span class="token comment" spellcheck="true">// 也就是说，此时返回被遍历对象的所有（每一项）;</span>    <span class="token keyword">let</span> newArray <span class="token operator">=</span> originList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// if (regex.test(item)) {      // 若每一项包含所定义规则；所有字符都包含空字符串；</span>      <span class="token comment" spellcheck="true">//   return true                // 就返回这个对象</span>      <span class="token comment" spellcheck="true">// }</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// item包含输入的值，返回此对象；其他情况false不返回</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setRealyDatas</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 更新渲染数组； 重新渲染</span>  <span class="token punctuation">}</span>    <span class="token keyword">const</span> autoChange <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 关于是否只需要一个这样的函数，待定</span>    <span class="token comment" spellcheck="true">// const regex = new RegExp(val)</span>    <span class="token keyword">let</span> newArray <span class="token operator">=</span> originList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// if (regex.test(item)) {</span>      <span class="token comment" spellcheck="true">//   return true</span>      <span class="token comment" spellcheck="true">// }</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setRealyDatas</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>wrap<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AutoComplete</span>        <span class="token attr-name">getPopupContainer</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"wrap"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>        <span class="token attr-name">onSearch</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleSearch<span class="token punctuation">}</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>autoChange<span class="token punctuation">}</span></span>        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">/**          在渲染时如果数据量过大，搜索框会出现卡顿          因此不能直接渲染全部数据       */</span>        <span class="token punctuation">{</span><span class="token punctuation">(</span>realyDatas<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">30</span>           <span class="token operator">?</span> realyDatas<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>           <span class="token punctuation">:</span> realyDatas<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Option</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            <span class="token punctuation">{</span>item<span class="token punctuation">}</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Option</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AutoComplete</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> DimSerch</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 模糊搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="2021/04/30/sui-bi/"/>
      <url>2021/04/30/sui-bi/</url>
      
        <content type="html"><![CDATA[<h4 id="4-10-4-16-report"><a href="#4-10-4-16-report" class="headerlink" title="4.10-4.16 report"></a>4.10-4.16 report</h4><h5 id="1-Object-keys-obj-传入对象，返回属性名"><a href="#1-Object-keys-obj-传入对象，返回属性名" class="headerlink" title="1) Object.keys(obj)  // 传入对象，返回属性名"></a>1) Object.keys(obj)  // 传入对象，返回属性名</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">"上午"</span><span class="token punctuation">,</span>list<span class="token punctuation">:</span><span class="token string">"333"</span><span class="token punctuation">,</span> dance<span class="token punctuation">:</span><span class="token string">"巴克勒"</span><span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (3) ["type", "list", "dance"]  返回键名，但并没有吃掉属性值</span></code></pre><h5 id="2-classList添加类名"><a href="#2-classList添加类名" class="headerlink" title="2) classList添加类名"></a>2) classList添加类名</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> bot <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'bot'</span><span class="token punctuation">)</span>bot<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'niuheng'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// console.log(bot.classList.contains('niuheng')) // true</span></code></pre><h5 id="3）-map的参数"><a href="#3）-map的参数" class="headerlink" title="3） map的参数"></a>3） map的参数</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"类型"</span><span class="token punctuation">,</span> <span class="token string">"影响"</span><span class="token punctuation">,</span> <span class="token string">"距离"</span><span class="token punctuation">,</span> <span class="token string">"推荐"</span><span class="token punctuation">,</span> <span class="token string">"预计"</span><span class="token punctuation">]</span>     array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// console.log(item+'x', index, arr)</span>        <span class="token comment" spellcheck="true">// 类型x 0 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>        <span class="token comment" spellcheck="true">// VM22:3 影响x 1 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>        <span class="token comment" spellcheck="true">// VM22:3 距离x 2 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>        <span class="token comment" spellcheck="true">// VM22:3 推荐x 3 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>        <span class="token comment" spellcheck="true">// VM22:3 预计x 4 (5) ["类型", "影响", "距离", "推荐", "预计"]</span>         <span class="token keyword">return</span> item<span class="token operator">+</span><span class="token string">'x'</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// (5) ["类型x", "影响x", "距离x", "推荐x", "预计x"]</span></code></pre><h5 id="4-Array-from"><a href="#4-Array-from" class="headerlink" title="4) Array.from()"></a>4) Array.from()</h5><h6 id="Array-from-将一个类数组对象或可遍历对象转化为一个真正的数组"><a href="#Array-from-将一个类数组对象或可遍历对象转化为一个真正的数组" class="headerlink" title="Array.from()将一个类数组对象或可遍历对象转化为一个真正的数组"></a>Array.from()将一个类数组对象或可遍历对象转化为一个真正的数组</h6><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">9797</span><span class="token punctuation">,</span><span class="token number">564</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">45642</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [[Entries]]</span>        <span class="token comment" spellcheck="true">// 0: 12</span>        <span class="token comment" spellcheck="true">// 1: 45</span>        <span class="token comment" spellcheck="true">// 2: 97</span>        <span class="token comment" spellcheck="true">// 3: 9797</span>        <span class="token comment" spellcheck="true">// 4: 564</span>        <span class="token comment" spellcheck="true">// 5: 134</span>        <span class="token comment" spellcheck="true">// 6: 45642</span>        <span class="token comment" spellcheck="true">// size: 7,</span><span class="token comment" spellcheck="true">// 可以看到set不是一个数组，它看起来想一个对象，却又不是一个对象</span><span class="token comment" spellcheck="true">// console.log( Array.from(set))  // [12, 45, 97, 9797, 564, 134, 45642]</span></code></pre><h6 id="Array-from-还可将NodeList-转为真正的数组。"><a href="#Array-from-还可将NodeList-转为真正的数组。" class="headerlink" title="Array.from()还可将NodeList  转为真正的数组。"></a>Array.from()还可将NodeList  转为真正的数组。</h6><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> abc <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过getElementsByTagName获取的元素不是一个数组，而是nodeList</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">,</span>abc<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 使用Array.from()</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Array.form'</span><span class="token punctuation">,</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[a, a, a, a, a, a, a, a]</span><span class="token comment" spellcheck="true">//第二种方法转化</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 这种方式新建数组很新颖</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> abc<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> ele <span class="token operator">=</span> abc<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [a, a, a, a, a, a, a, a]</span></code></pre><h5 id="5-合并对象-assign"><a href="#5-合并对象-assign" class="headerlink" title="5) 合并对象 assign"></a>5) 合并对象 assign</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>config<span class="token punctuation">,</span> <span class="token punctuation">{</span> key<span class="token punctuation">:</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="6）writing-mode"><a href="#6）writing-mode" class="headerlink" title="6）writing-mode"></a>6）writing-mode</h5><p>文字垂直显示</p><pre class=" language-css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">writing-mode</span><span class="token punctuation">:</span> vertical-lr<span class="token punctuation">}</span></code></pre><h5 id="7）getAttribute-setAttribute"><a href="#7）getAttribute-setAttribute" class="headerlink" title="7）getAttribute\setAttribute"></a>7）getAttribute\setAttribute</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> pp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>pp<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-event'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 添加属性</span><span class="token keyword">let</span> hasEvent <span class="token operator">=</span> pp<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-event'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取对应键名对应的属性值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hasEvent<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><h5 id="8）Object-prototype-toString-call"><a href="#8）Object-prototype-toString-call" class="headerlink" title="8）Object.prototype.toString.call()"></a>8）Object.prototype.toString.call()</h5><h6 id="用Object-prototype-toString-call-obj-检测对象类型"><a href="#用Object-prototype-toString-call-obj-检测对象类型" class="headerlink" title="用Object.prototype.toString.call(obj)检测对象类型"></a>用Object.prototype.toString.call(obj)检测对象类型</h6><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Eric'</span><span class="token punctuation">,</span><span class="token string">'Mary'</span><span class="token punctuation">,</span><span class="token string">'Rose'</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Array]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'Eric'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object String]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// [object Number]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// [object Boolean]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Undefined]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Null]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"julius"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Object]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Function]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// [object Array]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object Date]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token regex">/^\[.*\]$/</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [object RegExp]</span></code></pre><h6 id="判断数据类型-gt-函数调用"><a href="#判断数据类型-gt-函数调用" class="headerlink" title="判断数据类型====&gt;函数调用"></a>判断数据类型====&gt;函数调用</h6><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> isNumber <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>  Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Number]'</span>  <span class="token comment" spellcheck="true">// 字符串怎么能是true呢？</span>    <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><h5 id="9）引入iconfont字体图标"><a href="#9）引入iconfont字体图标" class="headerlink" title="9）引入iconfont字体图标"></a>9）引入iconfont字体图标</h5><p>下载好并放入，import ‘./iconfont/iconfont.css’</p><pre class=" language-html"><code class="language-html">// 使用：第一种方法 =>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">*className*</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-zanting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">// 第二种方法 => <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon iconfont<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#xe635;">&amp;#xe635;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git操作</title>
      <link href="2021/04/30/git-cao-zuo/"/>
      <url>2021/04/30/git-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h4 id="git-操作"><a href="#git-操作" class="headerlink" title="git 操作"></a>git 操作</h4><pre class=" language-jsx"><code class="language-jsx">git add <span class="token punctuation">.</span>git commit <span class="token operator">-</span>m git push <span class="token comment" spellcheck="true">// (若从远程上来下来，并切换了分支，那么可直接git push 就能将本地最新代码push到远程对应的这个分支上去)</span>git checkout  <span class="token comment" spellcheck="true">// 分支名 (已在远程对应的分支上，可使用此命令切换到其他远程分支)</span>git checkout <span class="token operator">-</span>b <span class="token comment" spellcheck="true">// 分支名 (创建本地分支)</span>git branch <span class="token operator">-</span>a <span class="token comment" spellcheck="true">// (查看所有分支，本地and远程)</span>git branch <span class="token comment" spellcheck="true">// (查看本地分支)</span>git push <span class="token operator">--</span><span class="token keyword">set</span><span class="token operator">-</span>upstream origin 本地分支名 <span class="token comment" spellcheck="true">// (将本地分支推到远程仓库，使远程仓库下有该分支名)</span>git pull origin develop <span class="token comment" spellcheck="true">// 拉取对应远程分支的代码</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组过滤undefined</title>
      <link href="2021/04/30/shu-zu-guo-lu-undefined/"/>
      <url>2021/04/30/shu-zu-guo-lu-undefined/</url>
      
        <content type="html"><![CDATA[<h5 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h5><p>我们在传递数据的时候，很多时候数据是一个数组，而又有些时候我们并不需要将整个数组传递过去，而是传递数组中的前几个对象；</p><p>这时就可以现在这样： method([list[0],list[1],list[2,list[3]])；</p><p>(调用父组件传递过来的函数，发送一个数组)；</p><p><strong>问题：数据都是调用后端接口得来的，而数据这个东西，有时候多，有时候少，多的时候就不说了，反正我们时以下标这样取得，怎么传也只有三条数据，但是数据少的时候问题就来了；</strong></p><p>什么问题呢？ 通过像这样传递的数据 method([list[0],list[1],list[2,list[3]])，<strong>如果数据一旦少于三条。也就是说如果调接口之得到一条数据</strong>，但是你这样通过下标传递数据, 那么发送过去的这个数组后两个必定是undefined!</p><p>将undefined发送给其他需要的组件，那么是极有可能出问题的，因此我们需要对数据进行处理：<strong>在数据为undefined时不发送数据！</strong></p><p>哪怕我只发送过去一条实际存在的数据，也不发送undefined,可以少传，可以不传，但不可以发undefined!</p><p>试了很多种方法，例如：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// list是我们要发送的数组</span><span class="token comment" spellcheck="true">// 将list 遍历</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>datas<span class="token punctuation">,</span> setDatas<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mydatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> list <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token operator">...</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">&amp;&amp;</span> item<span class="token operator">!==</span> undefined <span class="token operator">||</span> item <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> item <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [{item},undefined,undefined] 结果依然没有发生变化,依然发送的是undefined</span>    <span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">[</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p>解决：</p><pre class=" language-js"><code class="language-js"><span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">[</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 返回的新数组种没有undefined！！！</span><span class="token comment" spellcheck="true">// success</span></code></pre><p>原因：经过filter后会自动去掉undefined、null,空字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token string">'3.jpg'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span>、<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">]</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>VM23<span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3.jpg"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 可以看到undefined、null、"" 被去除了</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数组过滤undefined、null，&#39;&#39; </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件冒泡的影响，两种hook</title>
      <link href="2021/04/28/shi-jian-mou-pao-de-ying-xiang-liang-chong-hook/"/>
      <url>2021/04/28/shi-jian-mou-pao-de-ying-xiang-liang-chong-hook/</url>
      
        <content type="html"><![CDATA[<h5 id="1-多个元素嵌套设有多个点击事件，最下级的元素触发点击事件可能发生冒泡情况。"><a href="#1-多个元素嵌套设有多个点击事件，最下级的元素触发点击事件可能发生冒泡情况。" class="headerlink" title="1. 多个元素嵌套设有多个点击事件，最下级的元素触发点击事件可能发生冒泡情况。"></a>1. 多个元素嵌套设有多个点击事件，最下级的元素触发点击事件可能发生冒泡情况。</h5><p><strong>冒泡</strong>：点击子元素的  点击事件， 会同时触发父组件的点击事件；</p><p><strong>在多个嵌套元素设置多个点击事件，极有可能发生此类问题！</strong></p><p>关于冒泡带来的问题，例如：    </p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 在一个元素的父级 定义一个点击事件    // 在这个事件中定义一种状态或者是下标，</span><span class="token keyword">function</span> <span class="token function">Cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>chooseIndex<span class="token punctuation">,</span> setChooseIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>    <span class="token operator">...</span>       changeIndex <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 父级元素的点击事件</span>        <span class="token function">setChooseIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// setChooseIndex改变初始值后  是必定会引发视图更新的！！</span>    <span class="token punctuation">}</span>    closeStatus <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 子节点的点击事件</span>       <span class="token function">setChooseIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 默认传空，chooseIndex 便不再等于index，但是visable 却没有关闭</span>   <span class="token punctuation">}</span>                       <span class="token comment" spellcheck="true">// 在useEffect 和 reuturn打印发现值还是上一次的，也就是没有被改变</span>    <span class="token punctuation">{</span>dataList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// ****原因是因为，子元素每次closeStatus时都重新触发了changeIndex事件，因此closeStatus的值怎么都改不过来****</span>    <span class="token comment" spellcheck="true">// **** 阻止事件冒泡即可</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span>        <span class="token operator">...</span>    <span class="token operator">...</span>         <span class="token comment" spellcheck="true">// 当chooseIndex == index 时，会出现两个效果，点击每一个变色；popver单个visable 属性true</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">classname</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token string">'list-wrap'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"activeItemClass"</span> <span class="token punctuation">:</span> chooseIndex <span class="token operator">===</span> index<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>     <span class="token operator">&lt;</span>Popver      content <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token function">renderContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>     visable<span class="token operator">=</span><span class="token punctuation">{</span>chooseIndex <span class="token operator">===</span> index<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 当chooseIndex === index，即成立时，visable为true</span>     <span class="token operator">></span>                                <span class="token comment" spellcheck="true">// visable 在不成立，值不存在的情况下为false  例如： item.visable不存在为          false</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">changeIndex</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Popver</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>       renderContent <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token operator">...</span>        <span class="token operator">...</span>        <span class="token operator">&lt;</span>div         onClick <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 阻止事件冒泡</span>                <span class="token function">closeStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2 . 补充：   useEffect 、useState</p><pre class=" language-tex"><code class="language-tex">useEffect 函数在  函数组件是可以多次定义的，这样的好处是：各放各的，不至于在有的状态和一个开关的值发生变化时，因为空数组传了值而重新调用useEffect 里面请求接口数据的函数，造成多次请求，严重影响页面性能。</code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 而定义的  </span><span class="token keyword">const</span> <span class="token punctuation">[</span>content<span class="token punctuation">,</span> setContnet<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 在set后是一定会重新刷新页面的，就像类的this.setSate({})也会重新调用render函数，重新刷新页面。</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 事件冒泡、hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决OpenSSL报错</title>
      <link href="2021/04/27/jie-jue-openssl-bao-cuo/"/>
      <url>2021/04/27/jie-jue-openssl-bao-cuo/</url>
      
        <content type="html"><![CDATA[<p>首先，这个错误很可能是网络不稳定，连接超时导致的；</p><h5 id="若再次尝试依然报错，可输入如下命令"><a href="#若再次尝试依然报错，可输入如下命令" class="headerlink" title="若再次尝试依然报错，可输入如下命令"></a>若再次尝试依然报错，可输入如下命令</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ps ：在 hexo g 后输入效果更佳</span>git config <span class="token operator">--</span>global http<span class="token punctuation">.</span>sslVerify <span class="token string">"false"</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Git报错解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css磨砂效果，模糊效果</title>
      <link href="2021/04/27/css-mo-sha-xiao-guo-mo-hu-xiao-guo/"/>
      <url>2021/04/27/css-mo-sha-xiao-guo-mo-hu-xiao-guo/</url>
      
        <content type="html"><![CDATA[<p>要点：给需要磨砂的div(设rgba的那个元素) =&gt; 设置伪元素；</p><p>给伪元素content: ‘’、绝对定位，四处为0,left：0….</p><p>给伪元素一样的背景图，并给z-index: -1 、给自身z-index:1 ***重要，必须给！</p><p>最后给 伪元素 filter: blur(37px); 属性值，效果就出来了。</p><pre class=" language-css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(./heroheart.jpg)</span><span class="token punctuation">;</span>   <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#app</span></span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">370</span>px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#app</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(./heroheart.jpg)</span><span class="token punctuation">;</span><span class="token property">background-size</span><span class="token punctuation">:</span>cover <span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span><span class="token number">37</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">28</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFFFFF</span><span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>时间带走了回不去的青春，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>却带不走我一往无前的心！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>世间万物，万般困难、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>能耐我何？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> css 磨砂，模糊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/25/hello-world/"/>
      <url>2021/04/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
